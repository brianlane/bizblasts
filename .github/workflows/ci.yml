name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Debug directory structure
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          ls -la bin || echo "bin directory not found"

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Create bin directory if not exists
        run: mkdir -p bin

      - name: Install brakeman directly
        run: gem install brakeman

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: brakeman --no-pager

  # claude_security_review:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   permissions:
  #     pull-requests: write
  #     contents: read

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     # NOTE: The anthropics/claude-code-security-review action does not exist
  #     # This was added based on a non-existent GitHub Action
  #     # When re-enabling, verify the action exists and pin to a specific version
  #     # - name: Claude Code Security Review
  #     #   uses: anthropics/claude-code-security-review@v1.0.0  # Pin to specific version
  #     #   with:
  #     #     comment-pr: true
  #     #     claude-api-key: ${{ secrets.CLAUDE_API_KEY }}

  scan_js:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Create bin directory and scripts
        run: |
          mkdir -p bin
          echo '#!/usr/bin/env ruby' > bin/importmap
          echo 'require_relative "../config/application"' >> bin/importmap
          echo 'require "importmap/commands"' >> bin/importmap

      - name: Make bin scripts executable
        run: chmod +x bin/*

      - name: Install importmap-rails
        run: gem install importmap-rails

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bundle exec importmap audit || echo "Skipping importmap audit for now"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Debug directory structure
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          ls -la bin || echo "bin directory not found"

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Install rubocop directly
        run: gem install rubocop rubocop-rails

      # Run with auto-correct
      - name: Auto-correct style issues
        run: rubocop -a || true

      # Now run the actual lint check
      - name: Lint code for consistent style
        run: rubocop -f github || true

  # Model tests - typically fast and don't need browser
  test_models:
    runs-on: ubuntu-latest

    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_models
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/

      - name: Build JavaScript Assets
        run: |
          mkdir -p app/assets/builds
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_models;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_models;"
          bundle exec rake ci:github_actions

      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Run model tests
        run: bundle exec rspec spec/models

  # Request tests - API and controller tests
  test_requests_1:
    runs-on: ubuntu-latest
    
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_requests
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/

      - name: Build JavaScript Assets
        run: |
          mkdir -p app/assets/builds
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb
          chmod +x bin/split_request_tests.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_requests;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_requests;"
          bundle exec rake ci:github_actions

      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Split and run request spec group 1
        run: |
          TESTS=$(./bin/split_request_tests.rb 1)
          if [ -n "$TESTS" ]; then
            echo "Running request spec group 1..."
            bundle exec rspec $TESTS --format documentation
          else
            echo "No request specs found for group 1"
          fi

      - name: Run controller tests
        run: bundle exec rspec spec/controllers --format documentation

  # Request tests group 2
  test_requests_2:
    runs-on: ubuntu-latest
    
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_requests
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/

      - name: Build JavaScript Assets
        run: |
          mkdir -p app/assets/builds
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb
          chmod +x bin/split_request_tests.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_requests;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_requests;"
          bundle exec rake ci:github_actions

      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Split and run request spec group 2
        run: |
          TESTS=$(./bin/split_request_tests.rb 2)
          if [ -n "$TESTS" ]; then
            echo "Running request spec group 2..."
            bundle exec rspec $TESTS --format documentation
          else
            echo "No request specs found for group 2"
          fi

  # Service and business logic tests
  test_services:
    runs-on: ubuntu-latest
    
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_services
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/

      - name: Build JavaScript Assets
        run: |
          mkdir -p app/assets/builds
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_services;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_services;"
          bundle exec rake ci:github_actions

      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Run service tests
        run: bundle exec rspec spec/services spec/jobs spec/policies

  # Integration tests
  test_integration:
    runs-on: ubuntu-latest
    
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_integration
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/

      - name: Build JavaScript Assets
        run: |
          mkdir -p app/assets/builds
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_integration;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_integration;"
          bundle exec rake ci:github_actions

      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Run integration tests
        run: bundle exec rspec spec/integration spec/features spec/mailers

  # System tests part 1 - Core functionality and authentication
  test_system_1:
    runs-on: ubuntu-latest
    
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_system_1
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      CI: true
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
          # Install Chrome with modern apt key handling
          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          # Verify Chrome installation
          google-chrome --version

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/

      - name: Build JavaScript Assets
        run: |
          mkdir -p app/assets/builds
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb
          chmod +x bin/split_system_tests.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_system_1;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_system_1;"
          bundle exec rake ci:github_actions

      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Run system tests 1
        run: |
          TESTS=$(./bin/split_system_tests.rb 1)
          if [ -n "$TESTS" ]; then
            echo "Running system tests group 1..."
            bundle exec rspec $TESTS --format documentation
          else
            echo "No system tests found for group 1"
          fi

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: system-test-1-screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  # System tests part 2 - Business management and website building
  test_system_2:
    runs-on: ubuntu-latest
    
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_system_2
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      CI: true
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
          # Install Chrome with modern apt key handling
          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          # Verify Chrome installation
          google-chrome --version

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/

      - name: Build JavaScript Assets
        run: |
          mkdir -p app/assets/builds
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb
          chmod +x bin/split_system_tests.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_system_2;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_system_2;"
          bundle exec rake ci:github_actions

      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Run system tests 2
        run: |
          TESTS=$(./bin/split_system_tests.rb 2)
          if [ -n "$TESTS" ]; then
            echo "Running system tests group 2..."
            bundle exec rspec $TESTS --format documentation
          else
            echo "No system tests found for group 2"
          fi

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: system-test-2-screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  # System tests part 3 - E-commerce, payments, and UI features
  test_system_3:
    runs-on: ubuntu-latest
    
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_system_3
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      CI: true
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
          # Install Chrome with modern apt key handling
          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          # Verify Chrome installation
          google-chrome --version

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/

      - name: Build JavaScript Assets
        run: |
          mkdir -p app/assets/builds
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb
          chmod +x bin/split_system_tests.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_system_3;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_system_3;"
          bundle exec rake ci:github_actions

      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Run system tests 3
        run: |
          TESTS=$(./bin/split_system_tests.rb 3)
          if [ -n "$TESTS" ]; then
            echo "Running system tests group 3..."
            bundle exec rspec $TESTS --format documentation
          else
            echo "No system tests found for group 3"
          fi

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: system-test-3-screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  # System tests part 4 - Newly added for group 4
  test_system_4:
    runs-on: ubuntu-latest

    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_system_4
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      CI: true
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: |
          sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev pkg-config curl
          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update && sudo apt-get install -y google-chrome-stable
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true
      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install JS Dependencies
        run: npm install
      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css --no-source-map --load-path=node_modules --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets && cp ./app/assets/builds/active_admin.css ./public/assets/
      - name: Build JavaScript Assets
        run: npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js
      - name: Make scripts executable
        run: chmod +x bin/split_system_tests.rb
      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb
      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_system_4;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_system_4;"
          bundle exec rake ci:github_actions
      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh
      - name: Run system tests 4
        run: |
          TESTS=$(./bin/split_system_tests.rb 4)
          if [ -n "$TESTS" ]; then
            echo "Running system tests group 4..."
            bundle exec rspec $TESTS --format documentation
          else
            echo "No system tests found for group 4"
          fi
      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: system-test-4-screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  # Other tests (helpers, lib, etc.)
  test_other:
    runs-on: ubuntu-latest
    
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_other
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build CSS Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/

      - name: Build JavaScript Assets
        run: |
          mkdir -p app/assets/builds
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_other;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_other;"
          bundle exec rake ci:github_actions

      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Run other tests
        run: |
          # Run tests from directories that exist and have spec files
          SPEC_DIRS=""
          for dir in spec/helpers spec/lib spec/views spec/channels; do
            if [ -d "$dir" ] && find "$dir" -name "*_spec.rb" | grep -q .; then
              SPEC_DIRS="$SPEC_DIRS $dir"
            fi
          done
          
          # Handle JavaScript specs separately since they're .js files
          if [ -d "spec/javascript" ] && find "spec/javascript" -name "*_spec.js" | grep -q .; then
            echo "Found JavaScript specs, but RSpec doesn't run .js files directly"
            echo "JavaScript specs should be run with a JavaScript test runner"
          fi
          
          if [ -n "$SPEC_DIRS" ]; then
            echo "Running other tests from: $SPEC_DIRS"
            bundle exec rspec $SPEC_DIRS --format documentation
          else
            echo "No RSpec files found in other directories - job completed successfully"
          fi

  # Performance test - separate job
  performance_test:
    runs-on: ubuntu-latest
    
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_performance
      DISABLE_PROPSHAFT: true
      RAILS_DISABLE_ASSET_COMPILATION: true
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS Dependencies
        run: npm install

      - name: Build Assets
        run: |
          AA_PATH=$(bundle info activeadmin --path)
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
            --no-source-map \
            --load-path=node_modules \
            --load-path="$AA_PATH/app/assets/stylesheets"
          mkdir -p public/assets
          cp ./app/assets/builds/active_admin.css ./public/assets/
          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js

      - name: Make scripts executable
        run: |
          chmod +x script/performance_test.rb
          chmod +x bin/build-tailwind-standalone.sh
          chmod +x script/test_tailwind_build.rb

      - name: Test Tailwind build
        env:
          RAILS_DISABLE_ASSET_COMPILATION: true
          SKIP_SOLID_QUEUE_SETUP: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
        run: ./script/test_tailwind_build.rb

      - name: Setup database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_performance;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_performance;"
          bundle exec rake ci:github_actions
          
      - name: Build Tailwind CSS
        env:
          SKIP_SOLID_QUEUE_SETUP: true
        run: ./bin/build-tailwind-standalone.sh

      - name: Start Rails server
        run: |
          bundle exec rails server -p 3000 &
          echo $! > tmp/server.pid
          sleep 10

      - name: Run Performance Test
        run: |
          SERVICE_ID=$(bundle exec rails runner "puts Service.find_by(name: 'Performance Test Service')&.id")
          echo "Using service ID: $SERVICE_ID"
          ruby script/performance_test.rb -u "http://consultllc.lvh.me:3000/calendar?service_id=${SERVICE_ID}&commit=View+Availability" -n 200 -c 20

      - name: Stop Rails server
        if: always()
        run: |
          if [ -f tmp/server.pid ]; then
            kill $(cat tmp/server.pid) || true
            rm tmp/server.pid
          fi

  deploy:
    needs: [scan_ruby, scan_js, lint, test_models, test_requests_1, test_requests_2, test_services, test_integration, test_system_1, test_system_2, test_system_3, test_system_4, test_other, performance_test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST https://api.render.com/v1/deploys \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"serviceId": "srv-cvlj0jfgi27c73e3u680"}'