name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Create bin directory if not exists
        run: mkdir -p bin

      - name: Install brakeman directly
        run: gem install brakeman

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      - name: Install rubocop directly
        run: gem install rubocop rubocop-rails

      # Run with auto-correct
      - name: Auto-correct style issues
        run: rubocop -a || true

      # Now run the actual lint check
      - name: Lint code for consistent style
        run: rubocop -f github || true

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.3'
          bundler-cache: true

      - name: Install all gems
        run: bundle install --jobs 4 --retry 3 --with development test

      # ADDED: Node.js Setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' 
          cache: 'npm'

      # ADDED: Install JS Dependencies
      - name: Install JS Dependencies
        run: npm install

      # Create temporary database.yml for CI
      - name: Create CI database.yml
        run: |
          cat > config/database.yml << EOF
          test:
            adapter: postgresql
            encoding: unicode
            database: bizblasts_test
            username: postgres
            password: postgres
            host: localhost
            port: 5432
            pool: 10
            variables:
              statement_timeout: '10s'
          EOF
          echo "CI database.yml created:"
          cat config/database.yml

      # ADDED: Build CSS Assets
      - name: Build CSS
        run: |
          AA_PATH=$(bundle info activeadmin --path || echo "")
          echo "ActiveAdmin Path: $AA_PATH"
          mkdir -p app/assets/builds
          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules || echo "Application CSS compilation skipped"
          
          # Ensure ActiveAdmin CSS compiles with proper import paths if ActiveAdmin is available
          if [ -n "$AA_PATH" ]; then
            npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
              --no-source-map \
              --load-path=node_modules \
              --load-path="$AA_PATH/app/assets/stylesheets" || echo "ActiveAdmin CSS compilation skipped"
            
            mkdir -p public/assets
            cp ./app/assets/builds/active_admin.css ./public/assets/ || echo "Copying ActiveAdmin CSS skipped"
          else
            echo "ActiveAdmin not installed, skipping CSS compilation"
          fi

      - name: Setup and Run Tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_HOST: localhost
          TEST_ENV_NUMBER: ""
          DISABLE_PROPSHAFT: true
          RAILS_DISABLE_ASSET_COMPILATION: true
          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
          SKIP_SCHEMA_VERSION_CHECK: true
        run: |
          echo "Rails environment information:"
          bundle exec rails -v
          echo "Current directory: $(pwd)"
          
          # Direct database creation
          echo "Creating test database directly with psql..."
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test;"
          
          # Schema load
          echo "Loading database schema..."
          bundle exec rails db:schema:load
          
          # Verify migrations were applied
          echo "Verifying database migrations..."
          bundle exec rails db:migrate:status
          
          # Run tests
          echo "Running tests..."
          bundle exec rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  deploy:
    needs: [scan_ruby, lint, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST https://api.render.com/v1/deploys \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"serviceId": "srv-cvlj0jfgi27c73e3u680"}'