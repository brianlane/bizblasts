# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

# For fast tests
require 'active_record'

# Initialize cache in module to avoid toplevel class variable issues
module TestCache
  @setup_cache = {}
  
  def self.setup_cache
    @setup_cache
  end
  
  def self.clear_cache
    @setup_cache = {}
  end
end

RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  # Enable faster focused tests
  config.filter_run_when_matching :focus
  
  # Limit default spec verbosity
  config.default_formatter = ENV['CI'] ? 'doc' : 'progress'
  
  # Store spec status to allow running failed tests more easily
  config.example_status_persistence_file_path = "tmp/spec_examples.txt"
  
  # Enable faster database transactions
  config.around(:each) do |example|
    # Use transactions for faster database cleanup
    if example.metadata[:type] == :feature || example.metadata[:js] == true
      example.run
    else
      # Use transactions for faster rollback
      ActiveRecord::Base.transaction do
        example.run
        raise ActiveRecord::Rollback
      end
    end
  end
  
  # Print the slowest examples at the end of the test run
  config.profile_examples = ENV['PROFILE_SPECS'] ? ENV['PROFILE_SPECS'].to_i : 0
  
  # Run specs in random order to surface order dependencies
  config.order = :random
  
  # Seed global randomization in this process using the `--seed` CLI option
  Kernel.srand config.seed
  
  # Disable logging during tests
  ActiveRecord::Base.logger = nil
  
  # Cache expensive test setup
  config.after(:suite) do
    TestCache.clear_cache
  end
end

# Speed up backtrace exclusions
module RSpec::Core
  class BacktraceFormatter
    DEFAULT_EXCLUSION_PATTERNS = [
      /\/lib\/ruby\//,
      /bin\//,
      /gems/,
      /spec\/spec_helper\.rb/,
      /lib\/rspec\/(core|expectations|matchers|mocks)/
    ]
  end
end
