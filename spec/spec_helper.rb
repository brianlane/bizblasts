# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

# For fast tests
require 'active_record'

# Initialize cache in module to avoid toplevel class variable issues
module TestCache
  @setup_cache = {}
  
  def self.setup_cache
    @setup_cache
  end
  
  def self.clear_cache
    @setup_cache = {}
  end
end

RSpec.configure do |config|
  # Performance optimizations
  config.before(:suite) do
    # Preload Rails framework to improve startup time
    Rails.application.eager_load!
  end

  config.before(:each, type: :model) do
    # Use transactions for model specs for faster rollback
    ActiveRecord::Base.establish_connection
    ActiveRecord::Base.connection.begin_transaction(joinable: false)
  end

  config.after(:each, type: :model) do
    ActiveRecord::Base.connection.rollback_transaction
  end
  
  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  config.filter_run :focus
  config.run_all_when_everything_filtered = true

  # Run specs in random order to surface order dependencies
  config.order = :random
  Kernel.srand config.seed

  # rspec-expectations config
  config.expect_with :rspec do |expectations|
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config
  config.mock_with :rspec do |mocks|
    mocks.verify_partial_doubles = true
  end

  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata.
  config.filter_run_when_matching :focus

  # Limits the available syntax to the non-monkey patched syntax
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    config.default_formatter = 'doc'
  end

  # Store spec status to allow running failed tests more easily
  config.example_status_persistence_file_path = "tmp/spec_examples.txt"
  
  # Print the slowest examples at the end of the test run
  config.profile_examples = ENV['PROFILE_SPECS'] ? ENV['PROFILE_SPECS'].to_i : 0
  
  # Disable logging during tests
  ActiveRecord::Base.logger = nil
  
  # Cache expensive test setup
  config.after(:suite) do
    TestCache.clear_cache
  end
end

# Speed up backtrace exclusions
module RSpec::Core
  class BacktraceFormatter
    DEFAULT_EXCLUSION_PATTERNS = [
      /\/lib\/ruby\//,
      /bin\//,
      /gems/,
      /spec\/spec_helper\.rb/,
      /lib\/rspec\/(core|expectations|matchers|mocks)/
    ]
  end
end
