class ReferralService
  class << self
    # Generates a referral record for a given user and business.
    # The user who generates the code is the "referrer".
    def generate_referral_code(user, business)
      return nil unless user.client? && business.referral_program_active?
      
      # A user has one referral record per business, which holds their code.
      existing_referral = Referral.find_by(referrer: user, business: business)
      return existing_referral.referral_code if existing_referral
      
      # Create a new referral record. The code is generated by a callback on the model.
      referral = Referral.create!(
        business: business,
        referrer: user,
        status: 'pending'
      )
      
      referral.referral_code
    end
    
    # Processes a referral during a checkout transaction.
    # This is the new core method for handling referral qualifications.
    def process_referral_checkout(referral, qualifying_record, customer)
      return { success: false, error: 'Referral is not pending' } unless referral.pending?

      business = referral.business
      referral_program = business.referral_program
      return { success: false, error: 'Referral program is not active' } unless referral_program&.active?
      
      # Check if minimum purchase requirement is met
      amount = qualifying_record.respond_to?(:total_amount) ? qualifying_record.total_amount : qualifying_record.amount
      if referral_program.minimum_purchase_required? && amount < referral_program.min_purchase_amount
        return { success: false, error: "Purchase minimum of #{referral_program.min_purchase_amount} not met" }
      end
      
      # Mark referral as qualified and associate with the customer
      referral.mark_qualified!(qualifying_record, customer)
      
      # Award the reward to the original referrer
      award_referrer_reward(referral)
      
      { success: true, referral: referral }
    end
    
    def validate_referral_code(code, business, customer = nil)
      return { valid: false, error: 'Code required' } unless code.present?
      
      referral = business.referrals.find_by(referral_code: code)
      return { valid: false, error: 'Invalid referral code' } unless referral
      
      return { valid: false, error: 'Referral program not active' } unless business.referral_program_active?
      
      return { valid: false, error: 'This referral code has already been used' } unless referral.pending?
      
      { valid: true, type: 'referral', referral: referral }
    end
    
    private
    
    # Awards the specified reward to the user who made the referral.
    def award_referrer_reward(referral)
      business = referral.business
      referral_program = business.referral_program
      referrer_user = referral.referrer
      
      # The referrer must also be a customer of the business to receive points.
      referrer_customer = find_or_create_tenant_customer(referrer_user, business)
      
      # Referrers always get loyalty points (simplified from the previous system)
      LoyaltyPointsService.award_points(
        customer: referrer_customer,
        points: referral_program.referrer_reward_value.to_i,
        description: "Referral reward for new customer: #{referral.referred_tenant_customer.name}",
        related_record: referral
      )
      
      referral.mark_rewarded!
    end
    
    # Finds or creates a TenantCustomer record for a given User.
    # This ensures a user can receive rewards even if they haven't made a purchase.
    def find_or_create_tenant_customer(user, business)
      TenantCustomer.find_or_create_by!(
        email: user.email,
        business: business
      ) do |customer|
        customer.name = user.full_name
        customer.phone = user.phone
        customer.skip_notification_email = true # Don't send a "new customer" email
      end
    end
  end
end 