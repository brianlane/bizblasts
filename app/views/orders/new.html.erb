<div class="container mx-auto px-4 py-8 max-w-4xl">
  <div class="bg-white rounded-lg shadow-lg p-6">
    <%# Error messages if any %>
    <% if @order.errors.any? %>
      <div class="mb-6 bg-error bg-opacity-10 border border-error rounded-lg p-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-error" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-error">Please correct the following errors:</h3>
            <ul class="mt-2 text-sm text-error list-disc list-inside">
              <% @order.errors.full_messages.each do |msg| %>
                <li><%= msg %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    <% end %>

    <h1 class="text-3xl font-bold text-dark mb-6 flex items-center">
      <svg class="w-6 h-6 mr-3 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
      </svg>
      Checkout
    </h1>
    
    <%= form_with model: @order, local: true, class: "space-y-8", data: { turbo: false } do |f| %>
      <%# Customer selection for business users (staff/manager) %>
      <% if current_user&.staff? || current_user&.manager? %>
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4 text-blue-900 flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            Select Customer
          </h2>
          <p class="text-blue-800 text-sm mb-4">As a business user, you must select a customer to place this order on their behalf.</p>
          
          <!-- Customer Dropdown -->
          <div class="mb-4" data-controller="customer-dropdown">
            <label class="block text-gray-700 text-sm font-bold mb-2">Select Customer</label>
            <div class="relative">
              <button type="button" 
                      data-customer-dropdown-target="button"
                      class="relative w-full cursor-pointer rounded-md border border-gray-300 bg-white py-2 pl-3 pr-10 text-left shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 sm:text-sm">
                <span data-customer-dropdown-target="selected" class="block truncate text-gray-500">
                  Select a customer or create new...
                </span>
                <span class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                  <svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </span>
              </button>

              <!-- Dropdown Options -->
              <div data-customer-dropdown-target="options" class="hidden absolute z-10 mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                <!-- Default option -->
                <div class="customer-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                     data-customer-id=""
                     data-customer-name="Select a customer or create new..."
                     data-customer-dropdown-target="option">
                  <div class="flex items-center justify-between">
                    <div class="flex-1">
                      <div class="font-medium text-gray-500">Select a customer or create new...</div>
                    </div>
                  </div>
                  <% if @order.tenant_customer_id.blank? %>
                    <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                      </svg>
                    </span>
                  <% end %>
                </div>
                
                <% @order.business.tenant_customers.each do |customer| %>
                  <div class="customer-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                       data-customer-id="<%= customer.id %>"
                       data-customer-name="<%= customer.email.present? ? "#{customer.full_name} (#{customer.email})" : customer.full_name %>"
                       data-customer-dropdown-target="option">
                    <div class="flex items-center justify-between">
                      <div class="flex-1">
                        <div class="font-medium text-gray-900"><%= customer.full_name %></div>
                        <% if customer.email.present? %>
                          <div class="text-sm text-gray-500 mt-1"><%= customer.email %></div>
                        <% end %>
                        <% if customer.phone.present? %>
                          <div class="text-xs text-gray-400 mt-1"><%= customer.phone %></div>
                        <% end %>
                      </div>
                    </div>
                    <% if @order.tenant_customer_id == customer.id %>
                      <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                        </svg>
                      </span>
                    <% end %>
                  </div>
                <% end %>
                
                <div class="customer-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors border-t border-gray-200"
                     data-customer-id="new"
                     data-customer-name="Create new customer"
                     data-customer-dropdown-target="option">
                  <div class="flex items-center justify-between">
                    <div class="flex-1">
                      <div class="font-medium text-blue-600">+ Create new customer</div>
                    </div>
                  </div>
                  <% if @order.tenant_customer_id == "new" %>
                    <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                      </svg>
                    </span>
                  <% end %>
                </div>
              </div>
            </div>
            
            <!-- Hidden field to store the selected customer ID -->
            <%= f.hidden_field :tenant_customer_id, id: "tenant_customer_id" %>
          </div>

          <!-- New customer fields (hidden by default) -->
          <div id="new-tenant-customer-fields" class="hidden mb-4">
            <h3 class="text-lg font-bold mb-2">New Customer Details</h3>
            <%= f.fields_for :tenant_customer_attributes, @order.tenant_customer do |cust_fields| %>
              <div class="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <%= cust_fields.label :first_name, "First Name", class: "block text-gray-700 text-sm font-bold mb-2" %>
                  <%= cust_fields.text_field :first_name, required: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
                </div>
                <div>
                  <%= cust_fields.label :last_name, "Last Name", class: "block text-gray-700 text-sm font-bold mb-2" %>
                  <%= cust_fields.text_field :last_name, required: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
                </div>
              </div>
              <div class="mb-4">
                <%= cust_fields.label :email, class: "block text-gray-700 text-sm font-bold mb-2" %>
                <%= cust_fields.email_field :email, required: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
              </div>
              <div class="mb-4">
                <%= cust_fields.label :phone, class: "block text-gray-700 text-sm font-bold mb-2" %>
                <%= cust_fields.telephone_field :phone, required: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
              </div>
            <% end %>
          </div>
        </div>
      <% end %>
      
      <%# Render guest info for unauthenticated users %>
      <% if current_user.nil? %>
        <%= render 'shared/guest_customer_fields', f: f %>
      <% end %>
      
      <% shipping_methods = ShippingMethod.where(active: true, business_id: @order.business_id) %>
      <% if shipping_methods.any? %>
        <div class="bg-light rounded-lg p-6">
          <h2 class="text-xl font-semibold text-dark mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
            </svg>
            Shipping Method
          </h2>
          <%= f.label :shipping_method_id, 'Select shipping method', class: 'block text-sm font-medium text-gray-700 mb-2' %>
          <%= f.collection_select :shipping_method_id, shipping_methods, :id, :name, 
              { prompt: 'Select shipping method' }, 
              { class: 'block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-primary focus:border-primary' } %>
        </div>
      <% end %>
      
      <%# Hidden fields for automatic assignment %>
      <%= f.hidden_field :tax_rate_id %>
      
      <div class="bg-light rounded-lg p-6">
        <h2 class="text-xl font-semibold text-dark mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
          </svg>
          Order Notes (Optional)
        </h2>
        <%= f.label :notes, 'Add any special instructions for this order', class: 'block text-sm font-medium text-gray-700 mb-2' %>
        <%= f.text_area :notes, 
            placeholder: 'Add any special instructions for this order', 
            rows: 3,
            class: 'block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-primary focus:border-primary' %>
      </div>
      
      <div class="bg-white border border-gray-200 rounded-lg p-6">
        <h2 class="text-xl font-semibold text-dark mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          Order Summary
        </h2>
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Variant</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <% @order.line_items.each do |item| %>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-dark"><%= item.product_variant.product.name %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-700"><%= item.product_variant.name %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-700"><%= item.quantity %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-dark"><%= number_to_currency(item.price) %></div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-bold text-primary" data-line-item-total="<%= item.total_amount %>"><%= number_to_currency(item.total_amount) %></div>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
      </div>
      
      <%# Promo Code Section %>
      <div class="bg-blue-50 border border-blue-200 rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4 text-blue-900 flex items-center">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
          </svg>
          Have a Promo Code?
        </h2>
        <div class="flex flex-col sm:flex-row gap-3">
          <%= f.text_field :promo_code, 
                          placeholder: "Enter promo code", 
                          class: "flex-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
                          id: "order_promo_code_field" %>
          <button type="button"
                  id="apply_order_promo_code"
                  class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors cursor-pointer">
            Apply Code
          </button>
        </div>
        <div id="order_promo_code_result" class="mt-3 hidden">
          <!-- Promo code validation result will appear here -->
        </div>
      </div>
      
      <!-- Tip Collection Section -->
      <% if @order.has_tip_eligible_items? %>
        <%= render 'shared/tip_collection', order: @order, base_amount: @order.subtotal_amount, context: 'checkout' %>
      <% end %>

      <!-- Order Summary -->
      <div class="bg-gray-50 p-4 rounded-lg mt-6">
        <h3 class="text-lg font-semibold mb-4">Order Summary</h3>
        
        <div class="space-y-2 order-summary">
          <div class="flex justify-between">
            <span>Subtotal:</span>
            <span class="order-subtotal"><%= number_to_currency(@order.subtotal_amount) %></span>
          </div>
          
          <% if @order.shipping_amount&.positive? %>
            <div class="flex justify-between">
              <span>Shipping:</span>
              <span><%= number_to_currency(@order.shipping_amount) %></span>
            </div>
          <% end %>
          
          <% if @order.tax_amount&.positive? %>
            <div class="flex justify-between">
              <span>Tax:</span>
              <span><%= number_to_currency(@order.tax_amount) %></span>
            </div>
          <% end %>
          
          <div class="flex justify-between tip-amount-display" style="display: none;">
            <span>Tip:</span>
            <span class="tip-amount-value">$0.00</span>
          </div>
          
          <hr class="my-2">
          
          <div class="flex justify-between text-lg font-bold">
            <span>Total:</span>
            <span class="order-total" data-order-total="<%= @order.total_amount %>"><%= number_to_currency(@order.total_amount) %></span>
          </div>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="flex space-x-4 mt-6">
        <%= f.submit "Complete Order", class: "flex-1 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-200 cursor-pointer" %>
        <%= link_to "Back to Cart", cart_path, class: "flex-1 bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-3 px-6 rounded-lg text-center transition duration-200" %>
      </div>
    <% end %>
  </div>
</div>

<script>
function initializeOrderPromoAndTipHandling() {
  const orderTotal = document.querySelector('.order-total');
  const tipAmountDisplay = document.querySelector('.tip-amount-display');
  const tipAmountValue = document.querySelector('.tip-amount-value');
  const baseAmount = <%= @order.subtotal_amount.to_f %>;
  
  // Promo code functionality
  const applyButton = document.getElementById('apply_order_promo_code');
  const promoField = document.getElementById('order_promo_code_field');
  const resultDiv = document.getElementById('order_promo_code_result');
  
  if (applyButton && promoField && resultDiv) {
    applyButton.addEventListener('click', function() {
      const code = promoField.value.trim();
      if (!code) {
        showError('Please enter a promo code');
        return;
      }
      
      showLoading();
      
      // Get CSRF token
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
      
      // Make AJAX request
      fetch('/orders/validate_promo_code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-CSRF-Token': csrfToken
        },
        body: new URLSearchParams({
          promo_code: code,
          order_total: <%= @order.total_amount %>,
          order_subtotal: <%= @order.subtotal_amount %>
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.valid) {
          showSuccess(data.message);
          updateOrderSummary(data.discount_amount, data.formatted_discount);
        } else {
          showError(data.error);
        }
      })
      .catch(error => {
        showError('Error validating promo code. Please try again.');
      });
    });
    
    // Also allow Enter key
    promoField.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        applyButton.click();
      }
    });
  }
  
  function showLoading() {
    resultDiv.className = 'mt-3 p-3 bg-blue-50 border border-blue-200 rounded-md';
    resultDiv.innerHTML = `
      <div class="flex items-center">
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span class="text-blue-700">Validating promo code...</span>
      </div>
    `;
    resultDiv.classList.remove('hidden');
  }
  
  function showSuccess(message) {
    resultDiv.className = 'mt-3 p-3 bg-green-50 border border-green-200 rounded-md';
    resultDiv.innerHTML = `
      <div class="flex items-center">
        <svg class="h-5 w-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span class="text-green-700">${message}</span>
      </div>
    `;
    resultDiv.classList.remove('hidden');
  }
  
  function showError(message) {
    resultDiv.className = 'mt-3 p-3 bg-red-50 border border-red-200 rounded-md';
    resultDiv.innerHTML = `
      <div class="flex items-center">
        <svg class="h-5 w-5 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
        <span class="text-red-700">${message}</span>
      </div>
    `;
    resultDiv.classList.remove('hidden');
  }
  
  function updateOrderSummary(discountAmount, formattedDiscount) {
    // Add discount row to order summary if it doesn't exist
    let discountRow = document.getElementById('promo-discount-row');
    const orderSummary = document.querySelector('.bg-gray-50.p-4.rounded-lg');
    
    if (!discountRow && orderSummary) {
      discountRow = document.createElement('div');
      discountRow.id = 'promo-discount-row';
      discountRow.className = 'flex justify-between text-green-600';
      discountRow.innerHTML = `
        <span>Promo Code Discount:</span>
        <span id="promo-discount-amount">-${formattedDiscount}</span>
      `;
      
      // Insert before the hr and total line
      const hrElement = orderSummary.querySelector('hr');
      if (hrElement) {
        orderSummary.insertBefore(discountRow, hrElement);
      }
    } else if (discountRow) {
      // Update existing discount row
      const discountAmountElement = document.getElementById('promo-discount-amount');
      if (discountAmountElement) {
        discountAmountElement.textContent = `-${formattedDiscount}`;
      }
    }
    
    // Calculate proper total with discount applied to subtotal and tax recalculated
    const originalSubtotal = <%= @order.subtotal_amount.to_f %>;
    const originalTax = <%= @order.tax_amount.to_f %>;
    const originalShipping = <%= @order.shipping_amount.to_f %>;
    const discountValue = parseFloat(discountAmount);
    
    // Apply discount to subtotal
    const discountedSubtotal = Math.max(0, originalSubtotal - discountValue);
    
    // Recalculate tax on discounted subtotal (assuming same tax rate)
    const taxRate = originalSubtotal > 0 ? (originalTax / originalSubtotal) : 0;
    const newTax = discountedSubtotal * taxRate;
    
    // Calculate new total
    const newTotal = discountedSubtotal + newTax + originalShipping;
    
    // Update the total element
    const totalElement = document.querySelector('.order-total');
    if (totalElement) {
      const formattedTotal = '$' + newTotal.toFixed(2);
      totalElement.textContent = formattedTotal;
    }
  }
  
  // Listen for tip amount changes from the tip collection component
  document.addEventListener('tipAmountChanged', function(event) {
    const tipAmount = event.detail.amount;
    
    if (tipAmount > 0) {
      tipAmountDisplay.style.display = 'flex';
      tipAmountValue.textContent = '$' + tipAmount.toFixed(2);
      
      // Update total to include tip
      const currentTotal = parseFloat(orderTotal.textContent.replace('$', '')) || <%= @order.total_amount.to_f %>;
      const newTotal = currentTotal + tipAmount;
      orderTotal.textContent = '$' + newTotal.toFixed(2);
    } else {
      tipAmountDisplay.style.display = 'none';
      // Reset to base total (might have discount applied)
      const discountRow = document.getElementById('promo-discount-row');
      if (discountRow) {
        // If there's a discount, recalculate without tip
        const discountAmountText = document.getElementById('promo-discount-amount')?.textContent || '-$0.00';
        const discountAmount = parseFloat(discountAmountText.replace(/[-$]/g, '')) || 0;
        
        const originalSubtotal = <%= @order.subtotal_amount.to_f %>;
        const originalTax = <%= @order.tax_amount.to_f %>;
        const originalShipping = <%= @order.shipping_amount.to_f %>;
        
        const discountedSubtotal = Math.max(0, originalSubtotal - discountAmount);
        const taxRate = originalSubtotal > 0 ? (originalTax / originalSubtotal) : 0;
        const newTax = discountedSubtotal * taxRate;
        const totalWithoutTip = discountedSubtotal + newTax + originalShipping;
        
        orderTotal.textContent = '$' + totalWithoutTip.toFixed(2);
      } else {
        // No discount, use original total
        orderTotal.textContent = '$' + <%= @order.total_amount.to_f %>.toFixed(2);
      }
    }
  });

  // Initialize customer form validation
  if (window.CustomerFormValidation) {
    const validator = CustomerFormValidation.initializeForm({
      formSelector: 'form[action*="/orders"]',
      fieldPrefix: 'order[tenant_customer_attributes]',
      realTimeValidation: true,
      showSuccessState: true
    });
    
    if (validator) {
      CustomerFormValidation.setupConditionalValidation(validator, '#new-tenant-customer-fields');
    }
  }
}

// Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
document.addEventListener('DOMContentLoaded', initializeOrderPromoAndTipHandling);
document.addEventListener('turbo:load', initializeOrderPromoAndTipHandling);
</script>

<script>
// Customer dropdown functionality for business users (enhanced version from booking)
function initializeOrderCustomerDropdown() {
  const customerDropdownButton = document.querySelector('[data-customer-dropdown-target="button"]');
  const customerDropdownMenu = document.querySelector('[data-customer-dropdown-target="options"]');
  const customerDropdownOptions = document.querySelectorAll('[data-customer-dropdown-target="option"]');
  const customerDropdownText = document.querySelector('[data-customer-dropdown-target="selected"]');
  const customerDropdownArrow = customerDropdownButton?.querySelector('svg');
  const customerHiddenField = document.getElementById('tenant_customer_id');
  
  // Only proceed if customer dropdown elements exist (staff/manager users only)
  if (!customerDropdownButton || !customerDropdownMenu) {
    return;
  }
  
  let selectedCustomerId = '<%= params[:tenant_customer_id] || "" %>';
  let customerDropdownButtonTouched = false;
    
  // Initialize customer fields display based on current selection
  function initializeCustomerFields() {
    const newCustomerFields = document.getElementById('new-tenant-customer-fields');
    if (newCustomerFields) {
      if (selectedCustomerId === 'new') {
        newCustomerFields.classList.remove('hidden');
      } else {
        newCustomerFields.classList.add('hidden');
      }
    }
  }
  
  // Call initialization
  initializeCustomerFields();
  
  // Shared function to toggle customer dropdown
  function toggleCustomerDropdown(e) {
    e.preventDefault();
    e.stopPropagation();
    
    // Check current state by examining classes and inline styles
    const isHidden = customerDropdownMenu.classList.contains('hidden') || 
                    customerDropdownMenu.style.display === 'none' || 
                    customerDropdownMenu.style.display === '';
    
    if (isHidden) {
      // Show dropdown
      customerDropdownMenu.classList.remove('hidden');
      customerDropdownArrow?.classList.add('rotate-180');
      
      // Mobile-specific positioning adjustments
      if (window.innerWidth <= 640) {
        customerDropdownMenu.style.position = 'absolute';
        customerDropdownMenu.style.top = '100%';
        customerDropdownMenu.style.left = '0';
        customerDropdownMenu.style.right = '0';
        customerDropdownMenu.style.zIndex = '50';
        customerDropdownMenu.style.marginTop = '0.25rem';
      }
    } else {
      // Hide dropdown
      customerDropdownMenu.classList.add('hidden');
      customerDropdownArrow?.classList.remove('rotate-180');
      
      // Clear mobile-specific inline styles
      if (window.innerWidth <= 640) {
        customerDropdownMenu.style.display = '';
        customerDropdownMenu.style.position = '';
        customerDropdownMenu.style.top = '';
        customerDropdownMenu.style.left = '';
        customerDropdownMenu.style.right = '';
        customerDropdownMenu.style.zIndex = '';
        customerDropdownMenu.style.marginTop = '';
      }
    }
  }
  
  // Toggle customer dropdown on click
  customerDropdownButton?.addEventListener('click', function(e) {
    customerDropdownButtonTouched = true;
    toggleCustomerDropdown(e);
    setTimeout(() => { customerDropdownButtonTouched = false; }, 100);
  });
  
  // Toggle customer dropdown on touch (for mobile)
  customerDropdownButton?.addEventListener('touchend', function(e) {
    customerDropdownButtonTouched = true;
    toggleCustomerDropdown(e);
    setTimeout(() => { customerDropdownButtonTouched = false; }, 100);
  });
  
  // Shared function for customer option selection
  function selectCustomerOption(element, e) {
    e.preventDefault();
    e.stopPropagation();
    
    const customerId = element.dataset.customerId;
    const customerName = element.dataset.customerName;
    
    // Update button text
    customerDropdownText.textContent = customerName;
    selectedCustomerId = customerId;
    
    // Update hidden field
    customerHiddenField.value = customerId;
    
    // Update selected state
    customerDropdownOptions.forEach(opt => {
      const checkIcon = opt.querySelector('svg');
      if (checkIcon) checkIcon.remove();
    });
    
    // Add check icon to selected option
    const checkIcon = document.createElement('span');
    checkIcon.className = 'absolute inset-y-0 right-2 flex items-center text-blue-600';
    checkIcon.innerHTML = `
      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
      </svg>
    `;
    element.appendChild(checkIcon);
    
    // Close dropdown properly
    customerDropdownMenu.classList.add('hidden');
    customerDropdownArrow?.classList.remove('rotate-180');
    
    // Clear mobile-specific inline styles (critical for mobile)
    if (window.innerWidth <= 640) {
      customerDropdownMenu.style.display = '';
      customerDropdownMenu.style.position = '';
      customerDropdownMenu.style.top = '';
      customerDropdownMenu.style.left = '';
      customerDropdownMenu.style.right = '';
      customerDropdownMenu.style.zIndex = '';
      customerDropdownMenu.style.marginTop = '';
    }
    
    // Handle new customer fields toggle
    const newCustomerFields = document.getElementById('new-tenant-customer-fields');
    if (newCustomerFields) {
      if (customerId === 'new') {
        // Show new customer fields - use aggressive approach
        newCustomerFields.className = 'mb-4'; // Remove hidden, keep only mb-4
        newCustomerFields.style.display = 'block';
        newCustomerFields.style.visibility = 'visible';
        newCustomerFields.style.opacity = '1';
        
        // Make new customer fields required - using more specific selectors
        const nameField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="first_name"]');
        const emailField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="email"]');
        const phoneField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="phone"]');
        
        if (nameField) nameField.required = true;
        if (emailField) emailField.required = true;
        if (phoneField) phoneField.required = true;
        
      } else {
        // Hide new customer fields
        newCustomerFields.className = 'hidden mb-4'; // Ensure hidden class is applied
        newCustomerFields.style.display = 'none';
        newCustomerFields.style.visibility = 'hidden';
        newCustomerFields.style.opacity = '0';
        
        // Remove required attributes - using more specific selectors
        const nameField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="first_name"]');
        const emailField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="email"]');
        const phoneField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="phone"]');
        
        if (nameField) nameField.required = false;
        if (emailField) emailField.required = false;
        if (phoneField) phoneField.required = false;
        
        // Clear the fields
        if (nameField) nameField.value = '';
        if (emailField) emailField.value = '';
        if (phoneField) phoneField.value = '';
      }
    }
  }
  
  // Handle customer option selection
  customerDropdownOptions.forEach(option => {
    option.addEventListener('click', function(e) {
      selectCustomerOption(this, e);
    });
    
    // Handle touch for mobile options
    option.addEventListener('touchend', function(e) {
      selectCustomerOption(this, e);
    });
  });
  
  // Close customer dropdown when clicking outside
  document.addEventListener('click', function(event) {
    if (!event.target.closest('[data-controller="customer-dropdown"]')) {
      if (!customerDropdownMenu?.classList.contains('hidden')) {
        customerDropdownMenu?.classList.add('hidden');
        customerDropdownArrow?.classList.remove('rotate-180');
        
        // Clear mobile styles if needed
        if (window.innerWidth <= 640) {
          customerDropdownMenu.style.display = '';
          customerDropdownMenu.style.position = '';
          customerDropdownMenu.style.top = '';
          customerDropdownMenu.style.left = '';
          customerDropdownMenu.style.right = '';
          customerDropdownMenu.style.zIndex = '';
          customerDropdownMenu.style.marginTop = '';
        }
      }
    }
  });
  
  // Handle touch outside for mobile
  document.addEventListener('touchend', function(event) {
    // Don't close if button was just touched
    if (customerDropdownButtonTouched) {
      return;
    }
    
    if (!event.target.closest('[data-controller="customer-dropdown"]')) {
      const isOpen = !customerDropdownMenu?.classList.contains('hidden') && 
                    customerDropdownMenu?.style.display !== 'none' && 
                    customerDropdownMenu?.style.display !== '';
      if (isOpen) {
        customerDropdownMenu?.classList.add('hidden');
        customerDropdownArrow?.classList.remove('rotate-180');
        
        // Clear mobile styles if needed
        if (window.innerWidth <= 640) {
          customerDropdownMenu.style.display = '';
          customerDropdownMenu.style.position = '';
          customerDropdownMenu.style.top = '';
          customerDropdownMenu.style.left = '';
          customerDropdownMenu.style.right = '';
          customerDropdownMenu.style.zIndex = '';
          customerDropdownMenu.style.marginTop = '';
        }
      }
    }
  });
  
  // Handle escape key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      if (!customerDropdownMenu?.classList.contains('hidden')) {
        customerDropdownMenu?.classList.add('hidden');
        customerDropdownArrow?.classList.remove('rotate-180');
        
        // Clear mobile styles if needed
        if (window.innerWidth <= 640) {
          customerDropdownMenu.style.display = '';
          customerDropdownMenu.style.position = '';
          customerDropdownMenu.style.top = '';
          customerDropdownMenu.style.left = '';
          customerDropdownMenu.style.right = '';
          customerDropdownMenu.style.zIndex = '';
          customerDropdownMenu.style.marginTop = '';
        }
      }
    }
  });
}

// Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
document.addEventListener('DOMContentLoaded', initializeOrderCustomerDropdown);
document.addEventListener('turbo:load', initializeOrderCustomerDropdown);
</script> 