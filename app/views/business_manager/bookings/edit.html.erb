<%# app/views/business_manager/bookings/edit.html.erb %>
<div class="container mx-auto px-4 py-8">
  <% if flash[:notice] %>
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
      <span class="block sm:inline"><%= flash[:notice] %></span>
    </div>
  <% end %>
  
  <% if flash[:alert] %>
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
      <span class="block sm:inline"><%= flash[:alert] %></span>
    </div>
  <% end %>

  <div class="bg-white shadow overflow-hidden sm:rounded-lg">
    <div class="px-4 py-5 sm:px-6 flex justify-between items-center">
      <h1 class="text-xl font-bold">Edit Booking #<%= @booking.id %></h1>
      <div class="flex space-x-4">
        <%= link_to business_manager_booking_path(@booking), class: "text-blue-600 hover:text-blue-800" do %>
          ‚Üê Back to Booking
        <% end %>
      </div>
    </div>
    
    <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
      <%= form_with model: @booking, url: business_manager_booking_path(@booking), method: :patch, local: true do |f| %>
        <% if @booking.errors.any? %>
          <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400 booking-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 001.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">
                  The following errors prevented this booking from being saved:
                </h3>
                <div class="mt-2 text-sm text-red-700">
                  <ul class="list-disc pl-5 space-y-1">
                    <% @booking.errors.full_messages.each do |message| %>
                      <li><%= message %></li>
                    <% end %>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        <% end %>
        
        <%= render 'shared/booking_details', booking: @booking, show_actions: false, admin_mode: true %>
        
        <%# Add quantity input field - Conditional based on service type %>
        <% if @booking.service.experience? %>
          <div class="mb-4">
            <%= f.label :quantity, "Number of Attendees", class: "block text-sm font-medium text-gray-700 mb-2" %>
            <%# Ensure we can book up to max_bookings OR the current quantity if already higher (e.g., due to manual override) %>
            <% max_allowed_quantity = [@booking.service.max_bookings.to_i, @booking.quantity.to_i].max %>
            <%# Also consider remaining spots for new bookings/increases %>
            <% remaining_spots = @booking.service.spots.to_i + @booking.quantity.to_i %>
            <%= f.number_field :quantity, min: 1, max: remaining_spots, class: "shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md", id: 'booking_quantity' %>
            <p class="mt-2 text-sm text-gray-500">
              Min: <%= @booking.service.min_bookings %>, Max: <%= @booking.service.max_bookings %>, Current Spots Remaining: <%= @booking.service.spots %>
            </p>
          </div>
        <% else %>
           <%# For standard services, quantity is always 1, submit as hidden field %>
           <%= f.hidden_field :quantity, value: 1, id: 'booking_quantity' %>
        <% end %>
        
        <!-- Notes Field - Editable -->
        <div class="mb-6">
          <%= f.label :notes, "Booking Notes", class: "block text-sm font-medium text-gray-700 mb-2" %>
          <%= f.text_area :notes, rows: 5, class: "shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm border-gray-300 rounded-md", placeholder: "Enter notes about this booking..." %>
          <p class="mt-2 text-sm text-gray-500">
            These notes are internal and will not be visible to the customer.
          </p>
        </div>
        
        <!-- Product Add-ons Section -->
        <div class="mb-6">
          <h2 class="text-lg font-medium text-gray-900 mb-4">Product Add-ons</h2>
          <p class="text-sm text-gray-600 mb-3">
            Only service and mixed type products can be added to bookings. Standard product types are not shown.
          </p>
          
          <% if @available_products.present? && @available_products.any? %>
            <div id="product-add-ons" class="space-y-4">
              <!-- Existing add-ons -->
              <% if @booking.booking_product_add_ons.any? %>
                <h3 class="text-md font-medium text-gray-700 mb-2">Current Products</h3>
                <div class="space-y-3">
                  <%= f.fields_for :booking_product_add_ons do |addon_form| %>
                    <% variant = addon_form.object.product_variant %>
                    <div class="bg-gray-50 p-4 rounded-md border border-gray-200">
                      <div class="flex justify-between">
                        <div>
                          <p class="font-medium"><%= variant.product.name %> - <%= variant.name %></p>
                          <p class="text-sm text-gray-500">Price: <%= number_to_currency(variant.final_price) %></p>
                        </div>
                        <div class="flex items-center space-x-4">
                          <%= addon_form.hidden_field :product_variant_id %>
                          <%= addon_form.hidden_field :id %>
                          
                          <div class="flex items-center">
                            <%= addon_form.label :quantity, "Quantity:", class: "mr-2 text-sm text-gray-700" %>
                            <% current_item_stock = variant.stock_quantity + addon_form.object.quantity.to_i %>
                            <%= addon_form.number_field :quantity, 
                                  min: 0, 
                                  max: current_item_stock, 
                                  class: "shadow-sm focus:ring-blue-500 focus:border-blue-500 w-16 sm:text-sm border-gray-300 rounded-md" %>
                            <span class="text-xs text-gray-500 ml-2">(Available: <%= current_item_stock %>)</span>
                          </div>
                          
                          <div class="flex items-center">
                            <%= addon_form.check_box :_destroy, class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" %>
                            <%= addon_form.label :_destroy, "Remove", class: "ml-2 text-sm text-gray-700" %>
                          </div>
                        </div>
                      </div>
                    </div>
                  <% end %>
                </div>
              <% end %>
              
              <!-- Add new products -->
              <h3 class="text-md font-medium text-gray-700 mt-4 mb-2">Add New Products</h3>
              <div class="space-y-3">
                <% @available_products.flat_map(&:product_variants).each do |variant| %>
                  <% unless @booking.booking_product_add_ons.any? { |addon| addon.product_variant_id == variant.id } %>
                    <%= f.fields_for :booking_product_add_ons, @booking.booking_product_add_ons.build(product_variant: variant, quantity: 0), child_index: "new_#{variant.id}" do |new_addon_form| %>
                      <div class="bg-gray-50 p-4 rounded-md border border-gray-200">
                        <div class="flex justify-between">
                          <div>
                            <p class="font-medium"><%= variant.product.name %> - <%= variant.name %></p>
                            <p class="text-sm text-gray-500">Price: <%= number_to_currency(variant.final_price) %></p>
                          </div>
                          <div class="flex items-center">
                            <%= new_addon_form.hidden_field :product_variant_id, value: variant.id %>
                            
                            <div class="flex items-center">
                              <%= new_addon_form.label :quantity, "Quantity:", class: "mr-2 text-sm text-gray-700" %>
                              <%= new_addon_form.number_field :quantity,
                                    min: 0,
                                    max: variant.stock_quantity,
                                    value: 0,
                                    class: "shadow-sm focus:ring-blue-500 focus:border-blue-500 w-16 sm:text-sm border-gray-300 rounded-md addon-quantity-input" %>
                              <span class="text-xs text-gray-500 ml-2">(Available: <%= variant.stock_quantity %>)</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    <% end %>
                  <% end %>
                <% end %>
              </div>
              <p class="text-sm text-gray-500 mt-2">Products with quantity 0 will not be added or will be removed if previously added.</p>
            </div>
          <% else %>
            <p class="text-gray-500">No products available to add to this booking.</p>
          <% end %>
        </div>
        
        <%# Display Total Price %>
        <div class="mb-6 p-4 bg-gray-100 rounded">
          <h3 class="text-lg font-medium text-gray-900 mb-2">Total Booking Price:</h3>
          <p class="text-xl font-bold text-gray-800"><span id="total-booking-price"><%= number_to_currency(@booking.total_charge) %></span></p>
        </div>

        <div class="flex justify-end space-x-3">
          <%= link_to "Cancel", business_manager_booking_path(@booking), class: "inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
          
          <%= f.submit "Update Booking", class: "inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<%# Add JavaScript for dynamic price update %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const quantityInput = document.getElementById('booking_quantity');
    const totalPriceSpan = document.getElementById('total-booking-price');
    const baseServicePrice = <%= @booking.service.price || 0 %>;
    const addonQuantityInputs = document.querySelectorAll('.addon-quantity-input');
    const addonPrices = {}; // Store add-on prices by product variant ID

    // Populate addonPrices object
    // Use variant prices for available products not yet added (new rows)
    <% @available_products.flat_map(&:product_variants).each do |variant| %>
      if (!addonPrices[<%= variant.id %>]) {
        addonPrices[<%= variant.id %>] = <%= variant.final_price || 0 %>;
      }
    <% end %>
    // Use booked prices for existing add-ons
    <% @booking.booking_product_add_ons.each do |addon| %>
       addonPrices[<%= addon.product_variant_id %>] = <%= addon.price || 0 %>;
    <% end %>

    function updateTotalPrice() {
      const serviceQuantity = <%= @booking.service.experience? ? 'parseInt(quantityInput.value, 10) || 1' : '1' %>;
      let addonsTotal = 0;

      addonQuantityInputs.forEach(input => {
        // Find the closest parent element with the product variant ID (hidden field)
        const parentDiv = input.closest('.bg-gray-50');
        if (parentDiv) {
          const variantIdInput = parentDiv.querySelector('input[type="hidden"]');
          if (variantIdInput) {
            const variantId = variantIdInput.value;
            const quantity = parseInt(input.value, 10) || 0;
            const price = addonPrices[variantId] || 0;
            addonsTotal += quantity * price;
          }
        }
      });

      const newTotalPrice = (baseServicePrice * serviceQuantity) + addonsTotal;

      // Format the price (simplified) - a proper currency formatting library is recommended
      const formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      });
      totalPriceSpan.textContent = formatter.format(newTotalPrice);
    }

    // Add event listeners
    if (quantityInput) {
      quantityInput.addEventListener('input', updateTotalPrice);
      quantityInput.addEventListener('change', updateTotalPrice);
    }

    addonQuantityInputs.forEach(input => {
      input.addEventListener('input', updateTotalPrice);
      input.addEventListener('change', updateTotalPrice);
    });

    // Initial update on load
    updateTotalPrice();
  });
</script> 