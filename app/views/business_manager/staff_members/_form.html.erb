<%# app/views/business_manager/staff_members/_form.html.erb %>

<%= form_with(model: [:business_manager, staff_member], local: true) do |f| %>
  <% if staff_member.errors.any? %>
    <div id="error_explanation" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
      <strong class="font-bold"><%= pluralize(staff_member.errors.count, "error") %> prohibited this staff member from being saved:</strong>
      <ul class="mt-2 list-disc list-inside">
        <% staff_member.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- User Account Information -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900 border-b pb-2">User Account Information</h3>
      
      <%= f.fields_for :user do |uf| %>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <%= uf.label :first_name, class: "block text-gray-700 text-sm font-bold mb-2" %>
            <%= uf.text_field :first_name, required: true,
                  class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
          </div>
          
          <div>
            <%= uf.label :last_name, class: "block text-gray-700 text-sm font-bold mb-2" %>
            <%= uf.text_field :last_name, required: true,
                  class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
          </div>
        </div>

        <div>
          <%= uf.label :email, class: "block text-gray-700 text-sm font-bold mb-2" %>
          <%= uf.email_field :email, required: true,
                class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
        </div>

        <% if staff_member.new_record? %>
          <!-- Password fields for new staff member -->
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <%= uf.label :password, class: "block text-gray-700 text-sm font-bold mb-2" %>
              <%= uf.password_field :password, required: true,
                    class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
            </div>
            
            <div>
              <%= uf.label :password_confirmation, class: "block text-gray-700 text-sm font-bold mb-2" %>
              <%= uf.password_field :password_confirmation, required: true,
                    class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
            </div>
          </div>
        <% else %>
          <!-- Password change section for existing staff member -->
          <div class="bg-gray-50 p-4 rounded-lg border">
            <div class="flex items-center justify-between mb-3">
              <h4 class="text-sm font-medium text-gray-900">Change Password</h4>
              <button type="button" id="toggle-password-fields" 
                      class="text-sm text-blue-600 hover:text-blue-800 focus:outline-none">
                <span id="toggle-password-text">Show password fields</span>
              </button>
            </div>
            
            <div id="password-fields" class="hidden grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <%= uf.label :password, "New Password", class: "block text-gray-700 text-xs font-bold mb-2" %>
                <%= uf.password_field :password, placeholder: "Leave blank to keep current password",
                      class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
              </div>
              
              <div>
                <%= uf.label :password_confirmation, "Confirm New Password", class: "block text-gray-700 text-xs font-bold mb-2" %>
                <%= uf.password_field :password_confirmation, placeholder: "Confirm new password",
                      class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
              </div>
            </div>
            
            <p class="text-xs text-gray-500 mt-2">
              Leave password fields empty to keep the current password unchanged.
            </p>
          </div>

          <script>
            function initializePasswordFieldToggle() {
              const toggleButton = document.getElementById('toggle-password-fields');
              const passwordFields = document.getElementById('password-fields');
              const toggleText = document.getElementById('toggle-password-text');
              
              if (toggleButton && passwordFields && toggleText) {
                const passwordInputs = passwordFields.querySelectorAll('input[type="password"]');
                
                // Store original names for restoration
                const originalNames = {};
                passwordInputs.forEach(input => {
                  originalNames[input.id] = input.name;
                  // Initially remove name attribute so fields won't be submitted
                  input.removeAttribute('name');
                });
                
                // Remove existing event listeners to prevent duplicates
                const newToggleButton = toggleButton.cloneNode(true);
                toggleButton.parentNode.replaceChild(newToggleButton, toggleButton);
                
                newToggleButton.addEventListener('click', function() {
                  const isHidden = passwordFields.classList.contains('hidden');
                  
                  if (isHidden) {
                    passwordFields.classList.remove('hidden');
                    document.getElementById('toggle-password-text').textContent = 'Hide password fields';
                    // Restore name attributes so fields can be submitted
                    passwordInputs.forEach(input => {
                      input.name = originalNames[input.id];
                    });
                  } else {
                    passwordFields.classList.add('hidden');
                    document.getElementById('toggle-password-text').textContent = 'Show password fields';
                    
                    // Clear fields and remove name attributes so they won't be submitted
                    passwordInputs.forEach(input => {
                      input.value = '';
                      input.removeAttribute('name');
                    });
                  }
                });
              }
            }
            
            // Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
            document.addEventListener('DOMContentLoaded', initializePasswordFieldToggle);
            document.addEventListener('turbo:load', initializePasswordFieldToggle);
          </script>
        <% end %>
      <% end %>

      <div>
        <%= f.label :user_role, "User Role", class: "block text-gray-700 text-sm font-bold mb-2" %>
        
        <!-- Custom Role Dropdown -->
        <div class="role-dropdown relative">
          <button type="button" 
                  class="role-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                  data-role-dropdown-target="button">
            <span class="role-dropdown-text text-gray-900">
              <% if staff_member.user_role.present? %>
                <%= staff_member.user_role == 'staff' ? 'Staff Member' : 'Manager' %>
              <% else %>
                Select role
              <% end %>
            </span>
            <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
              <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
              </svg>
            </span>
          </button>
          
          <!-- Dropdown Menu -->
          <div class="role-dropdown-menu absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
               data-role-dropdown-target="menu">
            
            <div class="role-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                 data-role-value="staff"
                 data-role-name="Staff Member"
                 data-role-dropdown-target="option">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <div class="font-medium text-gray-900">Staff Member</div>
                  <div class="text-sm text-gray-500 mt-1">Can manage appointments and basic customer interactions</div>
                </div>
              </div>
              <% if staff_member.user_role == 'staff' %>
                <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                  </svg>
                </span>
              <% end %>
            </div>
            
            <div class="role-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                 data-role-value="manager"
                 data-role-name="Manager"
                 data-role-dropdown-target="option">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <div class="font-medium text-gray-900">Manager</div>
                  <div class="text-sm text-gray-500 mt-1">Full access to business management and settings</div>
                </div>
              </div>
              <% if staff_member.user_role == 'manager' %>
                <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                  </svg>
                </span>
              <% end %>
            </div>
          </div>
        </div>
        
        <!-- Hidden field to store the selected role -->
        <%= f.hidden_field :user_role, id: "staff_member_user_role" %>
      </div>
    </div>

    <!-- Staff Member Details -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900 border-b pb-2">Staff Member Details</h3>
      
      <div>
        <%= f.label :name, "Display Name", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= f.text_field :name, placeholder: "Optional - defaults to First Last name",
              class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
        <p class="mt-1 text-sm text-gray-500">Leave blank to use first and last name automatically</p>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <%= f.label :phone, class: "block text-gray-700 text-sm font-bold mb-2" %>
          <%= f.text_field :phone, placeholder: "(555) 123-4567",
                class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
        </div>
        
        <div>
          <%= f.label :position, "Job Position", class: "block text-gray-700 text-sm font-bold mb-2" %>
          <%= f.text_field :position, placeholder: "e.g., Senior Technician, Stylist",
                class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
        </div>
      </div>

      <div>
        <%= f.label :bio, class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= f.text_area :bio, rows: 4, placeholder: "Tell customers about this staff member's experience and expertise...",
              class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
      </div>
      
      <!-- Profile Photo Section -->
      <div class="bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-300 hover:border-gray-400 transition-colors">
        <%= f.label :photo, "Profile Photo", class: "block text-gray-700 text-sm font-bold mb-3" %>
        
        <!-- File upload area -->
        <div class="text-center">
          <!-- Hidden file input -->
          <%= f.file_field :photo, 
                accept: "image/png,image/jpeg,image/gif,image/webp,image/heic,image/heif",                                                                     
                class: "hidden",
                id: "staff_member_photo_input",
                data: { allowed_types: "image/png,image/jpeg,image/gif,image/webp,image/heic,image/heif" },
                onchange: "validateStaffPhoto(this)" %>
          
          <!-- Custom styled button -->
          <button type="button" id="staff-photo-button" 
                  class="inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            Choose Profile Photo
          </button>
          
          <!-- File selection display -->
          <div id="photo-selection-display" class="mt-3 text-sm text-gray-600 font-medium">
            No photo selected
          </div>
        </div>
        
        <!-- Current photo display -->
        <% if staff_member.photo.attached? && staff_member.persisted? %>
          <div class="mt-4 flex flex-col sm:flex-row items-center sm:items-start gap-4 p-4 bg-white rounded-lg border">
            <div class="flex-shrink-0">
              <% begin %>
                <%= image_tag rails_public_blob_url(staff_member.photo.variant(:thumb)), 
                      class: "h-20 w-20 rounded-full object-cover shadow-sm border-2 border-gray-200" %>
              <% rescue => e %>
                <div class="h-20 w-20 rounded-full bg-gray-200 flex items-center justify-center">
                  <span class="text-gray-500 text-xs text-center">Photo<br>Error</span>
                </div>
              <% end %>
            </div>
            <div class="text-center sm:text-left">
              <p class="text-sm font-medium text-gray-700">Current Photo</p>
              <p class="text-xs text-gray-500 mt-1">
                <%= staff_member.photo.filename if staff_member.photo.respond_to?(:filename) %>
              </p>
            </div>
          </div>
        <% end %>
        
        <!-- Help text -->
        <div class="mt-4 p-3 bg-blue-50 rounded-md">
          <p class="text-sm text-blue-700">
            <strong>📸 Photo Guidelines:</strong><br>
            • Formats: PNG, JPEG, GIF, WebP, HEIC, HEIF<br>
            • Max size: 15MB<br>
            • HEIC files automatically converted to JPEG<br>
            • Recommended: Professional headshot, square aspect ratio
          </p>
        </div>
      </div>

      <script>
        function initializeStaffMemberFormFeatures() {
          // Handle custom photo button click
          const photoButton = document.getElementById('staff-photo-button');
          const photoInput = document.getElementById('staff_member_photo_input');
          const photoDisplay = document.getElementById('photo-selection-display');
          
          if (photoButton && photoInput) {
            photoButton.addEventListener('click', function() {
              photoInput.click();
            });
          }
          
          // Role Dropdown Functionality
          const roleDropdownButton = document.querySelector('[data-role-dropdown-target="button"]');
          const roleDropdownMenu = document.querySelector('[data-role-dropdown-target="menu"]');
          const roleDropdownOptions = document.querySelectorAll('[data-role-dropdown-target="option"]');
          const roleDropdownText = document.querySelector('.role-dropdown-text');
          const roleDropdownArrow = roleDropdownButton?.querySelector('svg');
          const roleHiddenField = document.getElementById('staff_member_user_role');
          
          if (roleDropdownButton && roleDropdownMenu) {
            // Toggle dropdown
            roleDropdownButton.addEventListener('click', function(e) {
              e.preventDefault();
              const isHidden = roleDropdownMenu.classList.contains('hidden');
              
              if (isHidden) {
                roleDropdownMenu.classList.remove('hidden');
                roleDropdownArrow?.classList.add('rotate-180');
              } else {
                roleDropdownMenu.classList.add('hidden');
                roleDropdownArrow?.classList.remove('rotate-180');
              }
            });
            
            // Handle option selection
            roleDropdownOptions.forEach(option => {
              option.addEventListener('click', function(e) {
                e.preventDefault();
                
                const roleValue = this.getAttribute('data-role-value');
                const roleName = this.getAttribute('data-role-name');
                
                // Update hidden field
                if (roleHiddenField) {
                  roleHiddenField.value = roleValue;
                }
                
                // Update button text
                if (roleDropdownText) {
                  roleDropdownText.textContent = roleName;
                }
                
                // Update selection indicators
                roleDropdownOptions.forEach(opt => {
                  const checkmark = opt.querySelector('svg');
                  if (checkmark) {
                    checkmark.classList.add('hidden');
                  }
                });
                
                const selectedCheckmark = this.querySelector('svg');
                if (selectedCheckmark) {
                  selectedCheckmark.classList.remove('hidden');
                }
                
                // Close dropdown
                roleDropdownMenu.classList.add('hidden');
                roleDropdownArrow?.classList.remove('rotate-180');
              });
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
              if (!roleDropdownButton.contains(e.target) && !roleDropdownMenu.contains(e.target)) {
                roleDropdownMenu.classList.add('hidden');
                roleDropdownArrow?.classList.remove('rotate-180');
              }
            });
          }
        }

        document.addEventListener('DOMContentLoaded', initializeStaffMemberFormFeatures);
        document.addEventListener('turbo:load', initializeStaffMemberFormFeatures);

        function validateStaffPhoto(input) {
          const file = input.files[0];
          // Remove any existing feedback
          let existingFeedback = document.getElementById('photo-feedback');
          if (existingFeedback) {
            existingFeedback.remove();
          }
          
          if (!file) {
            // Reset styling if no file
            const photoButton = document.getElementById('staff-photo-button');
            const photoDisplay = document.getElementById('photo-selection-display');
            if (photoButton) {
              photoButton.className = 'inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer';
            }
            if (photoDisplay) {
              photoDisplay.className = 'mt-3 text-sm text-gray-600 font-medium';
              photoDisplay.textContent = 'No photo selected';
            }
            return;
          }
          
          let hasErrors = false;
          
          // Check file size (15MB = 15 * 1024 * 1024 bytes)
          if (file.size > 15 * 1024 * 1024) {
            alert('Photo must be less than 15MB. Please choose a smaller file.');
            hasErrors = true;
          }
          
          // Check file type - get from data attribute or fallback
          const allowedTypes = input.dataset.allowedTypes ? 
            input.dataset.allowedTypes.split(',') :
            ['image/png', 'image/jpeg', 'image/gif', 'image/webp', 'image/heic', 'image/heif'];                                             
          if (!allowedTypes.includes(file.type)) {
            alert('Photo must be PNG, JPEG, GIF, WebP, HEIC, or HEIF format.');
            hasErrors = true;
          }
          
          if (hasErrors) {
            input.value = '';
            // Update button styling for error
            const photoButton = document.getElementById('staff-photo-button');
            const photoDisplay = document.getElementById('photo-selection-display');
            if (photoButton) {
              photoButton.className = 'inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-red-500 hover:bg-red-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 cursor-pointer';
            }
            if (photoDisplay) {
              photoDisplay.className = 'mt-3 text-sm text-red-600 font-medium';
              photoDisplay.textContent = 'Invalid photo file';
            }
            
            // Add error feedback
            const feedback = document.createElement('div');
            feedback.id = 'photo-feedback';
            feedback.className = 'mt-2 text-sm text-red-600 font-medium';
            feedback.innerHTML = '❌ Please choose a valid photo file.';
            input.parentElement.appendChild(feedback);
            return;
          }
          
          // Valid file - update UI to show success
          const photoButton = document.getElementById('staff-photo-button');
          const photoDisplay = document.getElementById('photo-selection-display');
          if (photoButton) {
            photoButton.className = 'inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-green-500 hover:bg-green-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 cursor-pointer';
          }
          if (photoDisplay) {
            photoDisplay.className = 'mt-3 text-sm text-green-600 font-medium';
            photoDisplay.textContent = `Selected: ${file.name}`;
          }
          
          // Add success feedback
          const feedback = document.createElement('div');
          feedback.id = 'photo-feedback';
          feedback.className = 'mt-2 text-sm text-green-600 font-medium';
          feedback.innerHTML = '✅ Photo ready to upload.';
          input.parentElement.appendChild(feedback);
        }
      </script>

      <!-- Status Toggle -->
      <div class="flex items-center">
        <%= f.check_box :active, class: "form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500" %>
        <%= f.label :active, "Active Staff Member", class: "ml-2 text-gray-700 text-sm font-bold" %>
      </div>
    </div>
  </div>

  <!-- Service Assignment Section -->
  <div class="mt-8 border-t pt-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Service Assignment</h3>
    <p class="text-sm text-gray-600 mb-4">Select which services this staff member can provide:</p>
    
    <% if @current_business.services.any? %>
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
        <%= f.collection_check_boxes :service_ids, @current_business.services.order(:name), :id, :name do |b|
          content_tag(:div, class: "bg-gray-50 rounded-lg p-3 border border-gray-200 hover:bg-gray-100 transition-colors") do
            b.label(class: "flex items-center cursor-pointer") do
              b.check_box(class: "form-checkbox h-4 w-4 text-blue-600 rounded focus:ring-blue-500 mr-3") + 
              content_tag(:span, b.text, class: "text-sm text-gray-900")
            end
          end
        end %>
      </div>
    <% else %>
      <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p class="text-sm text-yellow-800">
          No services found. <%= link_to "Create a service", new_business_manager_service_path, class: "text-yellow-900 underline" %> first, then assign it to this staff member.
        </p>
      </div>
    <% end %>
  </div>

  <!-- Submit Button -->
  <div class="mt-8 border-t pt-6">
    <div class="flex flex-col sm:flex-row gap-4">
      <%= f.submit(staff_member.new_record? ? 'Create Staff Member' : 'Update Staff Member', 
            class: "inline-flex items-center justify-center px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white font-bold rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer") %>
    </div>
  </div>
<% end %> 