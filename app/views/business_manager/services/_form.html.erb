<%# app/views/business_manager/services/_form.html.erb %>

<%= form_with(model: [:business_manager, service], local: true, 
           data: { 
             controller: "service-form service-variants",
             action: "submit->service-form#validateForm"
           }) do |form| %>
  <% if service.errors.any? %>
    <div id="error_explanation" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
      <strong class="font-bold"><%= pluralize(service.errors.count, "error") %> prohibited this service from being saved:</strong>
      <ul class="mt-2 list-disc list-inside">
        <% service.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-4">
    <%= form.label :name, class: "block text-gray-700 text-sm font-bold mb-2" %>
    <%= form.text_field :name, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
  </div>

  <div class="mb-4">
    <%= form.label :description, class: "block text-gray-700 text-sm font-bold mb-2" %>
    <%= form.text_area :description, rows: 4, 
          placeholder: "Describe your service and what customers should include in their booking notes. For example: 'Comprehensive lawn care service including mowing, edging, and cleanup. In your booking notes, please provide your complete address, gate code (if applicable), preferred contact method (call/text), and any specific areas of concern or special instructions.'",
          class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
  </div>

  <div data-service-variants-target="baseFields" class="base-fields-block">
    <div class="mb-4">
      <%= form.label :duration, "Duration (minutes)", class: "block text-gray-700 text-sm font-bold mb-2" %>
      <%= form.number_field :duration, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
    </div>

    <div class="mb-4">
      <%= form.label :price, class: "block text-gray-700 text-sm font-bold mb-2" %>
      <%= form.number_field :price, step: 0.01, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
    </div>
  </div>

  <div class="mb-8 border-t pt-6">
    <h3 class="text-lg font-semibold mb-4">Service Variants</h3>
    <p class="text-sm text-gray-600 mb-4">Create different versions of this service (e.g., 30-min, 60-min) with their own duration and price.</p>

    <div data-service-variants-target="container">
    <%= form.fields_for :service_variants do |variant_form| %>
      <div class="variant-field grid grid-cols-12 gap-4 items-end mb-4 border p-4 rounded-lg bg-gray-50">
        <div class="col-span-3">
          <%= variant_form.label :name, class: "block text-gray-700 text-sm font-bold mb-1" %>
          <%= variant_form.text_field :name, class: "w-full border rounded px-3 py-2" %>
        </div>
        <div class="col-span-3">
          <%= variant_form.label :duration, "Duration (min)", class: "block text-gray-700 text-sm font-bold mb-1" %>
          <%= variant_form.number_field :duration, min: 1, class: "w-full border rounded px-3 py-2" %>
        </div>
        <div class="col-span-3">
          <%= variant_form.label :price, class: "block text-gray-700 text-sm font-bold mb-1" %>
          <%= variant_form.number_field :price, step: 0.01, class: "w-full border rounded px-3 py-2" %>
        </div>
        <div class="col-span-2 flex items-center">
          <%= variant_form.check_box :active, class: "mr-2" %> <%= variant_form.label :active, class: "text-sm" %>
        </div>
        <div class="col-span-1 text-right flex items-center">
          <% unless variant_form.object.new_record? %>
            <%= variant_form.check_box :_destroy, style: 'display:none;' %>
            <button type="button" class="remove-variant text-red-600 text-sm cursor-pointer" data-action="click->service-variants#removeVariant">Remove</button>
          <% else %>
            <button type="button" class="remove-variant text-red-600 text-sm cursor-pointer" data-action="click->service-variants#removeVariant">Remove</button>
          <% end %>
        </div>
      </div>
    <% end %>
    </div>

    <%# Link handled by Stimulus %>
    <%= button_tag "Add Variant", type: "button", class: "inline-flex items-center px-4 py-2 bg-primary text-white text-sm font-medium rounded-md transition-colors cursor-pointer", data: { "service-variants-target": "addButton", action: "service-variants#addVariant" } %>
  </div>

  <div class="mb-4">
    <%= form.check_box :active %>
    <%= form.label :active, class: "ml-2 text-gray-700 text-sm font-bold" %>
  </div>

  <div class="mb-4">
    <%= form.check_box :featured %>
    <%= form.label :featured, "Featured Service", class: "ml-2 text-gray-700 text-sm font-bold" %>
  </div>

  <div class="mb-4">
    <%= form.check_box :tips_enabled %>
    <%= form.label :tips_enabled, "Enable tips", class: "ml-2 text-gray-700 text-sm font-bold" %>
  </div>

  <div class="mb-4">
    <%= form.check_box :allow_discounts %>
    <%= form.label :allow_discounts, "Allow discount codes", class: "ml-2 text-gray-700 text-sm font-bold" %>
    <span class="ml-2 text-xs text-gray-500">(When unchecked, this service will be excluded from all discount codes)</span>
  </div>

  <div class="mb-4">
    <%= form.check_box :subscription_enabled, class: "form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500", id: "service_subscription_enabled" %>
    <%= form.label :subscription_enabled, "Enable subscriptions", class: "ml-2 text-gray-700 text-sm font-bold" %>
  </div>

  <div class="mb-4">
    <h3 class="text-lg font-semibold mb-2">Assign Staff Members</h3>
    <%= form.collection_check_boxes :staff_member_ids, @current_business.staff_members.order(:name), :id, :name do |b|
      b.label(class: "inline-flex items-center mr-4 mb-2") do
        b.check_box(class: "form-checkbox h-5 w-5 text-blue-600") + 
        content_tag(:span, b.text, class: "ml-2")
      end
    end %>
  </div>

  <%# Service Type fields %>
   <div class="mb-4">
     <%= form.label :service_type, class: "block text-gray-700 text-sm font-bold mb-2" do %>
       Service Type
     <% end %>
     <div data-service-form-target="serviceTypeDropdown">
       <%= render 'shared/rich_dropdown',
           collection: Service.service_types.keys.map { |k| OpenStruct.new(id: k, name: k.humanize) },
           field_name: "#{form.object_name}[service_type]",
           selected_value: service.service_type,
           prompt_text: "Select service type",
           value_method: :id,
           text_method: :name,
           required: true,
           dropdown_id: "service_type_dropdown",
           hidden_field_data: { "data-service-form-target": "serviceTypeHidden" } %>
     </div>
     <div id="service_type_error" class="hidden mt-1 text-sm text-red-600" 
          data-service-form-target="serviceTypeError">
       Please select a service type.
     </div>
     
     <!-- Service Type Explanation -->
     <div class="mt-3 p-4 bg-blue-50 border border-blue-200 rounded-lg">
       <h5 class="text-sm font-medium text-blue-800 mb-2">Service Type Definitions:</h5>
       <div class="text-sm text-blue-700 space-y-2">
         <div>
           <span class="font-semibold">Standard:</span> Regular services that customers book individually. Quantity is always 1 person, payment can be flexible (before or after service), and each booking is independent.
         </div>
         <div>
           <span class="font-semibold">Experience:</span> Events with multiple attendees. Supports variable quantity (min/max attendees), requires upfront payment to secure spots, and ideal for workshops, tours, or group services.
         </div>
       </div>
     </div>
   </div>

   <div id="experience_fields" class="<%= service.experience? ? '' : 'hidden' %>" 
        data-service-form-target="experienceFields">
     <div class="mb-4">
       <%= form.label :min_bookings, class: "block text-gray-700 text-sm font-bold mb-2" %>
       <%= form.number_field :min_bookings, min: 1, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
     </div>
     <div class="mb-4">
       <%= form.label :max_bookings, class: "block text-gray-700 text-sm font-bold mb-2" %>
       <%= form.number_field :max_bookings, min: (service.min_bookings || 1), class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
     </div>
     <%# Spots is calculated, not user-editable here %>
     <% if service.persisted? && service.experience? %>
       <div class="mb-4">
         <span class="block text-gray-700 text-sm font-bold mb-2">Current Spots:</span>
         <p class="text-gray-900 text-sm"><%= service.spots %></p>
       </div>
     <% end %>
   </div>

  <!-- Service Availability Section -->
  <div class="mt-6 mb-6 border-t pt-6" 
       data-controller="service-availability" 
       data-service-availability-service-name-value="<%= service.persisted? ? service.name : 'New Service' %>">
    <h3 class="text-lg font-semibold mb-2">Service Availability (Optional)</h3>
    
    <% if service.persisted? %>
      <!-- For existing services, show link to dedicated availability management -->
      <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
        <div class="flex items-center justify-between">
          <div>
            <h4 class="font-medium text-gray-900">Current Availability</h4>
            <p class="text-sm text-gray-600">
              <% if service.enforce_service_availability? %>
                <span class="text-green-600">✓ Enforcement enabled</span> - 
                <% total_slots = service.availability&.values&.flatten&.reject(&:blank?)&.count || 0 %>
                <%= total_slots %> time slots configured
              <% else %>
                <span class="text-gray-500">Enforcement disabled</span> - service available when staff are available
              <% end %>
            </p>
          </div>
          <div class="flex gap-3">
            <%= link_to manage_availability_business_manager_service_path(service), 
                  class: "inline-flex items-center px-4 py-2 bg-primary text-white rounded-md transition-colors cursor-pointer" do %>
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              Manage Availability
            <% end %>
            
            <%= button_to business_manager_service_path(service), 
                  method: :patch,
                  params: { service: { availability: {}, enforce_service_availability: false } },
                  class: "inline-flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-md transition-colors cursor-pointer",
                  confirm: "This will remove all service availability restrictions and use staff availability only. Continue?",
                  form: { 
                    data: { 
                      turbo_confirm: "This will remove all service availability restrictions and use staff availability only. Continue?",
                      turbo_method: "patch",
                      turbo_frame: "_top"
                    } 
                  },
                  remote: true do %>
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
              Use Default (Staff Availability Only)
            <% end %>
          </div>
        </div>
      </div>
    <% else %>
      <!-- For new services, show toggle buttons first -->
      <div class="mb-4">
        <div class="flex gap-3">
          <button type="button" 
                  id="configure-availability-btn"
                  class="inline-flex items-center px-4 py-2 bg-primary text-white text-sm font-medium rounded-lg transition-colors cursor-pointer"
                  data-action="click->service-availability#showAvailabilityForm">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
            Configure Availability
          </button>
          
          <button type="button" 
                  id="disable-availability-btn"
                  class="inline-flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm font-medium rounded-lg transition-colors cursor-pointer"
                  style="display: none;"
                  data-action="click->service-availability#hideAvailabilityForm">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
            Use Default (Staff Availability Only)
          </button>
        </div>
        <p class="text-xs text-gray-500 mt-2" id="availability-button-help">
          Configure specific hours for this service, or use default staff availability.
        </p>
      </div>

      <!-- For new services, embed availability form fields (initially hidden) -->
      <div id="availability-form-container" 
           class="bg-gray-50 border border-gray-200 rounded-lg p-4 hidden" 
           data-service-availability-target="availabilityContainer">
        
        <div class="mb-4">
          <h4 class="font-medium text-gray-900">Set Initial Availability</h4>
          <%= form.hidden_field :enforce_service_availability, value: "1" %>
        </div>
        
        <div id="availability-errors" class="hidden p-3 bg-red-50 border border-red-200 rounded-lg mb-4">
          <div class="flex">
            <svg class="h-5 w-5 text-red-400 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
            <div>
              <h4 class="text-sm font-medium text-red-800">Validation Errors</h4>
              <ul class="mt-1 text-sm text-red-700 list-disc pl-5" data-service-availability-target="errorsList">
              </ul>
            </div>
          </div>
        </div>
        
        <div class="space-y-4">
          <% %w[monday tuesday wednesday thursday friday saturday sunday].each_with_index do |day, idx| %>
            <div class="border border-gray-200 rounded-lg overflow-hidden bg-white">
              <button type="button" 
                      class="day-toggle w-full px-4 py-3 bg-gray-50 hover:bg-gray-100 text-left flex items-center justify-between transition-colors"
                      data-day="<%= day %>"
                      data-action="click->service-availability#toggleDay">
                <div>
                  <h4 class="font-medium text-gray-900"><%= day.capitalize %></h4>
                </div>
                <svg class="day-chevron w-5 h-5 text-gray-400 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                </svg>
              </button>
              
              <div class="day-content px-4 pb-4" data-day="<%= day %>" data-service-availability-target="dayContent">
                <!-- Full Day Checkbox -->
                <div class="mt-4 mb-4">
                  <div class="flex items-center">
                    <input type="hidden" name="full_day[<%= day %>]" value="0" />
                    <input type="checkbox" 
                           id="full_day_<%= day %>" 
                           name="full_day[<%= day %>]"
                           value="1"
                           class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2" 
                           data-day="<%= day %>"
                           data-action="change->service-availability#toggleFullDay" />
                    <label for="full_day_<%= day %>" class="ml-2 text-sm font-medium text-gray-700">
                      Full day availability
                    </label>
                  </div>
                  <p class="text-xs text-gray-500 mt-1 ml-6">Service available all day on <%= day.capitalize %></p>
                </div>
                
                <div id="<%= day %>-slots" class="space-y-2" data-service-availability-target="slotsContainer" data-day="<%= day %>">
                  <!-- Initially empty - user can add slots using the button below -->
                </div>
                
                <button type="button" 
                        class="mt-3 w-full px-3 py-2 border-2 border-dashed border-gray-300 text-gray-600 hover:border-blue-400 hover:text-blue-600 rounded-md transition-colors text-sm cursor-pointer"
                        data-day="<%= day %>"
                        data-action="click->service-availability#addTimeSlot">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                  </svg>
                  Add Time Slot
                </button>
              </div>
            </div>
          <% end %>
        </div>
        
        <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <p class="text-sm text-blue-800">
            <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            You can leave this section empty if you want the service to be available whenever staff are available. 
            You can always modify this later after creating the service.
          </p>
        </div>
      </div>
    <% end %>
  </div>

  <%# Add-on Products - only show if business has service or mixed products %>
  <% addon_products = @current_business.products.where(product_type: [:service, :mixed]).positioned %>
  <% if addon_products.exists? %>
    <div class="mb-4">
      <h3 class="text-lg font-semibold mb-2">Add-on Products</h3>
      <%= form.collection_check_boxes :add_on_product_ids, addon_products, :id, :name do |b|
        b.label(class: "inline-flex items-center mr-4 mb-2") do
          b.check_box(class: "form-checkbox h-5 w-5 text-blue-600") + 
          content_tag(:span, b.text, class: "ml-2")
        end
      end %>
    </div>
  <% end %>

  <!-- Subscription Settings Section -->
  <div id="service-subscription-settings" class="mb-8 border-t pt-6" style="<%= service.subscription_enabled? ? '' : 'display: none;' %>" 
       data-service-form-target="subscriptionSettings">
    <h3 class="text-lg font-semibold text-gray-900 border-b pb-2 mb-4">Subscription Settings</h3>
    
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <!-- Subscription Pricing -->
      <div class="space-y-4">
        <h4 class="text-md font-medium text-gray-800">Pricing & Incentives</h4>
        
        <div>
          <%= form.label :subscription_discount_percentage, "Subscription Discount (%)", class: "block text-gray-700 text-sm font-bold mb-2" %>
          <%= form.number_field :subscription_discount_percentage, step: 0.01, min: 0, max: 100, 
                class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
          <p class="mt-1 text-sm text-gray-500">Discount percentage for customers who subscribe (e.g., 15% off recurring bookings)</p>
        </div>

        <div>
          <%= form.label :subscription_billing_cycle, "Default Billing Cycle", class: "block text-gray-700 text-sm font-bold mb-2" %>
          <%= render 'shared/rich_dropdown',
              collection: CustomerSubscription.billing_cycles.map { |cycle| [cycle.humanize, cycle] },
              field_name: "#{form.object_name}[subscription_billing_cycle]",
              selected_value: service.subscription_billing_cycle || 'monthly',
              prompt_text: "Select Billing Cycle",
              value_method: :last,
              text_method: :first,
              required: false,
              dropdown_id: "service_subscription_billing_cycle_dropdown" %>
        </div>
      </div>

      <!-- Rebooking Preferences -->
      <div class="space-y-4">
        <h4 class="text-md font-medium text-gray-800">Rebooking Preferences</h4>
        
        <div>
          <%= form.label :subscription_rebooking_preference, "Rebooking Preference", class: "block text-gray-700 text-sm font-bold mb-2" %>
          <% 
            business_rebooking_options = [
              ['Same day next month (or soonest available)', 'same_day_next_month'],
              ['Same day next month (or loyalty points if unavailable)', 'same_day_loyalty_fallback'],
              ['Let customers choose their preference', 'customer_choice']
            ]
          %>
          <%= render 'shared/rich_dropdown',
              collection: business_rebooking_options,
              field_name: "#{form.object_name}[subscription_rebooking_preference]",
              selected_value: service.subscription_rebooking_preference || 'same_day_next_month',
              prompt_text: "Select Rebooking Option",
              value_method: :last,
              text_method: :first,
              required: false,
              dropdown_id: "service_subscription_rebooking_preference_dropdown" %>
          <p class="mt-1 text-sm text-gray-500">How to handle recurring service bookings when preferred times aren't available</p>
        </div>

        <div class="bg-blue-50 p-4 rounded-lg">
          <h5 class="text-sm font-medium text-blue-800 mb-2">Rebooking Options:</h5>
          <ul class="text-sm text-blue-700 space-y-1">
            <li><strong>Same day next month (or soonest available):</strong> Try to book same day/time next month, fallback to earliest available slot</li>
            <li><strong>Same day next month (or loyalty points if unavailable):</strong> Try to book same day/time next month, award loyalty points if no slots available (requires loyalty program)</li>
            <li><strong>Let customers choose their preference:</strong> Customers can select their preferred rebooking option when subscribing</li>
          </ul>
        </div>
      </div>
    </div>


  </div>

  <!-- Service Images Section -->
  <div class="mt-8 border-t pt-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Service Images</h3>
    
    <% if service.persisted? && service.images.attached? %>
      <div id="existing-images" class="mb-6">
        <h4 class="text-md font-medium mb-3 text-gray-700">Current Images:</h4>
        <% service.images.ordered.each_with_index do |image, index| %>
          <div class="mb-4 border border-gray-200 rounded-lg image-management-item bg-white shadow-sm" data-image-id="<%= image.id %>">
            <!-- Hidden fields for managing this image -->
            <input type="hidden" name="service[images_attributes][<%= index %>][id]" value="<%= image.id %>" />
            <input type="hidden" name="service[images_attributes][<%= index %>][_destroy]" value="0" class="destroy-image" />
            <input type="hidden" name="service[images_attributes][<%= index %>][position]" value="<%= index %>" class="image-position" />
            
            <!-- Mobile-first responsive layout -->
            <div class="flex flex-col sm:flex-row sm:items-center p-4 gap-4">
              <!-- Image thumbnail -->
              <div class="flex-shrink-0 self-center sm:self-start">
                <% if image.variable? %>
                  <% begin %>
                    <%= image_tag rails_public_blob_url(image.representation(resize_to_limit: [120, 120])), 
                          class: "w-20 h-20 sm:w-24 sm:h-24 rounded-lg shadow-sm object-cover" %>
                  <% rescue ActiveStorage::UnrepresentableError %>
                    <div class="w-20 h-20 sm:w-24 sm:h-24 bg-gray-200 rounded-lg flex items-center justify-center">
                      <span class="text-gray-500 text-xs text-center">Unsupported<br>Format</span>
                    </div>
                  <% end %>
                <% else %>
                  <div class="w-20 h-20 sm:w-24 sm:h-24 bg-gray-100 rounded-lg flex items-center justify-center">
                    <span class="text-gray-500 text-xs text-center">Attachment</span>
                  </div>
                <% end %>
              </div>
              
              <!-- Image details and controls -->
              <div class="flex-grow min-w-0">
                <!-- Filename - truncated on mobile -->
                <p class="text-sm font-medium text-gray-700 mb-3 truncate" title="<%= image.filename %>">
                  <%= image.filename %>
                </p>
                
                <!-- Controls stacked on mobile, inline on larger screens -->
                <div class="space-y-3 sm:space-y-2">
                  <!-- Primary checkbox -->
                  <div class="flex items-center">
                    <input type="checkbox" 
                           name="service[images_attributes][<%= index %>][primary]" 
                           value="1" 
                           class="form-checkbox h-4 w-4 text-blue-600 primary-image-checkbox mr-3"
                           <%= 'checked' if image.primary %>
                           id="service_images_attributes_<%= index %>_primary" />
                    <label for="service_images_attributes_<%= index %>_primary" 
                           class="text-sm text-gray-700 font-medium">Primary Image</label>
                  </div>
                  
                  <!-- Remove button -->
                  <div>
                    <button type="button" 
                            class="inline-flex items-center px-3 py-2 text-sm font-medium text-red-600 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors delete-image-button cursor-pointer">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                      Remove Image
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    <% end %>
    
    <div class="bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-300 hover:border-gray-400 transition-colors">
      <%= form.label :images, "Add New Images", class: "block text-gray-700 text-sm font-bold mb-3" %>
      
      <!-- File upload area -->
      <div class="text-center">
        <!-- Hidden file input -->
        <%= form.file_field :images, multiple: true, 
              accept: "image/*",
              data: { 
                max_file_size: 15728640,  # 15MB in bytes
                max_files: 10 
              },
              class: "hidden",
              id: "service_images_input" %>
        
        <!-- Custom styled button with icon -->
        <button type="button" id="custom-file-button" 
                class="inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-primary text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
          Choose Files
        </button>
        
        <!-- File selection display -->
        <div id="file-selection-display" class="mt-3 text-sm text-gray-600 font-medium">
          No files selected
        </div>
      </div>
      
      <!-- Help text -->
      <div class="mt-4 p-3 bg-blue-50 rounded-md">
        <p class="text-sm text-blue-700">
          <strong>📸 Image Guidelines:</strong><br>
          • Formats: PNG, JPEG, GIF, WebP<br>
          • Max size: 15MB per file<br>
          • Max files: 10 images<br>
          • Recommended: Square images work best
        </p>
      </div>
    </div>
  </div>

  <%# TODO: Add input for availability_settings if needed %>

  <!-- Submit Button -->
  <div class="mt-8 border-t pt-6">
    <div class="flex justify-center">
      <%= form.submit(service.new_record? ? 'Create Service' : 'Update Service', 
            class: "inline-flex items-center justify-center px-6 py-3 bg-primary text-white font-bold rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer") %>
    </div>
  </div>
<% end %>

<%# Form behavior now handled by Stimulus controller %>
<script>
  function initializeServiceFormImageManagement() {
    // Image management functionality
    const existingImagesDiv = document.getElementById('existing-images');
    if (existingImagesDiv) {
      // Handle image deletion
      existingImagesDiv.addEventListener('click', function(event) {
        if (event.target.classList.contains('delete-image-button')) {
          event.preventDefault();
          
          const item = event.target.closest('.image-management-item');
          if (item) {
            // Find the hidden _destroy field and set its value to 1
            const destroyField = item.querySelector('.destroy-image');
            if (destroyField) {
              destroyField.value = '1';
              
              // Apply visual feedback to show it will be deleted
              item.style.opacity = '0.6';
              item.style.backgroundColor = '#FEF2F2';
              item.style.border = '1px solid #FCA5A5';
              
              // Update the button
              event.target.textContent = 'Marked for Deletion';
              event.target.className = 'text-gray-500 text-sm font-medium cursor-not-allowed';
              event.target.disabled = true;
              
              // Add visual indicator
              const indicator = document.createElement('span');
              indicator.className = 'ml-2 text-red-600 font-medium text-xs';
              indicator.textContent = '(Will be removed when saved)';
              event.target.parentNode.appendChild(indicator);
              
              // Also disable the primary checkbox if exists
              const primaryCheckbox = item.querySelector('.primary-image-checkbox');
              if (primaryCheckbox) {
                primaryCheckbox.disabled = true;
                primaryCheckbox.checked = false;
              }
            }
          }
        }
      });

      // Handle primary image selection (ensure only one is selected)
      existingImagesDiv.addEventListener('change', function(event) {
        if (event.target.classList.contains('primary-image-checkbox')) {
          if (event.target.checked) {
            // Uncheck all other primary checkboxes
            existingImagesDiv.querySelectorAll('.primary-image-checkbox').forEach(checkbox => {
              if (checkbox !== event.target) {
                checkbox.checked = false;
              }
            });
          }
        }
      });
    }
    
    // Handle custom file button click
    const customFileButton = document.getElementById('custom-file-button');
    const fileInput = document.getElementById('service_images_input');
    const fileSelectionDisplay = document.getElementById('file-selection-display');
    
    if (customFileButton && fileInput) {
      customFileButton.addEventListener('click', function() {
        fileInput.click();
      });
    }
    
    // Handle file input change to validate file types and show feedback
    if (fileInput) {
      fileInput.addEventListener('change', function(event) {
        const files = event.target.files;
        const maxSize = parseInt(fileInput.dataset.maxFileSize) || 15728640; // 15MB
        const maxFiles = parseInt(fileInput.dataset.maxFiles) || 10;
        
        if (files.length > maxFiles) {
          alert(`Maximum ${maxFiles} files allowed`);
          fileInput.value = '';
          fileSelectionDisplay.textContent = 'No files selected';
          return;
        }
        
        let validFiles = true;
        Array.from(files).forEach(file => {
          if (file.size > maxSize) {
            alert(`${file.name} is too large. Maximum size is 15MB.`);
            validFiles = false;
          }
          if (!file.type.startsWith('image/')) {
            alert(`${file.name} is not a valid image format.`);
            validFiles = false;
          }
        });
        
        if (!validFiles) {
          fileInput.value = '';
          fileSelectionDisplay.textContent = 'No files selected';
          return;
        }
        
        // Remove any existing feedback
        let existingFeedback = document.getElementById('file-selection-feedback');
        if (existingFeedback) {
          existingFeedback.remove();
        }
        
        if (files && files.length > 0) {
          // Validate file types
          const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
          const invalidFiles = [];
          const validFiles = [];
          
          for (let i = 0; i < files.length; i++) {
            const file = files[i];
            if (allowedTypes.includes(file.type)) {
              validFiles.push(file);
            } else {
              invalidFiles.push(file);
            }
          }
          
          if (invalidFiles.length > 0) {
            // Update button styling for error
            if (customFileButton) {
              customFileButton.className = 'inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-red-500 hover:bg-red-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 cursor-pointer';
            }
            
            // Update file selection display
            if (fileSelectionDisplay) {
              fileSelectionDisplay.className = 'mt-3 text-sm text-red-600 font-medium';
              fileSelectionDisplay.textContent = `Invalid file type(s): ${invalidFiles.map(f => f.name).join(', ')}`;
            }
            
            const feedback = document.createElement('div');
            feedback.id = 'file-selection-feedback';
            feedback.className = 'mt-2 text-sm text-red-600 font-medium';
            feedback.innerHTML = `❌ Only PNG and JPEG files are allowed.`;
            event.target.parentElement.appendChild(feedback);
            
            // Clear the input
            event.target.value = '';
            return;
          }
          
          if (validFiles.length > 0) {
            // Update button styling for success
            if (customFileButton) {
              customFileButton.className = 'inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-green-500 hover:bg-green-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 cursor-pointer';
            }
            
            // Update file selection display
            if (fileSelectionDisplay) {
              fileSelectionDisplay.className = 'mt-3 text-sm text-green-600 font-medium';
              fileSelectionDisplay.textContent = `${validFiles.length} file(s) selected: ${validFiles.map(f => f.name).join(', ')}`;
            }
            
            // Show success message
            const feedback = document.createElement('div');
            feedback.id = 'file-selection-feedback';
            feedback.className = 'mt-2 text-sm text-green-600 font-medium';
            event.target.parentElement.appendChild(feedback);
          }
        } else {
          // Reset styling if no files
          if (customFileButton) {
            customFileButton.className = 'inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer';
          }
          if (fileSelectionDisplay) {
            fileSelectionDisplay.className = 'mt-3 text-sm text-gray-600 font-medium';
            fileSelectionDisplay.textContent = 'No files selected';
          }
        }
      });
    }
  }
  
  // Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
  document.addEventListener('DOMContentLoaded', initializeServiceFormImageManagement);
  document.addEventListener('turbo:load', initializeServiceFormImageManagement);
</script>

 