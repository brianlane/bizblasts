<div class="container">
  <div class="panel">
    <div class="panel-header">
      <h1>Connect CalDAV Calendar (iCloud Available)</h1>
      <div class="panel-actions">
        <%= link_to business_manager_settings_calendar_integrations_path do %>
          ‚Üê Back to Calendar Integrations
        <% end %>
      </div>
    </div>

    <div class="panel-body">
      <div class="setup-intro">
        <p>Connect <strong><%= @staff_member.name %>'s</strong> CalDAV calendar to automatically sync bookings.</p>
      </div>

      <%= form_with model: [@staff_member.business, @calendar_connection], 
                    url: create_caldav_business_manager_settings_calendar_integrations_path,
                    local: true,
                    html: { id: 'caldav-form' } do |form| %>
        
        <%= form.hidden_field :staff_member_id, value: @staff_member.id %>
        
        <!-- Provider Selection -->
        <div class="form-group">
          <label class="form-label">Calendar Provider</label>
          <%= render 'shared/rich_dropdown',
                     collection: @caldav_providers.map { |p| OpenStruct.new(id: p[:id], name: p[:name], description: p[:description]) },
                     field_name: 'calendar_connection[caldav_provider]',
                     selected_value: @calendar_connection.caldav_provider,
                     prompt_text: 'Select your calendar provider...',
                     value_method: :id,
                     text_method: :name,
                     description_method: :description,
                     dropdown_id: 'caldav_provider_dropdown',
                     css_class: 'w-full' %>
        </div>
        
        <!-- Provider-specific instructions -->
        <% @caldav_providers.each do |provider| %>
          <div id="<%= provider[:id] %>-instructions" class="provider-instructions hidden">
            <div class="instructions-box">
              <h3><%= provider[:name] %> Setup Instructions</h3>
              <ol>
                <% provider[:setup_instructions].each do |instruction| %>
                  <li><%= instruction.html_safe %></li>
                <% end %>
              </ol>
            </div>
          </div>
        <% end %>
        
        <!-- Connection Details -->
        <div class="connection-fields">
          <div class="form-group">
            <%= form.label :caldav_username, "Username/Email", class: "form-label" %>
            <%= form.text_field :caldav_username, 
                                class: "form-input",
                                placeholder: "your-email@example.com",
                                required: true %>
          </div>
          
          <div class="form-group">
            <%= form.label :caldav_password, "Password", class: "form-label" %>
            <%= form.password_field :caldav_password, 
                                   class: "form-input",
                                   placeholder: "Your password or app-specific password",
                                   required: true %>
            <small class="form-help">
              For security, use app-specific passwords when available.
            </small>
          </div>
          
          <div class="form-group" id="server-url-field">
            <%= form.label :caldav_url, "Server URL", class: "form-label" %>
            <%= form.url_field :caldav_url, 
                              class: "form-input",
                              placeholder: "https://your-server.com/caldav/" %>
            <small class="form-help">
              Full URL to your CalDAV server (leave blank for iCloud)
            </small>
          </div>
        </div>
        
        <!-- Test Connection Button -->
        <div class="form-actions">
          <button type="button" id="test-connection-btn" class="btn btn-secondary" onclick="testConnection()">
            Test Connection
          </button>
          
          <%= form.submit "Connect Calendar", 
                         class: "btn btn-primary",
                         data: { disable_with: "Connecting..." } %>
        </div>
        
        <!-- Test Results -->
        <div id="test-results" class="test-results hidden"></div>
        
        <!-- Validation Errors -->
        <% if @calendar_connection.errors.any? %>
          <div class="error-messages">
            <h4>Please correct the following errors:</h4>
            <ul>
              <% @calendar_connection.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>
</div>

<style>
  /* Base styles */
  .container { max-width: 800px; margin: 0 auto; padding: 20px; }
  .panel { background: white; border: 1px solid #ddd; border-radius: 4px; overflow: hidden; box-shadow: 0 2px 3px rgba(0,0,0,0.1); }
  .panel-header { display: flex; justify-content: space-between; align-items: center; padding: 15px 20px; border-bottom: 1px solid #eee; }
  .panel-header h1 { font-size: 24px; margin: 0; }
  .panel-actions a { color: #0066cc; text-decoration: none; }
  .panel-actions a:hover { text-decoration: underline; }
  .panel-body { padding: 20px; }
  
  /* Form styles */
  .setup-intro { margin-bottom: 30px; }
  .setup-intro p { font-size: 16px; color: #666; }
  
  .form-group { margin-bottom: 20px; }
  .form-label { display: block; font-weight: 500; margin-bottom: 5px; color: #333; }
  .form-input, .form-select { 
    width: 100%; 
    padding: 10px 12px; 
    border: 1px solid #ddd; 
    border-radius: 4px; 
    font-size: 14px; 
    background: white;
  }
  .form-input:focus, .form-select:focus { 
    outline: none; 
    border-color: #0066cc; 
    box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.1); 
  }
  .form-help { display: block; font-size: 12px; color: #666; margin-top: 5px; }
  
  /* Provider instructions */
  .provider-instructions { margin-bottom: 20px; }
  .instructions-box { 
    background: #f8f9fa; 
    border: 1px solid #e9ecef; 
    border-radius: 4px; 
    padding: 15px; 
  }
  .instructions-box h3 { margin: 0 0 10px 0; font-size: 16px; color: #333; }
  .instructions-box ol { margin: 0; padding-left: 20px; }
  .instructions-box li { margin-bottom: 5px; font-size: 14px; }
  .instructions-box a { color: #0066cc; text-decoration: underline; }
  .instructions-box a:hover { color: #0052a3; }
  
  /* Form actions */
  .form-actions { 
    display: flex; 
    gap: 10px; 
    margin-top: 30px; 
    padding-top: 20px; 
    border-top: 1px solid #eee; 
  }
  
  /* Buttons */
  .btn { 
    padding: 10px 16px; 
    border: none; 
    border-radius: 4px; 
    cursor: pointer; 
    text-decoration: none; 
    font-size: 14px; 
    display: inline-block; 
    font-weight: 500;
  }
  .btn-primary { background: #0066cc; color: white; }
  .btn-primary:hover { background: #0052a3; }
  .btn-secondary { background: #6c757d; color: white; }
  .btn-secondary:hover { background: #545b62; }
  .btn:disabled { opacity: 0.6; cursor: not-allowed; }
  
  /* Test results */
  .test-results { 
    margin-top: 15px; 
    padding: 10px; 
    border-radius: 4px; 
    font-size: 14px; 
  }
  .test-results.success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
  .test-results.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
  
  /* Error messages */
  .error-messages { 
    background: #f8d7da; 
    color: #721c24; 
    border: 1px solid #f5c6cb; 
    border-radius: 4px; 
    padding: 15px; 
    margin-top: 20px; 
  }
  .error-messages h4 { margin: 0 0 10px 0; font-size: 16px; }
  .error-messages ul { margin: 0; padding-left: 20px; }
  .error-messages li { margin-bottom: 5px; }
  
  /* Utility classes */
  .hidden { display: none !important; }
  
  /* Responsive */
  @media (max-width: 768px) {
    .panel-header { flex-direction: column; align-items: flex-start; gap: 10px; }
    .form-actions { flex-direction: column; }
  }
</style>

<script>
  // Provider-specific configuration
  const providerConfigs = {
    icloud: {
      requires_url: false,
      url_placeholder: '',
      username_placeholder: 'your-email@icloud.com'
    },
    nextcloud: {
      requires_url: true,
      url_placeholder: 'https://your-nextcloud.com',
      username_placeholder: 'your-username'
    },
    generic: {
      requires_url: true,
      url_placeholder: 'https://caldav.server.com/path/',
      username_placeholder: 'your-email@provider.com'
    }
  };

  function updateCalDAVForm(providerId) {
    // Hide all instruction boxes
    document.querySelectorAll('.provider-instructions').forEach(el => {
      el.classList.add('hidden');
    });
    
    // Show selected provider instructions
    if (providerId) {
      const instructionsEl = document.getElementById(providerId + '-instructions');
      if (instructionsEl) {
        instructionsEl.classList.remove('hidden');
      }
      
      // Update form fields based on provider
      const config = providerConfigs[providerId];
      if (config) {
        const urlField = document.getElementById('calendar_connection_caldav_url');
        const serverUrlField = document.getElementById('server-url-field');
        const usernameField = document.getElementById('calendar_connection_caldav_username');
        
        if (urlField) {
          urlField.placeholder = config.url_placeholder;
          if (!config.requires_url) {
            urlField.value = '';
            serverUrlField.style.display = 'none';
          } else {
            serverUrlField.style.display = 'block';
          }
        }
        
        if (usernameField) {
          usernameField.placeholder = config.username_placeholder;
        }
      }
    }
  }

  function testConnection() {
    const testBtn = document.getElementById('test-connection-btn');
    const resultsDiv = document.getElementById('test-results');
    const form = document.getElementById('caldav-form');
    
    // Get form data
    const formData = new FormData(form);
    const username = formData.get('calendar_connection[caldav_username]');
    const password = formData.get('calendar_connection[caldav_password]');
    const url = formData.get('calendar_connection[caldav_url]');
    const providerType = formData.get('calendar_connection[caldav_provider]');
    
    // Validate required fields
    if (!username || !password) {
      showTestResult('Please enter username and password', false);
      return;
    }
    
    if (providerType !== 'icloud' && !url) {
      showTestResult('Please enter server URL', false);
      return;
    }
    
    // Disable button and show loading
    testBtn.disabled = true;
    testBtn.textContent = 'Testing...';
    showTestResult('Testing connection...', null);
    
    // Make test request
    fetch('<%= test_caldav_business_manager_settings_calendar_integrations_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      },
      body: JSON.stringify({
        username: username,
        password: password,
        url: url,
        provider_type: providerType
      })
    })
    .then(response => response.json())
    .then(data => {
      showTestResult(data.message, data.success);
    })
    .catch(error => {
      showTestResult('Connection test failed: ' + error.message, false);
    })
    .finally(() => {
      testBtn.disabled = false;
      testBtn.textContent = 'Test Connection';
    });
  }
  
  function showTestResult(message, success) {
    const resultsDiv = document.getElementById('test-results');
    resultsDiv.textContent = message;
    resultsDiv.className = 'test-results';
    
    if (success === true) {
      resultsDiv.classList.add('success');
    } else if (success === false) {
      resultsDiv.classList.add('error');
    }
    
    resultsDiv.classList.remove('hidden');
  }
  
  // Initialize form on page load and listen for dropdown changes
  function initializeCalDAVForm() {
    const hiddenField = document.getElementById('caldav_provider_dropdown_hidden');
    if (hiddenField) {
      // Initialize with current value
      if (hiddenField.value) {
        updateCalDAVForm(hiddenField.value);
      }
      
      // Listen for changes
      hiddenField.addEventListener('change', function() {
        updateCalDAVForm(this.value);
      });
    }
  }
  
  document.addEventListener('DOMContentLoaded', initializeCalDAVForm);
  document.addEventListener('turbo:load', initializeCalDAVForm);
  document.addEventListener('turbo:render', initializeCalDAVForm);
</script>