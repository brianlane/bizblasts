<%= form_with model: [:business_manager, :settings, location] do |form| %>
  <% if location.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(location.errors.count, "error") %> prohibited this location from being saved:</h2>

      <ul>
        <% location.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :name %>
    <%= form.text_field :name %>
  </div>

  <div class="field">
    <%= form.label :address %>
    <%= form.text_field :address %>
  </div>

  <div class="field">
    <%= form.label :city %>
    <%= form.text_field :city %>
  </div>

  <div class="field">
    <%= form.label :state %>
    <%= form.text_field :state %>
  </div>

  <div class="field">
    <%= form.label :zip %>
    <%= form.text_field :zip,
          pattern: "[0-9]{5}(-[0-9]{4})?",
          title: "Please enter a valid ZIP code (5 digits or 5+4 format, e.g., 12345 or 12345-6789)",
          maxlength: "10" %>
  </div>

  <%# Assuming hours is a JSON structure %>
  <div class="field">
    <%= form.label :hours %>
    <% 
      # Parse the hours value properly to avoid accumulating escape characters
      hours_value = if location.hours.is_a?(String)
                      # If it's already a string, use it directly
                      location.hours
                    elsif location.hours.is_a?(Hash) 
                      # If it's a hash, convert to JSON
                      location.hours.to_json
                    else
                      # Default empty object
                      '{}'
                    end
    %>
    <%= form.text_area :hours, value: hours_value, rows: 10, cols: 80 %>
  </div>
  
  <% if location == @current_business.default_location %>
    <div class="field mt-4">
      <%= check_box_tag :sync_to_business, '1', true %>
      <%= label_tag :sync_to_business, "Update business information with these changes" %>
      <p class="text-gray-500 text-xs">When checked, your business address and hours will be updated with this location's information.</p>
    </div>
  <% end %>

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>

<script type="text/javascript">
  // Enhanced form validation functions
  function validateField(input, isValid, errorMessage) {
    const existingError = input.parentElement.querySelector('.field-error');
    if (existingError) {
      existingError.remove();
    }

    if (!isValid) {
      input.style.borderColor = '#ef4444';
      
      const errorDiv = document.createElement('div');
      errorDiv.className = 'field-error';
      errorDiv.style.color = '#ef4444';
      errorDiv.style.fontSize = '12px';
      errorDiv.style.marginTop = '4px';
      errorDiv.textContent = errorMessage;
      input.parentElement.appendChild(errorDiv);
    } else {
      input.style.borderColor = '';
    }
  }

  function validateZip(zip) {
    const zipRegex = /^[0-9]{5}(-[0-9]{4})?$/;
    return zipRegex.test(zip);
  }

  // Add real-time validation listeners
  function initializeLocationsForm() {
    // ZIP code validation
    const zipFields = document.querySelectorAll('input[name*="[zip]"]');
    zipFields.forEach(field => {
      field.addEventListener('blur', function() {
        if (this.value) {
          const isValid = validateZip(this.value);
          validateField(this, isValid, 'Please enter a valid ZIP code (5 digits or 5+4 format)');
        }
      });
    });

    // ZIP code formatting
    zipFields.forEach(field => {
      field.addEventListener('input', function() {
        // Remove all non-digits and hyphens, then remove any hyphens that aren't in the right place
        let value = this.value.replace(/[^0-9-]/g, '').replace(/-+/g, '-');
        
        // Remove hyphens that aren't after exactly 5 digits
        value = value.replace(/^(\d{1,4})-/, '$1').replace(/(\d{5})-+(\d)/, '$1-$2');
        
        // If we have more than 5 digits without a hyphen, add one
        if (value.length > 5 && !value.includes('-')) {
          value = value.replace(/(\d{5})(\d+)/, '$1-$2');
        }
        
        // Limit to 10 characters max (12345-6789)
        if (value.length > 10) {
          value = value.substring(0, 10);
        }
        
        this.value = value;
      });
    });
  }

  // Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
  document.addEventListener('DOMContentLoaded', initializeLocationsForm);
  document.addEventListener('turbo:load', initializeLocationsForm);
</script> 