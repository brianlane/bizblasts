<%= form_with model: [:business_manager, @order], local: true do |f| %>
  <%= f.hidden_field :order_type, value: 'product' %>

  <!-- Customer Selection -->
  <div class="mb-4">
    <%= f.label :tenant_customer_id, 'Customer', class: 'block text-sm font-medium text-gray-700 mb-1' %>
    
    <!-- Custom Customer Dropdown -->
    <div class="customer-dropdown relative" 
         data-controller="customer-dropdown" 
         data-customer-dropdown-selected-value-value="<%= @order.tenant_customer_id %>">
              <button type="button" 
                class="customer-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px] flex items-center justify-between"
                data-customer-dropdown-target="button"
                data-action="click->customer-dropdown#toggle">
        <span class="customer-dropdown-text text-gray-900 flex-1">
          <% if @order.tenant_customer_id.present? %>
            <% if @order.tenant_customer_id == "new" %>
              Create new customer
            <% else %>
              <% customer = @customers.find { |c| c.id == @order.tenant_customer_id } %>
              <%= customer ? "#{customer.full_name} (#{customer.email})" : 'Select existing customer' %>
            <% end %>
          <% else %>
            Select existing customer
          <% end %>
        </span>
        <span class="flex items-center pl-2">
          <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </span>
      </button>
      
              <!-- Dropdown Menu -->
        <div class="customer-dropdown-menu absolute z-50 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
             data-customer-dropdown-target="menu">
        
                  <div class="customer-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
               data-item-id=""
               data-item-text="Select existing customer"
               data-customer-dropdown-target="option"
               data-action="click->customer-dropdown#select">
          <div class="flex items-center justify-between">
            <div class="flex-1">
              <div class="font-medium text-gray-500">Select existing customer</div>
            </div>
          </div>
          <% if @order.tenant_customer_id.blank? %>
            <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
            </span>
          <% end %>
        </div>
        
        <% @customers.each do |customer| %>
                      <div class="customer-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                 data-item-id="<%= customer.id %>"
                 data-item-text="<%= customer.full_name %> (<%= customer.email %>)"
                 data-customer-dropdown-target="option"
                 data-action="click->customer-dropdown#select">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="font-medium text-gray-900"><%= customer.full_name %></div>
                <% if customer.email.present? %>
                  <div class="text-sm text-gray-500 mt-1"><%= customer.email %></div>
                <% end %>
                <% if customer.phone.present? %>
                  <div class="text-xs text-gray-400 mt-1"><%= customer.phone %></div>
                <% end %>
              </div>
            </div>
            <% if @order.tenant_customer_id == customer.id %>
              <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                </svg>
              </span>
            <% end %>
          </div>
        <% end %>
        
                  <div class="customer-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors border-t border-gray-200"
               data-item-id="new"
               data-item-text="Create new customer"
               data-customer-dropdown-target="option"
               data-action="click->customer-dropdown#select">
          <div class="flex items-center justify-between">
            <div class="flex-1">
              <div class="font-medium text-blue-600">+ Create new customer</div>
            </div>
          </div>
          <% if @order.tenant_customer_id == "new" %>
            <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
            </span>
          <% end %>
        </div>
      </div>
    
    <!-- Hidden field to store the selected customer ID -->
    <%= f.hidden_field :tenant_customer_id, id: "order_tenant_customer_id", data: { customer_dropdown_target: "hidden" } %>
    
    <div id="new-customer-fields" class="hidden mb-4" data-customer-dropdown-target="newCustomerFields">
    <h3 class="text-lg font-medium mb-2">New Customer Details</h3>
    <div class="grid grid-cols-2 gap-4 mb-4">
      <div>
        <%= f.fields_for :tenant_customer do |cf| %>
          <%= cf.label :first_name, 'First Name', class: 'block text-sm font-medium text-gray-700 mb-1' %>
          <%= cf.text_field :first_name, placeholder: 'First Name', class: 'form-input rounded border px-3 py-2 w-full' %>
        <% end %>
      </div>
      <div>
        <%= f.fields_for :tenant_customer do |cf| %>
          <%= cf.label :last_name, 'Last Name', class: 'block text-sm font-medium text-gray-700 mb-1' %>
          <%= cf.text_field :last_name, placeholder: 'Last Name', class: 'form-input rounded border px-3 py-2 w-full' %>
        <% end %>
      </div>
    </div>
    <div class="mb-4">
      <%= f.fields_for :tenant_customer do |cf| %>
        <%= cf.label :email, 'Email', class: 'block text-sm font-medium text-gray-700 mb-1' %>
        <%= cf.email_field :email, placeholder: 'Customer Email', class: 'form-input rounded border px-3 py-2 w-full' %>
      <% end %>
    </div>
    <div class="mb-4">
      <%= f.fields_for :tenant_customer do |cf| %>
        <%= cf.label :phone, 'Phone', class: 'block text-sm font-medium text-gray-700 mb-1' %>
        <%= cf.telephone_field :phone, placeholder: 'Customer Phone', class: 'form-input rounded border px-3 py-2 w-full' %>
      <% end %>
    </div>
  </div>
  </div>

  <!-- Shipping and Tax -->
  <div id="shipping_tax_section" class="grid grid-cols-2 gap-4 mb-4 product-dependent">
    <div>
      <%= f.label :shipping_method_id, 'Shipping Method', class: 'block text-sm font-medium text-gray-700 mb-1' %>
      
      <!-- Custom Shipping Method Dropdown -->
      <div class="shipping-dropdown relative">
        <button type="button" 
                class="shipping-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                data-shipping-dropdown-target="button">
          <span class="shipping-dropdown-text text-gray-900">
            <% if @order.shipping_method_id.present? %>
              <% shipping_method = @shipping_methods.find { |sm| sm.id == @order.shipping_method_id } %>
              <%= shipping_method&.name || 'Select shipping' %>
            <% else %>
              Select shipping
            <% end %>
          </span>
          <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
            <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
          </span>
        </button>
        
        <!-- Dropdown Menu -->
        <div class="shipping-dropdown-menu absolute z-50 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
             data-shipping-dropdown-target="menu">
          
          <div class="shipping-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
               data-shipping-id=""
               data-shipping-name="Select shipping"
               data-shipping-dropdown-target="option">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="font-medium text-gray-500">Select shipping</div>
              </div>
            </div>
            <% if @order.shipping_method_id.blank? %>
              <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                </svg>
              </span>
            <% end %>
          </div>
          
          <% @shipping_methods.each do |shipping_method| %>
            <div class="shipping-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                 data-shipping-id="<%= shipping_method.id %>"
                 data-shipping-name="<%= shipping_method.name %>"
                 data-shipping-dropdown-target="option">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <div class="font-medium text-gray-900"><%= shipping_method.name %></div>
                  <% if shipping_method.respond_to?(:cost) && shipping_method.cost.present? %>
                    <div class="text-sm text-gray-500 mt-1"><%= number_to_currency(shipping_method.cost) %></div>
                  <% end %>
                </div>
              </div>
              <% if @order.shipping_method_id == shipping_method.id %>
                <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                  </svg>
                </span>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
      
      <!-- Hidden field to store the selected shipping method ID -->
      <%= f.hidden_field :shipping_method_id, id: "order_shipping_method_id" %>
    </div>
    <div>
      <%= f.label :tax_rate_id, 'Tax Rate', class: 'block text-sm font-medium text-gray-700 mb-1' %>
      
      <!-- Custom Tax Rate Dropdown -->
      <div class="tax-dropdown relative">
        <button type="button" 
                class="tax-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                data-tax-dropdown-target="button">
          <span class="tax-dropdown-text text-gray-900">
            <% if @order.tax_rate_id.present? %>
              <% tax_rate = @tax_rates.find { |tr| tr.id == @order.tax_rate_id } %>
              <%= tax_rate&.name || 'Select tax rate' %>
            <% else %>
              Select tax rate
            <% end %>
          </span>
          <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
            <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
          </span>
        </button>
        
        <!-- Dropdown Menu -->
        <div class="tax-dropdown-menu absolute z-50 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
             data-tax-dropdown-target="menu">
          
          <div class="tax-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
               data-tax-id=""
               data-tax-name="Select tax rate"
               data-tax-dropdown-target="option">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="font-medium text-gray-500">Select tax rate</div>
              </div>
            </div>
            <% if @order.tax_rate_id.blank? %>
              <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                </svg>
              </span>
            <% end %>
          </div>
          
          <% @tax_rates.each do |tax_rate| %>
            <div class="tax-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                 data-tax-id="<%= tax_rate.id %>"
                 data-tax-name="<%= tax_rate.name %>"
                 data-tax-dropdown-target="option">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <div class="font-medium text-gray-900"><%= tax_rate.name %></div>
                  <% if tax_rate.respond_to?(:rate) && tax_rate.rate.present? %>
                    <div class="text-sm text-gray-500 mt-1"><%= number_to_percentage(tax_rate.rate * 100, precision: 2) %></div>
                  <% end %>
                </div>
              </div>
              <% if @order.tax_rate_id == tax_rate.id %>
                <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                  </svg>
                </span>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
      
      <!-- Hidden field to store the selected tax rate ID -->
      <%= f.hidden_field :tax_rate_id, id: "order_tax_rate_id" %>
    </div>
  </div>

  <!-- Addresses and Notes -->
  <div id="shipping_address_section" class="mb-4 product-dependent">
    <%= f.label :shipping_address, 'Shipping Address', class: 'block text-sm font-medium text-gray-700 mb-1' %>
    <%= f.text_area :shipping_address, rows: 3, class: 'form-textarea rounded border px-3 py-2 w-full' %>
  </div>
  <div class="mb-4">
    <%= f.label :billing_address, 'Billing Address', class: 'block text-sm font-medium text-gray-700 mb-1' %>
    <%= f.text_area :billing_address, rows: 3, class: 'form-textarea rounded border px-3 py-2 w-full' %>
  </div>
  <div class="mb-4">
    <%= f.label :notes, 'Notes', class: 'block text-sm font-medium text-gray-700 mb-1' %>
    <%= f.text_area :notes, rows: 3, placeholder: 'Add any special instructions', class: 'form-textarea rounded border px-3 py-2 w-full' %>
  </div>

  <!-- Product Line Items -->
  <h3 class="text-lg font-bold mb-2">Products</h3>
  <button type="button" id="add-product-btn" class="mb-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded cursor-pointer">
    Add Product
  </button>
  <div class="overflow-x-auto mb-4 -mx-4 px-4 sm:mx-0 sm:px-0">
    <table class="min-w-full whitespace-nowrap" id="line-items-table">
    <thead>
      <tr>
        <th class="border px-4 py-2 min-w-[200px]">Product Variant</th>
        <th class="border px-4 py-2 min-w-[100px]">Quantity</th>
        <th class="border px-4 py-2 min-w-[80px]">Price</th>
        <th class="border px-4 py-2 min-w-[80px]">Total</th>
        <th class="border px-4 py-2 min-w-[100px]">Actions</th>
      </tr>
    </thead>
    <tbody>
      <% @order.line_items.reject(&:marked_for_destruction?).select(&:product?).each_with_index do |item, index| %>
        <tr data-index="<%= index %>">
          <td class="border px-4 py-2 min-w-[200px]">
            <div class="rich-dropdown relative" id="product_dropdown_<%= index %>">
              <button type="button" 
                      class="rich-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                      data-dropdown-target="button">
                <span class="rich-dropdown-text text-gray-900">
                  <% if item.product_variant_id.present? %>
                    <% variant = @product_variants.find { |v| v.id == item.product_variant_id } %>
                    <%= variant ? "#{variant.product.name} - #{variant.name}" : 'Select Variant' %>
                  <% else %>
                    Select Variant
                  <% end %>
                </span>
                <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                  <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                  </svg>
                </span>
              </button>
              
              <div class="rich-dropdown-menu absolute z-50 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
                   data-dropdown-target="menu">
                <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                     data-item-id=""
                     data-item-text="Select Variant"
                     data-item-price="0"
                     data-dropdown-target="option">
                  <div class="flex items-center justify-between">
                    <div class="flex-1">
                      <div class="font-medium text-gray-500">Select Variant</div>
                    </div>
                  </div>
                  <% if item.product_variant_id.blank? %>
                    <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                      </svg>
                    </span>
                  <% end %>
                </div>
                
                <% @product_variants.each do |variant| %>
                  <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                       data-item-id="<%= variant.id %>"
                       data-item-text="<%= variant.product.name %> - <%= variant.name %>"
                       data-item-price="<%= variant.final_price %>"
                       data-dropdown-target="option">
                    <div class="flex items-center justify-between">
                      <div class="flex-1">
                        <div class="font-medium text-gray-900"><%= variant.product.name %> - <%= variant.name %></div>
                      </div>
                      <div class="ml-3 text-right">
                        <div class="text-sm font-medium text-blue-600"><%= number_to_currency(variant.final_price) %></div>
                      </div>
                    </div>
                    <% if item.product_variant_id == variant.id %>
                      <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                        </svg>
                      </span>
                    <% end %>
                  </div>
                <% end %>
              </div>
              
              <input type="hidden" name="order[line_items_attributes][<%= index %>][product_variant_id]" class="product-select" value="<%= item.product_variant_id %>" data-price="<%= item.price %>" />
            </div>
            <input type="hidden" name="order[line_items_attributes][<%= index %>][id]" value="<%= item.id %>" />
          </td>
          <td class="border px-4 py-2 min-w-[100px]">
            <input type="number" name="order[line_items_attributes][<%= index %>][quantity]" value="<%= item.quantity %>" min="1" class="form-input rounded border px-3 py-2 w-full qty-input" />
          </td>
          <td class="border px-4 py-2 min-w-[80px]">
            <span class="price-display"><%= number_to_currency(item.price) %></span>
            <input type="hidden" name="order[line_items_attributes][<%= index %>][price]" class="price-input" value="<%= item.price %>" />
          </td>
          <td class="border px-4 py-2 min-w-[80px]">
            <span class="total-display"><%= number_to_currency(item.total_amount) %></span>
            <input type="hidden" name="order[line_items_attributes][<%= index %>][total_amount]" class="total-input" value="<%= item.total_amount %>" />
          </td>
          <td class="border px-4 py-2 min-w-[100px]">
            <input type="hidden" name="order[line_items_attributes][<%= index %>][_destroy]" class="destroy-input" value="false" />
            <button type="button" class="remove-product-btn bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded cursor-pointer">Remove</button>
          </td>
        </tr>
      <% end %>
    </tbody>
    </table>
  </div>

  <!-- Service Line Items -->
  <% product_count = @order.line_items.reject(&:marked_for_destruction?).select(&:product?).size %>
  <h3 class="text-lg font-bold mb-2">Services</h3>
  <button type="button" id="add-service-btn" class="mb-4 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded cursor-pointer">
    Add Service
  </button>
  <div class="overflow-x-auto mb-4 -mx-4 px-4 sm:mx-0 sm:px-0">
    <table class="min-w-full whitespace-nowrap" id="service-line-items-table">
    <thead>
      <tr>
        <th class="border px-4 py-2 min-w-[150px]">Service</th>
        <th class="border px-4 py-2 min-w-[150px]">Staff Member</th>
        <th class="border px-4 py-2 min-w-[100px]">Quantity</th>
        <th class="border px-4 py-2 min-w-[80px]">Price</th>
        <th class="border px-4 py-2 min-w-[80px]">Total</th>
        <th class="border px-4 py-2 min-w-[100px]">Actions</th>
      </tr>
    </thead>
    <tbody>
      <% @order.line_items.reject(&:marked_for_destruction?).select(&:service?).each_with_index do |item, idx| %>
        <% index = idx + product_count %>
        <tr data-index="<%= index %>">
          <td class="border px-4 py-2 min-w-[150px]">
            <div class="rich-dropdown relative" id="service_dropdown_<%= index %>">
              <button type="button" 
                      class="rich-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                      data-dropdown-target="button">
                <span class="rich-dropdown-text text-gray-900">
                  <% if item.service_id.present? %>
                    <% service = @services.find { |s| s.id == item.service_id } %>
                    <% if service %>
                      <% if service.service_variants.active.any? %>
                        <% variant_match = service.service_variants.find { |v| v.price.to_f == item.price.to_f } %>
                        <%= variant_match ? "#{service.name} - #{variant_match.name} (#{variant_match.duration}m)" : "#{service.name} (#{service.duration}m)" %>
                      <% else %>
                        <%= "#{service.name} (#{service.duration}m)" %>
                      <% end %>
                    <% else %>
                      Select Service
                    <% end %>
                  <% else %>
                    Select Service
                  <% end %>
                </span>
                <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                  <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                  </svg>
                </span>
              </button>
              
              <div class="rich-dropdown-menu absolute z-50 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
                   data-dropdown-target="menu">
                <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                     data-item-id=""
                     data-item-text="Select Service"
                     data-item-price="0"
                     data-dropdown-target="option">
                  <div class="flex items-center justify-between">
                    <div class="flex-1">
                      <div class="font-medium text-gray-500">Select Service</div>
                    </div>
                  </div>
                  <% if item.service_id.blank? %>
                    <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                      </svg>
                    </span>
                  <% end %>
                </div>
                
                <% @services.each do |service| %>
                  <% variants = service.service_variants.active %>
                  <% if variants.any? %>
                    <% variants.each do |variant| %>
                      <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                           data-item-id="<%= service.id %>"
                           data-item-text="<%= "#{service.name} - #{variant.name} (#{variant.duration}m)" %>"
                           data-item-price="<%= variant.price %>"
                           data-dropdown-target="option">
                        <div class="flex items-center justify-between">
                          <div class="flex-1">
                            <div class="font-medium text-gray-900"><%= service.name %> - <%= variant.name %></div>
                            <div class="text-sm text-gray-500"><%= variant.duration %> minutes</div>
                          </div>
                          <div class="ml-3 text-right">
                            <div class="text-sm font-medium text-blue-600"><%= number_to_currency(variant.price) %></div>
                          </div>
                        </div>
                      </div>
                    <% end %>
                  <% else %>
                    <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                         data-item-id="<%= service.id %>"
                         data-item-text="<%= "#{service.name} (#{service.duration}m)" %>"
                         data-item-price="<%= service.price %>"
                         data-dropdown-target="option">
                      <div class="flex items-center justify-between">
                        <div class="flex-1">
                          <div class="font-medium text-gray-900"><%= service.name %></div>
                          <div class="text-sm text-gray-500"><%= service.duration %> minutes</div>
                        </div>
                        <div class="ml-3 text-right">
                          <div class="text-sm font-medium text-blue-600"><%= number_to_currency(service.price) %></div>
                        </div>
                      </div>
                    </div>
                  <% end %>
                <% end %>
              </div>
              
              <input type="hidden" name="order[line_items_attributes][<%= index %>][service_id]" class="service-select" value="<%= item.service_id %>" data-price="<%= item.price %>" />
            </div>
            <input type="hidden" name="order[line_items_attributes][<%= index %>][id]" value="<%= item.id %>" />
          </td>
          <td class="border px-4 py-2 min-w-[150px]">
            <div class="rich-dropdown relative" id="staff_dropdown_<%= index %>">
              <button type="button" 
                      class="rich-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                      data-dropdown-target="button">
                <span class="rich-dropdown-text text-gray-900">
                  <% if item.staff_member_id.present? %>
                    <% staff_member = @staff_members.find { |sm| sm.id == item.staff_member_id } %>
                    <%= staff_member ? staff_member.name : 'Select Staff' %>
                  <% else %>
                    Select Staff
                  <% end %>
                </span>
                <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                  <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                  </svg>
                </span>
              </button>
              
              <div class="rich-dropdown-menu absolute z-50 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
                   data-dropdown-target="menu">
                <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                     data-item-id=""
                     data-item-text="Select Staff"
                     data-dropdown-target="option">
                  <div class="flex items-center justify-between">
                    <div class="flex-1">
                      <div class="font-medium text-gray-500">Select Staff</div>
                    </div>
                  </div>
                  <% if item.staff_member_id.blank? %>
                    <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                      </svg>
                    </span>
                  <% end %>
                </div>
                
                <% @staff_members.each do |sm| %>
                  <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                       data-item-id="<%= sm.id %>"
                       data-item-text="<%= sm.name %>"
                       data-dropdown-target="option">
                    <div class="flex items-center justify-between">
                      <div class="flex-1">
                        <div class="font-medium text-gray-900"><%= sm.name %></div>
                        <% if sm.email.present? %>
                          <div class="text-sm text-gray-500"><%= sm.email %></div>
                        <% end %>
                      </div>
                    </div>
                    <% if item.staff_member_id == sm.id %>
                      <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                        </svg>
                      </span>
                    <% end %>
                  </div>
                <% end %>
              </div>
              
              <input type="hidden" name="order[line_items_attributes][<%= index %>][staff_member_id]" class="staff-select" value="<%= item.staff_member_id %>" />
            </div>
          </td>
          <td class="border px-4 py-2 min-w-[100px]">
            <input type="number" name="order[line_items_attributes][<%= index %>][quantity]" value="<%= item.quantity %>" min="1" class="form-input rounded border px-3 py-2 w-full qty-input" />
          </td>
          <td class="border px-4 py-2 min-w-[80px]">
            <span class="price-display"><%= number_to_currency(item.price) %></span>
            <input type="hidden" name="order[line_items_attributes][<%= index %>][price]" class="price-input" value="<%= item.price %>" />
          </td>
          <td class="border px-4 py-2 min-w-[80px]">
            <span class="total-display"><%= number_to_currency(item.total_amount) %></span>
            <input type="hidden" name="order[line_items_attributes][<%= index %>][total_amount]" class="total-input" value="<%= item.total_amount %>" />
          </td>
          <td class="border px-4 py-2 min-w-[100px]">
            <input type="hidden" name="order[line_items_attributes][<%= index %>][_destroy]" class="destroy-input" value="false" />
            <button type="button" class="remove-service-btn bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded cursor-pointer">Remove</button>
          </td>
        </tr>
      <% end %>
          <tfoot>
      <tr>
        <td colspan="3" class="text-right font-bold px-4 py-2">Order Total:</td>
        <td class="font-bold px-4 py-2"><span id="order-total"><%= number_to_currency(@order.total_amount || 0) %></span></td>
        <td></td>
      </tr>
    </tfoot>
    </tbody>
    </table>
  </div>

  <%= f.submit (@order.new_record? ? 'Create Order' : 'Update Order'), class: 'bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded cursor-pointer' %>
<% end %>

<template id="line-item-template">
  <tr data-index="NEW_INDEX">
    <td class="border px-4 py-2 min-w-[200px]">
      <div class="rich-dropdown relative" id="product_dropdown_NEW_INDEX">
        <button type="button" 
                class="rich-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                data-dropdown-target="button">
          <span class="rich-dropdown-text text-gray-900">Select Variant</span>
          <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
            <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
          </span>
        </button>
        
        <div class="rich-dropdown-menu absolute z-50 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
             data-dropdown-target="menu">
          <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
               data-item-id=""
               data-item-text="Select Variant"
               data-item-price="0"
               data-dropdown-target="option">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="font-medium text-gray-500">Select Variant</div>
              </div>
            </div>
            <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
            </span>
          </div>
          
          <% @product_variants.each do |variant| %>
            <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                 data-item-id="<%= variant.id %>"
                 data-item-text="<%= variant.product.name %> - <%= variant.name %>"
                 data-item-price="<%= variant.final_price %>"
                 data-dropdown-target="option">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <div class="font-medium text-gray-900"><%= variant.product.name %> - <%= variant.name %></div>
                </div>
                <div class="ml-3 text-right">
                  <div class="text-sm font-medium text-blue-600"><%= number_to_currency(variant.final_price) %></div>
                </div>
              </div>
            </div>
          <% end %>
        </div>
        
        <input type="hidden" name="order[line_items_attributes][NEW_INDEX][product_variant_id]" class="product-select" value="" />
      </div>
    </td>
    <td class="border px-4 py-2 min-w-[100px]">
      <input type="number" name="order[line_items_attributes][NEW_INDEX][quantity]" value="1" min="1" class="form-input rounded border px-3 py-2 w-full qty-input" />
    </td>
    <td class="border px-4 py-2 min-w-[80px]">
      <span class="price-display">$0.00</span>
      <input type="hidden" name="order[line_items_attributes][NEW_INDEX][price]" class="price-input" value="0.00" />
    </td>
    <td class="border px-4 py-2 min-w-[80px]">
      <span class="total-display">$0.00</span>
      <input type="hidden" name="order[line_items_attributes][NEW_INDEX][total_amount]" class="total-input" value="0.00" />
    </td>
    <td class="border px-4 py-2 min-w-[100px]">
      <input type="hidden" name="order[line_items_attributes][NEW_INDEX][_destroy]" class="destroy-input" value="false" />
      <button type="button" class="remove-product-btn bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded cursor-pointer">Remove</button>
    </td>
  </tr>
</template>

<template id="service-line-item-template">
  <tr data-index="NEW_INDEX">
    <td class="border px-4 py-2 min-w-[150px]">
      <div class="rich-dropdown relative" id="service_dropdown_NEW_INDEX">
        <button type="button" 
                class="rich-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                data-dropdown-target="button">
          <span class="rich-dropdown-text text-gray-900">Select Service</span>
          <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
            <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
          </span>
        </button>
        
        <div class="rich-dropdown-menu absolute z-50 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
             data-dropdown-target="menu">
          <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
               data-item-id=""
               data-item-text="Select Service"
               data-item-price="0"
               data-dropdown-target="option">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="font-medium text-gray-500">Select Service</div>
              </div>
            </div>
            <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
            </span>
          </div>
          
          <% @services.each do |service| %>
            <% variants = service.service_variants.active %>
            <% if variants.any? %>
              <% variants.each do |variant| %>
                <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                     data-item-id="<%= service.id %>"
                     data-item-text="<%= "#{service.name} - #{variant.name} (#{variant.duration}m)" %>"
                     data-item-price="<%= variant.price %>"
                     data-dropdown-target="option">
                  <div class="flex items-center justify-between">
                    <div class="flex-1">
                      <div class="font-medium text-gray-900"><%= service.name %> - <%= variant.name %></div>
                      <div class="text-sm text-gray-500"><%= variant.duration %> minutes</div>
                    </div>
                    <div class="ml-3 text-right">
                      <div class="text-sm font-medium text-blue-600"><%= number_to_currency(variant.price) %></div>
                    </div>
                  </div>
                </div>
              <% end %>
            <% else %>
              <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                   data-item-id="<%= service.id %>"
                   data-item-text="<%= "#{service.name} (#{service.duration}m)" %>"
                   data-item-price="<%= service.price %>"
                   data-dropdown-target="option">
                <div class="flex items-center justify-between">
                  <div class="flex-1">
                    <div class="font-medium text-gray-900"><%= service.name %></div>
                    <div class="text-sm text-gray-500"><%= service.duration %> minutes</div>
                  </div>
                  <div class="ml-3 text-right">
                    <div class="text-sm font-medium text-blue-600"><%= number_to_currency(service.price) %></div>
                  </div>
                </div>
              </div>
            <% end %>
          <% end %>
        </div>
        
        <input type="hidden" name="order[line_items_attributes][NEW_INDEX][service_id]" class="service-select" value="" />
      </div>
    </td>
    <td class="border px-4 py-2 min-w-[150px]">
      <div class="rich-dropdown relative" id="staff_dropdown_NEW_INDEX">
        <button type="button" 
                class="rich-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                data-dropdown-target="button">
          <span class="rich-dropdown-text text-gray-900">Select Staff</span>
          <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
            <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
          </span>
        </button>
        
        <div class="rich-dropdown-menu absolute z-50 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
             data-dropdown-target="menu">
          <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
               data-item-id=""
               data-item-text="Select Staff"
               data-dropdown-target="option">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="font-medium text-gray-500">Select Staff</div>
              </div>
            </div>
            <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
              <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
            </span>
          </div>
          
          <% @staff_members.each do |sm| %>
            <div class="rich-dropdown-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                 data-item-id="<%= sm.id %>"
                 data-item-text="<%= sm.name %>"
                 data-dropdown-target="option">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <div class="font-medium text-gray-900"><%= sm.name %></div>
                  <% if sm.email.present? %>
                    <div class="text-sm text-gray-500"><%= sm.email %></div>
                  <% end %>
                </div>
              </div>
            </div>
          <% end %>
        </div>
        
        <input type="hidden" name="order[line_items_attributes][NEW_INDEX][staff_member_id]" class="staff-select" value="" />
      </div>
    </td>
    <td class="border px-4 py-2 min-w-[100px]">
      <input type="number" name="order[line_items_attributes][NEW_INDEX][quantity]" value="1" min="1" class="form-input rounded border px-3 py-2 w-full qty-input" />
    </td>
    <td class="border px-4 py-2 min-w-[80px]">
      <span class="price-display">$0.00</span>
      <input type="hidden" name="order[line_items_attributes][NEW_INDEX][price]" class="price-input" value="0.00" />
    </td>
    <td class="border px-4 py-2 min-w-[80px]">
      <span class="total-display">$0.00</span>
      <input type="hidden" name="order[line_items_attributes][NEW_INDEX][total_amount]" class="total-input" value="0.00" />
    </td>
    <td class="border px-4 py-2 min-w-[100px]">
      <input type="hidden" name="order[line_items_attributes][NEW_INDEX][_destroy]" class="destroy-input" value="false" />
      <button type="button" class="remove-service-btn bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded cursor-pointer">Remove</button>
    </td>
  </tr>
</template>

<script>
// Dynamic order form behavior
(function() {
  let productLineItemsInitialized = false;
  function initializeProductLineItems() {
    if (productLineItemsInitialized) return; // avoid duplicate bindings (Turbo + DOMContentLoaded)
    productLineItemsInitialized = true;
    // Customer form handling now done by custom dropdown JavaScript below
    // if (window.CustomerFormHelper) {
    //   CustomerFormHelper.initializeOrderForm();
    // }

    // Line-items dynamic behavior
    const addBtn = document.getElementById('add-product-btn');
    const tableBody = document.querySelector('#line-items-table tbody');
    const template = document.getElementById('line-item-template');
    const orderTotalDisplay = document.getElementById('order-total');
    // Initialize next rowIndex to avoid collision with service rows
    let rowIndex = document.querySelectorAll('#line-items-table tbody tr, #service-line-items-table tbody tr').length;

    // Recalculate overall order total
    function recalcOrderTotal() {
      let total = 0;
      // Sum totals from both product and service line-item tables
      document.querySelectorAll('#line-items-table tbody tr, #service-line-items-table tbody tr').forEach(function(row) {
        const destroyInput = row.querySelector('.destroy-input');
        if (destroyInput && destroyInput.value === 'true') return;
        const totalInput = row.querySelector('.total-input');
        total += parseFloat(totalInput.value) || 0;
      });
      if (orderTotalDisplay) {
        orderTotalDisplay.textContent = '$' + total.toFixed(2);
      }
      // Show/hide product table header
      const prodHead = document.querySelector('#line-items-table thead');
      const prodRows = Array.from(document.querySelectorAll('#line-items-table tbody tr')).filter(row => {
        const d = row.querySelector('.destroy-input');
        return !d || d.value !== 'true';
      });
      if (prodHead) prodHead.style.display = prodRows.length > 0 ? '' : 'none';

      // Show/hide service table header
      const svcHead = document.querySelector('#service-line-items-table thead');
      const svcRows = Array.from(document.querySelectorAll('#service-line-items-table tbody tr')).filter(row => {
        const d = row.querySelector('.destroy-input');
        return !d || d.value !== 'true';
      });
      if (svcHead) svcHead.style.display = svcRows.length > 0 ? '' : 'none';
      // Toggle shipping/tax/address visibility
      document.querySelectorAll('.product-dependent').forEach(el => {
        el.style.display = prodRows.length > 0 ? '' : 'none';
      });
    }
    // Expose globally so service script can call it
    window.recalcOrderTotal = recalcOrderTotal;

    // Bind events for price/quantity change and removal
    function bindRowEvents(row) {
      const productSelect = row.querySelector('.product-select');
      const qtyInput = row.querySelector('.qty-input');
      const removeBtn = row.querySelector('.remove-product-btn');

      function updateRow() {
        const price = parseFloat(productSelect.dataset.price) || 0;
        const priceInput = row.querySelector('.price-input');
        const priceDisplay = row.querySelector('.price-display');
        priceInput.value = price.toFixed(2);
        priceDisplay.textContent = '$' + price.toFixed(2);

        const quantity = parseInt(qtyInput.value) || 0;
        const total = price * quantity;
        const totalInput = row.querySelector('.total-input');
        const totalDisplay = row.querySelector('.total-display');
        totalInput.value = total.toFixed(2);
        totalDisplay.textContent = '$' + total.toFixed(2);

        recalcOrderTotal();
      }

      if (productSelect) productSelect.addEventListener('change', updateRow);
      if (qtyInput) qtyInput.addEventListener('input', updateRow);
      if (removeBtn) {
        removeBtn.addEventListener('click', function(e) {
          e.preventDefault();
          const destroyInput = row.querySelector('.destroy-input');
          if (destroyInput) destroyInput.value = 'true';
          row.style.display = 'none';
          recalcOrderTotal();
        });
      }
      
      // Initialize rich dropdown for this row
      initializeRichDropdown(row);
    }

    // Initialize existing rows
    if (tableBody) {
      tableBody.querySelectorAll('tr').forEach(bindRowEvents);
    }

    // Handle adding new rows
    if (addBtn && tableBody && template) {
      addBtn.addEventListener('click', function() {
        const clone = document.importNode(template.content, true);
        let html = clone.firstElementChild.outerHTML.replace(/NEW_INDEX/g, rowIndex);
        const temp = document.createElement('tbody');
        temp.innerHTML = html;
        const newRow = temp.firstElementChild;
        tableBody.appendChild(newRow);
        bindRowEvents(newRow);
        rowIndex++;
        // After adding a product row, recalc and toggle headers
        recalcOrderTotal();
      });
    }

    // Initial total calculation
    recalcOrderTotal();
  }

  // Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
  document.addEventListener('DOMContentLoaded', initializeProductLineItems);
  document.addEventListener('turbo:load', initializeProductLineItems);
})();

// Extend dynamic form behavior to service rows
let serviceLineItemsInitialized = false;
function initializeServiceLineItems() {
  if (serviceLineItemsInitialized) return; // avoid duplicate bindings
  serviceLineItemsInitialized = true;
  const addSvcBtn = document.getElementById('add-service-btn');
  const svcTable = document.getElementById('service-line-items-table');
  const svcBody = svcTable.querySelector('tbody');
  const svcTpl = document.getElementById('service-line-item-template');

  if (!addSvcBtn || !svcBody || !svcTpl) return;

  addSvcBtn.addEventListener('click', () => {
    const clone = document.importNode(svcTpl.content, true);
    // Calculate next index based on existing product and service rows
    const currentIndex = document.querySelectorAll('#line-items-table tbody tr, #service-line-items-table tbody tr').length;
    let html = clone.firstElementChild.outerHTML.replace(/NEW_INDEX/g, currentIndex);
    const temp = document.createElement('tbody');
    temp.innerHTML = html;
    const newRow = temp.firstElementChild;
    svcBody.appendChild(newRow);
    bindSvcRow(newRow);
    // After adding a service row, recalc and toggle headers
    window.recalcOrderTotal();
  });

  // Bind events for each service row
  function bindSvcRow(row) {
    const svcSelect = row.querySelector('.service-select');
    const staffSelect = row.querySelector('.staff-select');
    const qtyInput = row.querySelector('.qty-input');
    const removeBtn = row.querySelector('.remove-service-btn');

    function updateSvcRow() {
      const price = parseFloat(svcSelect.dataset.price) || 0;
      const priceInput = row.querySelector('.price-input');
      const priceDisplay = row.querySelector('.price-display');
      priceInput.value = price.toFixed(2);
      priceDisplay.textContent = '$' + price.toFixed(2);

      const qty = parseInt(qtyInput.value) || 0;
      const total = price * qty;
      const totalInput = row.querySelector('.total-input');
      const totalDisplay = row.querySelector('.total-display');
      totalInput.value = total.toFixed(2);
      totalDisplay.textContent = '$' + total.toFixed(2);

      // Update the shared order total
      recalcOrderTotal();
    }

    if (svcSelect) svcSelect.addEventListener('change', updateSvcRow);
    if (qtyInput) qtyInput.addEventListener('input', updateSvcRow);
    if (removeBtn) removeBtn.addEventListener('click', function(e) {
      e.preventDefault();
      const dest = row.querySelector('.destroy-input');
      dest.value = 'true';
      row.style.display = 'none';
      recalcOrderTotal();
    });
    
    // Initialize rich dropdown for this service row
    initializeRichDropdown(row);
  }

  // Initialize existing service rows
  svcBody.querySelectorAll('tr').forEach(bindSvcRow);
}

// Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
document.addEventListener('DOMContentLoaded', initializeServiceLineItems);
document.addEventListener('turbo:load', initializeServiceLineItems);

// Rich Dropdown Functionality for Order Form Line Items
function initializeRichDropdown(container) {
  if (!container) return;
  
  const dropdowns = container.querySelectorAll('.rich-dropdown');
  
  dropdowns.forEach(dropdown => {
    const button = dropdown.querySelector('[data-dropdown-target="button"]');
    const menu = dropdown.querySelector('[data-dropdown-target="menu"]');
    const options = dropdown.querySelectorAll('[data-dropdown-target="option"]');
    const text = dropdown.querySelector('.rich-dropdown-text');
    const arrow = dropdown.querySelector('svg');
    const hiddenInput = dropdown.querySelector('input[type="hidden"]');
    
    if (!button || !menu || !options.length) return;
    
    // Toggle dropdown
    function toggleDropdown(e) {
      e.preventDefault();
      e.stopPropagation();
      
      // Close all other dropdowns
      document.querySelectorAll('.rich-dropdown-menu').forEach(otherMenu => {
        if (otherMenu !== menu) {
          otherMenu.classList.add('hidden');
          const otherArrow = otherMenu.parentElement.querySelector('svg');
          if (otherArrow) otherArrow.classList.remove('rotate-180');
          // Reset mobile positioning
          otherMenu.style.position = '';
          otherMenu.style.left = '';
          otherMenu.style.right = '';
          otherMenu.style.top = '';
        }
      });
      
      const isHidden = menu.classList.contains('hidden');
      
      if (isHidden) {
        menu.classList.remove('hidden');
        if (arrow) arrow.classList.add('rotate-180');
        
        // Position menu properly on mobile
        if (window.innerWidth <= 768) {
          const rect = button.getBoundingClientRect();
          const scrollContainer = button.closest('.overflow-x-auto');
          
          if (scrollContainer) {
            // Position relative to the scroll container
            menu.style.position = 'fixed';
            menu.style.left = Math.max(16, rect.left) + 'px';
            menu.style.right = 'auto';
            menu.style.width = Math.min(300, window.innerWidth - 32) + 'px';
            menu.style.top = Math.min(rect.bottom + 4, window.innerHeight - 250) + 'px';
            menu.style.maxHeight = '40vh';
            menu.style.zIndex = '9999';
          } else {
            // Fallback for non-scrollable containers
            menu.style.position = 'fixed';
            menu.style.left = '0.5rem';
            menu.style.right = '0.5rem';
            menu.style.top = Math.min(rect.bottom + 4, window.innerHeight - 300) + 'px';
            menu.style.maxHeight = '50vh';
            menu.style.zIndex = '9999';
          }
        } else {
          // Reset mobile positioning for desktop
          menu.style.position = '';
          menu.style.left = '';
          menu.style.right = '';
          menu.style.top = '';
          menu.style.width = '';
          menu.style.zIndex = '';
        }
      } else {
        menu.classList.add('hidden');
        if (arrow) arrow.classList.remove('rotate-180');
        // Reset positioning
        menu.style.position = '';
        menu.style.left = '';
        menu.style.right = '';
        menu.style.top = '';
        menu.style.zIndex = '';
      }
    }
    
    button.addEventListener('click', toggleDropdown);
    button.addEventListener('touchend', toggleDropdown);
    
    // Handle option selection
    function selectOption(option, e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      
      const itemId = option.getAttribute('data-item-id');
      const itemText = option.getAttribute('data-item-text');
      const itemPrice = option.getAttribute('data-item-price');
      
      // Update hidden field
      if (hiddenInput) {
        hiddenInput.value = itemId;
        if (itemPrice) {
          hiddenInput.dataset.price = itemPrice;
        }
      }
      
      // Update button text
      if (text) {
        text.textContent = itemText;
      }
      
      // Update selection indicators
      options.forEach(opt => {
        const checkmark = opt.querySelector('svg');
        if (checkmark) {
          checkmark.parentElement.style.display = 'none';
        }
      });
      
      const selectedCheckmark = option.querySelector('svg');
      if (selectedCheckmark) {
        selectedCheckmark.parentElement.style.display = 'flex';
      }
      
      // Close dropdown and reset positioning
      menu.classList.add('hidden');
      if (arrow) arrow.classList.remove('rotate-180');
      menu.style.position = '';
      menu.style.left = '';
      menu.style.right = '';
      menu.style.top = '';
      menu.style.zIndex = '';
      
      // Trigger change event for form calculations
      if (hiddenInput) {
        const changeEvent = new Event('change', { bubbles: true });
        hiddenInput.dispatchEvent(changeEvent);
      }
    }
    
    options.forEach(option => {
      // Handle click events
      option.addEventListener('click', function(e) {
        selectOption(this, e);
      });
      
      // Handle touch events for mobile - use touchend to avoid conflicts
      option.addEventListener('touchend', function(e) {
        e.preventDefault();
        selectOption(this, e);
      });
    });
  });
}

// Initialize rich dropdowns for existing rows on page load
function initializeExistingRichDropdowns() {
  // Initialize for existing product rows
  document.querySelectorAll('#line-items-table tbody tr').forEach(row => {
    initializeRichDropdown(row);
  });
  
  // Initialize for existing service rows
  document.querySelectorAll('#service-line-items-table tbody tr').forEach(row => {
    initializeRichDropdown(row);
  });
}

// Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
document.addEventListener('DOMContentLoaded', initializeExistingRichDropdowns);
document.addEventListener('turbo:load', initializeExistingRichDropdowns);

// Close dropdowns when clicking outside
function closeAllDropdowns() {
  document.querySelectorAll('.rich-dropdown-menu').forEach(menu => {
    menu.classList.add('hidden');
    const arrow = menu.parentElement.querySelector('svg');
    if (arrow) arrow.classList.remove('rotate-180');
    // Reset mobile positioning
    menu.style.position = '';
    menu.style.left = '';
    menu.style.right = '';
    menu.style.top = '';
    menu.style.zIndex = '';
  });
}

document.addEventListener('click', function(e) {
  if (!e.target.closest('.rich-dropdown')) {
    closeAllDropdowns();
  }
});

// Also handle touch events for better mobile support
document.addEventListener('touchend', function(e) {
  if (!e.target.closest('.rich-dropdown')) {
    closeAllDropdowns();
  }
});

// Handle new rows added dynamically - make sure rich dropdowns are initialized
document.addEventListener('DOMNodeInserted', function(e) {
  if (e.target.nodeType === 1 && e.target.matches('tr')) {
    setTimeout(() => {
      initializeRichDropdown(e.target);
    }, 100);
  }
});

// Shipping and Tax Rate Dropdown Functionality
function initializeShippingAndTaxDropdowns() {
  // Shipping Method Dropdown
  const shippingDropdownButton = document.querySelector('[data-shipping-dropdown-target="button"]');
  const shippingDropdownMenu = document.querySelector('[data-shipping-dropdown-target="menu"]');
  const shippingDropdownOptions = document.querySelectorAll('[data-shipping-dropdown-target="option"]');
  const shippingDropdownText = document.querySelector('.shipping-dropdown-text');
  const shippingDropdownArrow = shippingDropdownButton?.querySelector('svg');
  const shippingHiddenField = document.getElementById('order_shipping_method_id');
  
  if (shippingDropdownButton && shippingDropdownMenu) {
    // Toggle dropdown
    shippingDropdownButton.addEventListener('click', function(e) {
      e.preventDefault();
      const isHidden = shippingDropdownMenu.classList.contains('hidden');
      
      if (isHidden) {
        shippingDropdownMenu.classList.remove('hidden');
        shippingDropdownArrow?.classList.add('rotate-180');
      } else {
        shippingDropdownMenu.classList.add('hidden');
        shippingDropdownArrow?.classList.remove('rotate-180');
      }
    });
    
    // Handle option selection
    shippingDropdownOptions.forEach(option => {
      option.addEventListener('click', function(e) {
        e.preventDefault();
        
        const shippingId = this.getAttribute('data-shipping-id');
        const shippingName = this.getAttribute('data-shipping-name');
        
        // Update hidden field
        if (shippingHiddenField) {
          shippingHiddenField.value = shippingId;
        }
        
        // Update button text
        if (shippingDropdownText) {
          shippingDropdownText.textContent = shippingName;
        }
        
        // Update selection indicators
        shippingDropdownOptions.forEach(opt => {
          const checkmark = opt.querySelector('svg');
          if (checkmark) {
            checkmark.classList.add('hidden');
          }
        });
        
        const selectedCheckmark = this.querySelector('svg');
        if (selectedCheckmark) {
          selectedCheckmark.classList.remove('hidden');
        }
        
        // Close dropdown
        shippingDropdownMenu.classList.add('hidden');
        shippingDropdownArrow?.classList.remove('rotate-180');
      });
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
      if (!shippingDropdownButton.contains(e.target) && !shippingDropdownMenu.contains(e.target)) {
        shippingDropdownMenu.classList.add('hidden');
        shippingDropdownArrow?.classList.remove('rotate-180');
      }
    });
  }
  
  // Tax Rate Dropdown
  const taxDropdownButton = document.querySelector('[data-tax-dropdown-target="button"]');
  const taxDropdownMenu = document.querySelector('[data-tax-dropdown-target="menu"]');
  const taxDropdownOptions = document.querySelectorAll('[data-tax-dropdown-target="option"]');
  const taxDropdownText = document.querySelector('.tax-dropdown-text');
  const taxDropdownArrow = taxDropdownButton?.querySelector('svg');
  const taxHiddenField = document.getElementById('order_tax_rate_id');
  
  if (taxDropdownButton && taxDropdownMenu) {
    // Toggle dropdown
    taxDropdownButton.addEventListener('click', function(e) {
      e.preventDefault();
      const isHidden = taxDropdownMenu.classList.contains('hidden');
      
      if (isHidden) {
        taxDropdownMenu.classList.remove('hidden');
        taxDropdownArrow?.classList.add('rotate-180');
      } else {
        taxDropdownMenu.classList.add('hidden');
        taxDropdownArrow?.classList.remove('rotate-180');
      }
    });
    
    // Handle option selection
    taxDropdownOptions.forEach(option => {
      option.addEventListener('click', function(e) {
        e.preventDefault();
        
        const taxId = this.getAttribute('data-tax-id');
        const taxName = this.getAttribute('data-tax-name');
        
        // Update hidden field
        if (taxHiddenField) {
          taxHiddenField.value = taxId;
        }
        
        // Update button text
        if (taxDropdownText) {
          taxDropdownText.textContent = taxName;
        }
        
        // Update selection indicators
        taxDropdownOptions.forEach(opt => {
          const checkmark = opt.querySelector('svg');
          if (checkmark) {
            checkmark.classList.add('hidden');
          }
        });
        
        const selectedCheckmark = this.querySelector('svg');
        if (selectedCheckmark) {
          selectedCheckmark.classList.remove('hidden');
        }
        
        // Close dropdown
        taxDropdownMenu.classList.add('hidden');
        taxDropdownArrow?.classList.remove('rotate-180');
      });
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
      if (!taxDropdownButton.contains(e.target) && !taxDropdownMenu.contains(e.target)) {
        taxDropdownMenu.classList.add('hidden');
        taxDropdownArrow?.classList.remove('rotate-180');
      }
    });
  }
}

// Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
document.addEventListener('DOMContentLoaded', initializeShippingAndTaxDropdowns);
// Run immediately in case the page is already loaded
initializeShippingAndTaxDropdowns();
// Also run on standard lifecycle events for Turbo/Turbolinks
document.addEventListener('DOMContentLoaded', initializeShippingAndTaxDropdowns);
document.addEventListener('turbo:load', initializeShippingAndTaxDropdowns);
</script> 