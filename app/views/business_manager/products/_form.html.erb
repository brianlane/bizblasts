<%# app/views/business_manager/products/_form.html.erb %>

<%= form_with(model: [:business_manager, @product], local: true) do |form| %>
  <% if @product.errors.any? %>
    <div id="error_explanation" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
      <strong class="font-bold"><%= pluralize(@product.errors.count, "error") %> prohibited this product from being saved:</strong>
      <ul class="mt-2 list-disc list-inside">
        <% @product.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Basic Information Section -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900 border-b pb-2">Basic Information</h3>
      
      <div>
        <%= form.label :name, class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= form.text_field :name, required: true, 
              class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
      </div>

      <div>
        <%= form.label :description, class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= form.text_area :description, rows: 4, 
              class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
      </div>

      <div>
        <%= form.label :product_type, "Product Type", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= render 'shared/rich_dropdown',
            collection: Product.product_types.keys.map { |pt| [pt.titleize, pt] },
            field_name: "#{form.object_name}[product_type]",
            selected_value: form.object.product_type,
            prompt_text: "Select Type",
            value_method: :last,
            text_method: :first,
            required: false,
            dropdown_id: "product_type_dropdown" %>
        <p class="mt-1 text-sm text-gray-500">
          <strong>Standard:</strong> Independent products sold individually from services (displayed on products page) <br>
          <strong>Service:</strong> Add-on products for your services (not displayed on products page - displayed with booking page) <br>
          <strong>Mixed:</strong> Products that can be both sold and booked as add-ons (displayed on products & booking page)
        </p>
      </div>
    </div>

    <!-- Pricing and Inventory Section -->
    <div class="space-y-4">
      <h3 class="text-lg font-semibold text-gray-900 border-b pb-2">Pricing & Inventory</h3>
      
      <div>
        <%= form.label :price, "Base Price ($)", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= form.number_field :price, step: 0.01, required: true, 
              class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
      </div>

      <% unless @product.has_variants? %>
        <div>
          <%= form.label :stock_quantity, "Stock Quantity", class: "block text-gray-700 text-sm font-bold mb-2" %>
          <%= form.number_field :stock_quantity, min: 0, 
                class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" %>
          <p class="mt-1 text-sm text-gray-500">Only applies if the product has no variants defined below.</p>
        </div>
      <% end %>

      <!-- Status Options -->
      <div class="space-y-3">
        <div class="flex items-center">
          <%= form.check_box :active, class: "form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500" %>
          <%= form.label :active, "Active", class: "ml-2 text-gray-700 text-sm font-bold" %>
        </div>

        <div class="flex items-center">
          <%= form.check_box :featured, class: "form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500" %>
          <%= form.label :featured, "Featured Product", class: "ml-2 text-gray-700 text-sm font-bold" %>
        </div>

        <div class="flex items-center">
          <%= form.check_box :tips_enabled, class: "form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500" %>
          <%= form.label :tips_enabled, "Enable tips", class: "ml-2 text-gray-700 text-sm font-bold" %>
        </div>
      </div>
    </div>
  </div>

  <!-- Product Images Section -->
  <div class="mt-8 border-t pt-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Product Images</h3>
    
    <% if @product.persisted? && @product.images.attached? %>
      <div id="existing-images" class="mb-6">
        <h4 class="text-md font-medium mb-3 text-gray-700">Current Images:</h4>
        <% @product.images.ordered.each_with_index do |image, index| %>
          <div class="mb-4 border border-gray-200 rounded-lg image-management-item bg-white shadow-sm" data-image-id="<%= image.id %>">
            <!-- Hidden fields for managing this image -->
            <input type="hidden" name="product[images_attributes][<%= index %>][id]" value="<%= image.id %>" />
            <input type="hidden" name="product[images_attributes][<%= index %>][_destroy]" value="0" class="destroy-image" />
            <input type="hidden" name="product[images_attributes][<%= index %>][position]" value="<%= index %>" class="image-position" />
            
            <!-- Mobile-first responsive layout -->
            <div class="flex flex-col sm:flex-row sm:items-center p-4 gap-4">
              <!-- Image thumbnail -->
              <div class="flex-shrink-0 self-center sm:self-start">
                <% if image.variable? %>
                  <% begin %>
                    <%= image_tag rails_public_blob_url(image.representation(resize_to_limit: [120, 120])), 
                          class: "w-20 h-20 sm:w-24 sm:h-24 rounded-lg shadow-sm object-cover" %>
                  <% rescue ActiveStorage::UnrepresentableError %>
                    <div class="w-20 h-20 sm:w-24 sm:h-24 bg-gray-200 rounded-lg flex items-center justify-center">
                      <span class="text-gray-500 text-xs text-center">Unsupported<br>Format</span>
                    </div>
                  <% end %>
                <% else %>
                  <div class="w-20 h-20 sm:w-24 sm:h-24 bg-gray-100 rounded-lg flex items-center justify-center">
                    <span class="text-gray-500 text-xs text-center">Attachment</span>
                  </div>
                <% end %>
              </div>
              
              <!-- Image details and controls -->
              <div class="flex-grow min-w-0">
                <!-- Filename - truncated on mobile -->
                <p class="text-sm font-medium text-gray-700 mb-3 truncate" title="<%= image.filename %>">
                  <%= image.filename %>
                </p>
                
                <!-- Controls stacked on mobile, inline on larger screens -->
                <div class="space-y-3 sm:space-y-2">
                  <!-- Primary checkbox -->
                  <div class="flex items-center">
                    <input type="checkbox" 
                           name="product[images_attributes][<%= index %>][primary]" 
                           value="1" 
                           class="form-checkbox h-4 w-4 text-blue-600 primary-image-checkbox mr-3"
                           <%= 'checked' if image.primary %>
                           id="product_images_attributes_<%= index %>_primary" />
                    <label for="product_images_attributes_<%= index %>_primary" 
                           class="text-sm text-gray-700 font-medium">Primary Image</label>
                  </div>
                  
                  <!-- Remove button -->
                  <div>
                    <button type="button" 
                            class="inline-flex items-center px-3 py-2 text-sm font-medium text-red-600 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors delete-image-button">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                      Remove Image
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    <% end %>
    
    <div class="bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-300 hover:border-gray-400 transition-colors">
      <%= form.label :images, "Add New Images", class: "block text-gray-700 text-sm font-bold mb-3" %>
      
      <!-- File upload area -->
      <div class="text-center">
        <!-- Hidden file input -->
        <%= form.file_field :images, multiple: true, 
              accept: "image/*",
              data: { 
                max_file_size: 15728640,  # 15MB in bytes
                max_files: 10 
              },
              class: "hidden",
              id: "product_images_input" %>
        
        <!-- Custom styled button with icon -->
        <button type="button" id="custom-file-button" 
                class="inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer">
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
          Choose Files
        </button>
        
        <!-- File selection display -->
        <div id="file-selection-display" class="mt-3 text-sm text-gray-600 font-medium">
          No files selected
        </div>
      </div>
      
      <!-- Help text -->
      <div class="mt-4 p-3 bg-blue-50 rounded-md">
        <p class="text-sm text-blue-700">
          <strong>📸 Image Guidelines:</strong><br>
          • Formats: PNG, JPEG, GIF, WebP<br>
          • Max size: 15MB per file<br>
          • Max files: 10 images<br>
          • Recommended: Square images work best
        </p>
      </div>
    </div>
  </div>

  <!-- Product Variants Section -->
  <div class="mt-8 border-t pt-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">Product Variants</h3>
    <p class="text-sm text-gray-600 mb-4">Add variants if this product comes in different sizes, colors, or configurations.</p>
    
    <div id="product-variants" class="space-y-4">
      <%= form.fields_for :product_variants do |variant_form| %>
        <%= render 'variant_fields', form: variant_form %>
      <% end %>
      
      <div id="add-variant-container" class="flex justify-start">
        <%= link_to '+ Add Variant', '#', id: 'add-variant', 
              class: "inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2" %>
      </div>
    </div>
  </div>

  <!-- Submit Button -->
  <div class="mt-8 border-t pt-6">
    <div class="flex flex-col sm:flex-row gap-4">
      <%= form.submit(@product.new_record? ? 'Create Product' : 'Update Product', 
            class: "inline-flex items-center justify-center px-6 py-3 bg-green-500 hover:bg-green-600 text-white font-bold rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 cursor-pointer") %>
    </div>
  </div>
<% end %>

<!-- Template for new variant fields (hidden) -->
<template id="variant-template">
  <div class="variant-field bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
    <div class="flex items-center justify-between mb-4">
      <h4 class="text-md font-medium text-gray-900">Product Variant</h4>
      <button type="button" class="remove-variant inline-flex items-center px-3 py-1 text-xs font-medium text-red-600 bg-red-50 hover:bg-red-100 rounded-md transition-colors">
        Remove Variant
      </button>
    </div>
    
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2">Variant Name</label>
        <input type="text" name="product[product_variants_attributes][NEW_RECORD][name]" required placeholder="e.g., Large, Red" 
               class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" />
      </div>
      
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2">SKU</label>
        <input type="text" name="product[product_variants_attributes][NEW_RECORD][sku]" placeholder="Stock Keeping Unit" 
               class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" />
      </div>
      
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2">Price Modifier ($)</label>
        <input type="number" name="product[product_variants_attributes][NEW_RECORD][price_modifier]" step="0.01" placeholder="0.00" 
               class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" />
        <p class="mt-1 text-xs text-gray-500">Positive for upcharge, negative for discount</p>
      </div>
      
      <div>
        <label class="block text-gray-700 text-sm font-bold mb-2">Stock Quantity</label>
        <input type="number" name="product[product_variants_attributes][NEW_RECORD][stock_quantity]" required min="0" placeholder="0" 
               class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" />
      </div>
    </div>
    
    <div class="mt-4">
      <label class="block text-gray-700 text-sm font-bold mb-2">Options (JSON)</label>
      <textarea name="product[product_variants_attributes][NEW_RECORD][options]" rows="2" 
                placeholder='e.g., {"size": "Large", "color": "Red"}' 
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500"></textarea>
      <p class="mt-1 text-xs text-gray-500">Enter as valid JSON for additional variant properties</p>
    </div>
  </div>
</template>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    let variantCounter = 0;
    
    // Handle Add Variant button click
    const addVariantBtn = document.getElementById('add-variant');
    if (addVariantBtn) {
      addVariantBtn.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Get the variants container
        const variantsContainer = document.getElementById('product-variants');
        if (!variantsContainer) {
          console.error('Product variants container not found');
          return;
        }
        
        // Create unique timestamp for this variant
        const timestamp = Date.now() + variantCounter++;
        
        // Create the variant using the manual approach (most reliable)
        const newVariant = createVariantManually(timestamp);
        
        // Find the add button container - use specific ID to avoid any confusion
        const addButtonContainer = document.getElementById('add-variant-container');
        
        // IMPROVED APPROACH: Use insertAdjacentElement instead of DOM manipulation
        // This preserves existing elements and their event handlers
        if (addButtonContainer) {
          // Insert the new variant right before the button container
          // This doesn't disrupt existing DOM elements or their event handlers
          addButtonContainer.insertAdjacentElement('beforebegin', newVariant);
        } else {
          console.warn('Add button container not found, appending to end');
          // Fallback: just append to the end
          variantsContainer.appendChild(newVariant);
        }
        
        // Focus on the first input of the new variant
        const firstInput = newVariant.querySelector('input[type="text"]');
        if (firstInput) {
          firstInput.focus();
        }
      });
    }
    
    // Fallback function to create variant manually
    function createVariantManually(timestamp) {
      const variantDiv = document.createElement('div');
      variantDiv.className = 'variant-field bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4';
      variantDiv.innerHTML = `
        <div class="flex items-center justify-between mb-4">
          <h4 class="text-md font-medium text-gray-900">Product Variant</h4>
          <button type="button" class="remove-variant inline-flex items-center px-3 py-1 text-xs font-medium text-red-600 bg-red-50 hover:bg-red-100 rounded-md transition-colors">
            Remove Variant
          </button>
        </div>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label class="block text-gray-700 text-sm font-bold mb-2">Variant Name</label>
            <input type="text" name="product[product_variants_attributes][${timestamp}][name]" required placeholder="e.g., Large, Red" 
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" />
          </div>
          
          <div>
            <label class="block text-gray-700 text-sm font-bold mb-2">SKU</label>
            <input type="text" name="product[product_variants_attributes][${timestamp}][sku]" placeholder="Stock Keeping Unit" 
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" />
          </div>
          
          <div>
            <label class="block text-gray-700 text-sm font-bold mb-2">Price Modifier ($)</label>
            <input type="number" name="product[product_variants_attributes][${timestamp}][price_modifier]" step="0.01" placeholder="0.00" 
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" />
            <p class="mt-1 text-xs text-gray-500">Positive for upcharge, negative for discount</p>
          </div>
          
          <div>
            <label class="block text-gray-700 text-sm font-bold mb-2">Stock Quantity</label>
            <input type="number" name="product[product_variants_attributes][${timestamp}][stock_quantity]" required min="0" placeholder="0" 
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500" />
          </div>
        </div>
        
        <div class="mt-4">
          <label class="block text-gray-700 text-sm font-bold mb-2">Options (JSON)</label>
          <textarea name="product[product_variants_attributes][${timestamp}][options]" rows="2" 
                    placeholder='e.g., {"size": "Large", "color": "Red"}' 
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500"></textarea>
          <p class="mt-1 text-xs text-gray-500">Enter as valid JSON for additional variant properties</p>
        </div>
      `;
      return variantDiv;
    }
    
    // Handle Remove Variant links (with event delegation)
    document.addEventListener('click', function(e) {
      // More robust detection for remove variant elements
      let removeButton = null;
      
      // Check if the clicked element itself has the remove-variant class
      if (e.target.classList.contains('remove-variant')) {
        removeButton = e.target;
      }
      // Check if the clicked element is inside a remove-variant element
      else if (e.target.closest('.remove-variant')) {
        removeButton = e.target.closest('.remove-variant');
      }
      
      if (removeButton) {
        e.preventDefault();
        
        const variantFields = removeButton.closest('.variant-field');
        
        if (!variantFields) {
          console.error('No variant-field parent found for Remove button');
          return;
        }
        
        // Check if this is an existing record (has an id field)
        const idField = variantFields.querySelector('input[name*="[id]"]');
        
        if (idField && idField.value) {
          // Create hidden field for _destroy
          const destroyField = document.createElement('input');
          destroyField.type = 'hidden';
          destroyField.name = idField.name.replace('[id]', '[_destroy]');
          destroyField.value = '1';
          variantFields.appendChild(destroyField);
          
          // Hide instead of remove for existing records
          variantFields.style.display = 'none';
        } else {
          // For new records, just remove from DOM
          variantFields.remove();
        }
      }
    });
    
    // Image management functionality
    const existingImagesDiv = document.getElementById('existing-images');
    if (existingImagesDiv) {
      // Handle image deletion
      existingImagesDiv.addEventListener('click', function(event) {
        if (event.target.classList.contains('delete-image-button')) {
          event.preventDefault();
          
          const item = event.target.closest('.image-management-item');
          if (item) {
            // Find the hidden _destroy field and set its value to 1
            const destroyField = item.querySelector('.destroy-image');
            if (destroyField) {
              destroyField.value = '1';
              
              // Apply visual feedback to show it will be deleted
              item.style.opacity = '0.6';
              item.style.backgroundColor = '#FEF2F2';
              item.style.border = '1px solid #FCA5A5';
              
              // Update the button
              event.target.textContent = 'Marked for Deletion';
              event.target.className = 'text-gray-500 text-sm font-medium cursor-not-allowed';
              event.target.disabled = true;
              
              // Add visual indicator
              const indicator = document.createElement('span');
              indicator.className = 'ml-2 text-red-600 font-medium text-xs';
              indicator.textContent = '(Will be removed when saved)';
              event.target.parentNode.appendChild(indicator);
              
              // Also disable the primary checkbox if exists
              const primaryCheckbox = item.querySelector('.primary-image-checkbox');
              if (primaryCheckbox) {
                primaryCheckbox.disabled = true;
                primaryCheckbox.checked = false;
              }
            }
          }
        }
      });

      // Handle primary image selection (ensure only one is selected)
      existingImagesDiv.addEventListener('change', function(event) {
        if (event.target.classList.contains('primary-image-checkbox')) {
          if (event.target.checked) {
            // Uncheck all other primary checkboxes
            existingImagesDiv.querySelectorAll('.primary-image-checkbox').forEach(checkbox => {
              if (checkbox !== event.target) {
                checkbox.checked = false;
              }
            });
          }
        }
      });
    }
    
    // Handle custom file button click
    const customFileButton = document.getElementById('custom-file-button');
    const fileInput = document.getElementById('product_images_input');
    const fileSelectionDisplay = document.getElementById('file-selection-display');
    
    if (customFileButton && fileInput) {
      customFileButton.addEventListener('click', function() {
        fileInput.click();
      });
    }
    
    // Handle file input change to validate file types and show feedback
    if (fileInput) {
      fileInput.addEventListener('change', function(event) {
        const files = event.target.files;
        const maxSize = parseInt(fileInput.dataset.maxFileSize) || 15728640; // 15MB
        const maxFiles = parseInt(fileInput.dataset.maxFiles) || 10;
        
        if (files.length > maxFiles) {
          alert(`Maximum ${maxFiles} files allowed`);
          fileInput.value = '';
          fileSelectionDisplay.textContent = 'No files selected';
          return;
        }
        
        let validFiles = true;
        Array.from(files).forEach(file => {
          if (file.size > maxSize) {
            alert(`${file.name} is too large. Maximum size is 15MB.`);
            validFiles = false;
          }
          if (!file.type.startsWith('image/')) {
            alert(`${file.name} is not a valid image format.`);
            validFiles = false;
          }
        });
        
        if (!validFiles) {
          fileInput.value = '';
          fileSelectionDisplay.textContent = 'No files selected';
          return;
        }
        
        // Remove any existing feedback
        let existingFeedback = document.getElementById('file-selection-feedback');
        if (existingFeedback) {
          existingFeedback.remove();
        }
        
        if (files && files.length > 0) {
          // Validate file types
          const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
          const invalidFiles = [];
          const validFiles = [];
          
          for (let i = 0; i < files.length; i++) {
            const file = files[i];
            if (allowedTypes.includes(file.type)) {
              validFiles.push(file);
            } else {
              invalidFiles.push(file);
            }
          }
          
          if (invalidFiles.length > 0) {
            // Update button styling for error
            if (customFileButton) {
              customFileButton.className = 'inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-red-500 hover:bg-red-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 cursor-pointer';
            }
            
            // Update file selection display
            if (fileSelectionDisplay) {
              fileSelectionDisplay.className = 'mt-3 text-sm text-red-600 font-medium';
              fileSelectionDisplay.textContent = `Invalid file type(s): ${invalidFiles.map(f => f.name).join(', ')}`;
            }
            
            const feedback = document.createElement('div');
            feedback.id = 'file-selection-feedback';
            feedback.className = 'mt-2 text-sm text-red-600 font-medium';
            feedback.innerHTML = `❌ Only PNG and JPEG files are allowed.`;
            event.target.parentElement.appendChild(feedback);
            
            // Clear the input
            event.target.value = '';
            return;
          }
          
          if (validFiles.length > 0) {
            // Update button styling for success
            if (customFileButton) {
              customFileButton.className = 'inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-green-500 hover:bg-green-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 cursor-pointer';
            }
            
            // Update file selection display
            if (fileSelectionDisplay) {
              fileSelectionDisplay.className = 'mt-3 text-sm text-green-600 font-medium';
              fileSelectionDisplay.textContent = `${validFiles.length} file(s) selected: ${validFiles.map(f => f.name).join(', ')}`;
            }
            
            // Show success message
            const feedback = document.createElement('div');
            feedback.id = 'file-selection-feedback';
            feedback.className = 'mt-2 text-sm text-green-600 font-medium';
            event.target.parentElement.appendChild(feedback);
          }
        } else {
          // Reset styling if no files
          if (customFileButton) {
            customFileButton.className = 'inline-flex items-center justify-center w-full sm:w-auto px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer';
          }
          if (fileSelectionDisplay) {
            fileSelectionDisplay.className = 'mt-3 text-sm text-gray-600 font-medium';
            fileSelectionDisplay.textContent = 'No files selected';
          }
        }
      });
    }
  });
</script> 