<%# View for public/booking#new %>
<%# Accessed via tenant subdomain: e.g., http://mybiz.lvh.me:3000/book?service_id=1 %>

<% @business = current_tenant %>
<% policy = @business.booking_policy %>

<div class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-6">Book Service: <%= @service.name %></h1>
  <p class="text-lg text-gray-700 mb-4">at <%= @business.name %></p>

  <%= form_with(model: @booking, url: tenant_bookings_path, method: :post, local: true) do |form| %>
    <%# Render errors if any %>
    <% if @booking.errors.any? %>
      <div id="error_explanation" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
        <strong class="font-bold">Oops!</strong>
        <span class="block sm:inline"><%= pluralize(@booking.errors.count, "error") %> prohibited this booking from being saved:</span>
        <ul class="mt-2 list-disc list-inside">
          <% @booking.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <%# Hidden field for service_id %>
    <%= form.hidden_field :service_id, value: @service.id %>

    <% if current_user.role == 'client' %>
      <%# Client: submit staff_member_id and tenant_customer_id as hidden fields %>
      <%= form.hidden_field :staff_member_id, value: @booking.staff_member_id %>
      <%= form.hidden_field :tenant_customer_id, value: @booking.tenant_customer_id %>
    <% else %>
      <%# Staff/Manager: show staff and customer selection %>
      <% if @service.staff_members.any? %>
        <div class="mb-4">
          <%= form.label :staff_member_id, "Select Staff Member", class: "block text-gray-700 text-sm font-bold mb-2" %>
          <%= form.collection_select :staff_member_id, @service.staff_members.active.order(:name), :id, :name, { include_blank: 'Any Staff' }, { required: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" } %>
        </div>
      <% else %>
        <p class="text-red-600 mb-4">Note: This service currently has no staff assigned and cannot be booked.</p>
      <% end %>

      <!-- Customer selection -->
      <div class="mb-4">
        <%= form.label :tenant_customer_id, "Customer", class: "block text-gray-700 text-sm font-bold mb-2" %>
        <%= form.select :tenant_customer_id,
              options_for_select(@business.tenant_customers.map { |c| [c.email.present? ? "#{c.name} (#{c.email})" : c.name, c.id] } + [["Create new customer", "new"]], @booking.tenant_customer_id),
              { prompt: "Select existing customer" },
              class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",
              id: "tenant_customer_id"
        %>
      </div>

      <!-- New customer fields (hidden & disabled by default) -->
      <div id="new-tenant-customer-fields" class="hidden mb-4">
        <h3 class="text-lg font-bold mb-2">New Customer Details</h3>
        <%= form.fields_for :tenant_customer_attributes, @booking.tenant_customer do |cust_fields| %>
          <div class="mb-4">
            <%= cust_fields.label :name, class: "block text-gray-700 text-sm font-bold mb-2" %>
            <%= cust_fields.text_field :name, disabled: true, required: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
          </div>
          <div class="mb-4">
            <%= cust_fields.label :email, class: "block text-gray-700 text-sm font-bold mb-2" %>
            <%= cust_fields.email_field :email, disabled: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
          </div>
          <div class="mb-4">
            <%= cust_fields.label :phone, class: "block text-gray-700 text-sm font-bold mb-2" %>
            <%= cust_fields.telephone_field :phone, disabled: true, required: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
          </div>
        <% end %>
      </div>
    <% end %>

    <%# TODO: Implement Date/Time selection based on service/staff availability %>
    <%# This likely requires JavaScript integration (e.g., calendar component) %>
    <%# For now, a simple datetime select %>
    <div class="mb-4">
      <%= form.label :start_time, class: "block text-sm font-medium text-gray-700 mb-2" %>
      <%= form.datetime_select :start_time,
            { minute_step: 15, start_year: Date.today.year, end_year: Date.today.year + 1 },
            class: "form-input rounded border px-3 py-2 w-full",
            id: 'booking_start_time' %> <%# Add an ID for easier JS selection %>
    </div>

    <%# Add quantity input field - Potentially make this conditional based on service type %>
    <% if @service.experience? %>
      <div class="mb-4">
        <%= form.label :quantity, "Number of Attendees", class: "block text-sm font-medium text-gray-700 mb-2" %>
        <%= form.number_field :quantity, min: 1, max: @service.max_bookings, class: "form-input rounded border px-3 py-2 w-full", id: 'booking_quantity' %>
        <p class="text-sm text-gray-500">Min: <%= @service.min_bookings %>, Max: <%= @service.max_bookings %>, Spots Remaining: <%= @service.spots %></p>
      </div>
    <% else %>
       <%# For standard services, quantity is always 1, submit as hidden field %>
       <%= form.hidden_field :quantity, value: 1, id: 'booking_quantity' %>
    <% end %>

    <%# Booking policy date & duration inputs always displayed early in the form %>
    <%# These are kept hidden but their values are synced for JS policy enforcement %>
    <div class="mb-4" style="display: none;">
      <label for="booking_date" class="block text-sm font-medium text-gray-700 mb-2">Date</label>
      <input type="date" id="booking_date" name="booking[date]" class="form-input rounded border px-3 py-2 w-full"<% if policy&.max_advance_days %> max="<%= (Date.current + policy.max_advance_days.days).strftime('%Y-%m-%d') %>"<% end %> />
    </div>

    <div class="mb-4" style="display: none;">
      <label for="booking_duration" class="block text-sm font-medium text-gray-700 mb-2">Duration (minutes)</label>
      <input type="number" id="booking_duration" name="booking[duration]" class="form-input rounded border px-3 py-2 w-full" value="<%= @service.duration %>"<% if policy&.min_duration_mins %> min="<%= policy.min_duration_mins %>"<% end %><% if policy&.max_duration_mins %> max="<%= policy.max_duration_mins %>"<% end %> />
    </div>

    <div class="mb-4">
      <%= form.label :notes, "Notes (Optional)", class: "block text-gray-700 text-sm font-bold mb-2" %>
      <%= form.text_area :notes, rows: 4, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
    </div>

    <%# Display Price/Duration %>
    <div class="mb-6 p-4 bg-gray-100 rounded">
      <p><strong>Duration:</strong> <%= @service.duration %> minutes</p>
      <p><strong>Price:</strong> <span id="total-booking-price"><%= number_to_currency(@booking.total_charge) %></span></p>
    </div>

    <%# --- Add-on Products Section --- %>
    <% if @available_products.present? && @available_products.any? %>
      <div class="mb-8">
        <h2 class="text-xl font-semibold mb-2">Add Products to Your Booking (Optional)</h2>
        <p class="text-sm text-gray-500 mb-3">Only service and mixed type products can be added to bookings.</p>
        <table class="min-w-full divide-y divide-gray-200 mb-4">
          <thead>
            <tr>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Variant</th>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Price</th>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">In Stock</th>
              <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Quantity</th>
            </tr>
          </thead>
          <tbody>
            <% @available_products.each do |product| %>
              <% product.product_variants.each do |variant| %>
                <%# Find existing add-on for this variant if form is re-rendered with errors %>
                <% existing_add_on = @booking.booking_product_add_ons.find { |addon| addon.product_variant_id == variant.id } %>
                <% add_on_object = existing_add_on || @booking.booking_product_add_ons.build(product_variant: variant, quantity: 0) %> 
                <%# Use a unique child_index for each potential new record %>
                <%= form.fields_for :booking_product_add_ons, add_on_object, child_index: variant.id do |addOnFields| %> 
                  <tr>
                    <td class="px-4 py-2 align-top"><%= product.name %></td>
                    <td class="px-4 py-2 align-top"><%= variant.name %></td>
                    <td class="px-4 py-2 align-top"><%= number_to_currency(variant.final_price) %></td>
                    <td class="px-4 py-2 align-top"><%= variant.stock_quantity %></td>
                    <td class="px-4 py-2 align-top">
                      <%= addOnFields.hidden_field :product_variant_id, value: variant.id %>
                      <div>
                        <%= addOnFields.label :quantity, "Quantity:" %>
                        <%= addOnFields.number_field :quantity, min: 0, in: 0..(variant.stock_quantity + (existing_add_on&.quantity || 0) ), value: addOnFields.object.quantity || 0 %>
                        <small>(Available: <%= variant.stock_quantity + (existing_add_on&.quantity || 0) %>)</small>
                      </div>
                    </td>
                  </tr>
                <% end %>
              <% end %>
            <% end %>
          </tbody>
        </table>
        <p class="text-sm text-gray-500">Set quantity for any add-on product you wish to include. Leave at 0 to skip.</p>
      </div>
    <% end %>

    <div class="flex items-center justify-between">
      <%# Show submit button if user is client or staff members are available %>
      <% if current_user.role == 'client' || @service.staff_members.any? %>
        <%= form.submit "Confirm Booking", class: "bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline cursor-pointer" %>
      <% else %>
        <span class="text-gray-500">(Booking unavailable)</span>
      <% end %>
      <%= link_to 'Cancel', tenant_services_page_path, class: "inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800" %>
    </div>
  <% end %>

</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const customerSelect = document.getElementById('tenant_customer_id');
    const newFieldsDiv = document.getElementById('new-tenant-customer-fields');
    const nestedInputs = newFieldsDiv.querySelectorAll('input');
    
    function toggleCustomerFields() {
      if (customerSelect && customerSelect.value === 'new') {
        newFieldsDiv.classList.remove('hidden');
        nestedInputs.forEach(input => {
          input.disabled = false;
          // only name and phone are required, email remains optional
          if (input.type === 'email') {
            input.required = false;
          } else {
            input.required = true;
          }
        });
      } else {
        newFieldsDiv.classList.add('hidden');
        nestedInputs.forEach(input => { input.disabled = true; input.required = false; });
      }
    }

    if (customerSelect) {
      customerSelect.addEventListener('change', toggleCustomerFields);
      toggleCustomerFields();
    }

    const dateInput = document.getElementById('booking_date');
    const durInput = document.getElementById('booking_duration');
    const startTimeSelects = document.querySelectorAll('#booking_start_time select');
    
    // Function to sync start_time select values to the hidden booking_date input
    function syncDateInput() {
      const year = startTimeSelects[0].value;
      const month = startTimeSelects[1].value;
      const day = startTimeSelects[2].value;
      
      if (year && month && day) {
        // Note: Date month is 0-indexed in JS, but select values are 1-indexed
        const selectedDate = new Date(year, month - 1, day);
        const formattedDate = selectedDate.toISOString().split('T')[0]; // YYYY-MM-DD
        dateInput.value = formattedDate;
        // Trigger input/change events manually to ensure policy JS runs
        dateInput.dispatchEvent(new Event('input'));
        dateInput.dispatchEvent(new Event('change'));
      } else {
        dateInput.value = '';
      }
    }
    
    // Sync initial value
    syncDateInput();

    // Listen for changes on start_time selects to sync date
    startTimeSelects.forEach(select => {
      select.addEventListener('change', syncDateInput);
    });

    // Set the hidden duration input value from the service duration
    if (durInput && <%= @service.duration.present? %>) { <%# Check if service duration is present %>
      durInput.value = <%= @service.duration %>;
      // Trigger input/change events manually to ensure policy JS runs
      durInput.dispatchEvent(new Event('input'));
      durInput.dispatchEvent(new Event('change'));
    }

    // Existing date clamping logic (now acts on the hidden input)
    if (dateInput && dateInput.max) {
      const clampDate = () => {
        if (dateInput.value > dateInput.max) {
          // Instead of just clamping, also update the start_time selects if date is clamped
          const [year, month, day] = dateInput.max.split('-');
          startTimeSelects[0].value = year;
          startTimeSelects[1].value = parseInt(month, 10).toString(); // Convert back to 1-indexed string
          startTimeSelects[2].value = parseInt(day, 10).toString();
          
          // Optionally show a message to the user
          // alert('You can only book up to ' + (<%= policy&.max_advance_days %> || 'the maximum') + ' days in advance.');
        }
      };
      dateInput.addEventListener('input', clampDate);
      dateInput.addEventListener('change', clampDate);
      dateInput.addEventListener('blur', clampDate);
    }

    // Existing duration clamping logic (now acts on the hidden input)
    if (durInput) {
      const clampDuration = () => {
        // Clamp and show error message
        const min = durInput.min ? parseInt(durInput.min, 10) : null;
        const max = durInput.max ? parseInt(durInput.max, 10) : null;
        const currentValue = parseInt(durInput.value, 10);
        let clampedValue = currentValue;
        let msgElement = durInput.parentNode.querySelector('p.text-red-600');

        if (min !== null && currentValue < min) {
          clampedValue = min;
          if (!msgElement) {
            msgElement = document.createElement('p');
            msgElement.className = 'text-red-600';
            durInput.parentNode.appendChild(msgElement);
          }
          msgElement.textContent = `Minimum booking duration is ${min} minutes.`;
        } else if (max !== null && currentValue > max) {
          clampedValue = max;
          if (!msgElement) {
            msgElement = document.createElement('p');
            msgElement.className = 'text-red-600';
            durInput.parentNode.appendChild(msgElement);
          }
          msgElement.textContent = `Maximum booking duration is ${max} minutes.`;
        } else if (msgElement) {
           // If value is valid, remove the error message
           msgElement.remove();
        }
        
        // Only update if clamping occurred to avoid infinite loops with event listeners
        if (currentValue !== clampedValue) {
           durInput.value = clampedValue;
           // Trigger events after updating the value
           durInput.dispatchEvent(new Event('input'));
           durInput.dispatchEvent(new Event('change'));
        }
      };
      
      // Initial sync and clamping of duration
      clampDuration();

      // Listen for changes on the duration input to clamp
      durInput.addEventListener('input', clampDuration); // Use input for real-time clamping
      durInput.addEventListener('change', clampDuration);
      durInput.addEventListener('blur', clampDuration);
    }
  });
</script>

<%# Add JavaScript for dynamic price update based on quantity for Experience services %>
<% if @service.experience? %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const quantityInput = document.getElementById('booking_quantity');
    const totalPriceSpan = document.getElementById('total-booking-price');
    const baseServicePrice = <%= @service.price || 0 %>;

    function updateTotalPrice() {
      const quantity = parseInt(quantityInput.value, 10) || 1;
      // Note: This calculation currently only includes the service price * quantity.
      // It does NOT include add-on product prices.
      // Full dynamic calculation including add-ons would require more complex JS.
      const newTotalPrice = baseServicePrice * quantity;
      
      // Format the price (simplified) - a proper currency formatting library is recommended
      const formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      });
      totalPriceSpan.textContent = formatter.format(newTotalPrice);
    }

    if (quantityInput && totalPriceSpan) {
      quantityInput.addEventListener('input', updateTotalPrice);
      // Also update on change, just in case
      quantityInput.addEventListener('change', updateTotalPrice);
      // Initial update on load
      updateTotalPrice();
    }
  });
</script>
<% end %> 