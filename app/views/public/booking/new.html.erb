<%# View for public/booking#new %>
<%# Accessed via tenant subdomain: e.g., http://mybiz.lvh.me:3000/book?service_id=1 %>

<% @business = current_tenant %>
<% policy = @business.booking_policy %>

<div class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-6">Book Service: <%= @service.name %></h1>
  <p class="text-lg text-gray-700 mb-4">at <%= @business.name %></p>

  <%= form_with(model: @booking, url: tenant_bookings_path, method: :post, local: true) do |form| %>
    <%# Render errors if any %>
    <% if @booking.errors.any? %>
      <div id="error_explanation" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
        <strong class="font-bold">Oops!</strong>
        <span class="block sm:inline"><%= pluralize(@booking.errors.count, "error") %> prohibited this booking from being saved:</span>
        <ul class="mt-2 list-disc list-inside">
          <% @booking.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <%# Hidden field for service_id %>
    <%= form.hidden_field :service_id, value: @service.id %>

    <% if current_user&.role == 'client' || current_user.nil? %>
      <%# Client or guest: hidden staff_member_id and tenant_customer_id %>
      <%= form.hidden_field :staff_member_id, value: @booking.staff_member_id %>
      <%= form.hidden_field :tenant_customer_id, value: @booking.tenant_customer_id %>
      <% if current_user.nil? %>
        <%# Guest: render personal details and optional account creation %>
        <%= render 'shared/guest_customer_fields', f: form %>
      <% end %>
    <% else %>
      <%# Staff/Manager: show staff and customer selection %>
      <% if @service.staff_members.any? %>
        <div class="mb-4">
          <%= form.label :staff_member_id, "Select Staff Member", class: "block text-gray-700 text-sm font-bold mb-2" %>
          <%= render 'shared/rich_dropdown',
              collection: @service.staff_members.active.order(:name),
              field_name: "booking[staff_member_id]",
              selected_value: @booking.staff_member_id,
              prompt_text: "Any Staff",
              value_method: :id,
              text_method: :name,
              required: true,
              dropdown_id: "public_booking_staff_dropdown" %>
        </div>
      <% else %>
        <p class="text-red-600 mb-4">Note: This service currently has no staff assigned and cannot be booked.</p>
      <% end %>

      <!-- Customer selection -->
      <div class="mb-4">
        <%= form.label :tenant_customer_id, "Customer", class: "block text-gray-700 text-sm font-bold mb-2" %>
        
        <!-- Custom Customer Dropdown -->
        <div class="customer-dropdown relative">
          <button type="button" 
                  class="customer-dropdown-button w-full bg-white border border-gray-300 rounded-md shadow-sm px-3 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base min-h-[48px]"
                  data-customer-dropdown-target="button">
            <span class="customer-dropdown-text text-gray-900">
              <% if @booking.tenant_customer_id.present? %>
                <% customer = @business.tenant_customers.find(@booking.tenant_customer_id) %>
                <%= customer.email.present? ? "#{customer.name} (#{customer.email})" : customer.name %>
              <% else %>
                Select existing customer
              <% end %>
            </span>
            <span class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
              <svg class="h-5 w-5 text-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
              </svg>
            </span>
          </button>
          
          <!-- Dropdown Menu -->
          <div class="customer-dropdown-menu absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none hidden"
               data-customer-dropdown-target="menu">
            
            <div class="customer-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                 data-customer-id=""
                 data-customer-name="Select existing customer"
                 data-customer-dropdown-target="option">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <div class="font-medium text-gray-500">Select existing customer</div>
                </div>
              </div>
              <% if @booking.tenant_customer_id.blank? %>
                <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                  </svg>
                </span>
              <% end %>
            </div>
            
            <% @business.tenant_customers.each do |customer| %>
              <div class="customer-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors"
                   data-customer-id="<%= customer.id %>"
                   data-customer-name="<%= customer.email.present? ? "#{customer.name} (#{customer.email})" : customer.name %>"
                   data-customer-dropdown-target="option">
                <div class="flex items-center justify-between">
                  <div class="flex-1">
                    <div class="font-medium text-gray-900"><%= customer.name %></div>
                    <% if customer.email.present? %>
                      <div class="text-sm text-gray-500 mt-1"><%= customer.email %></div>
                    <% end %>
                    <% if customer.phone.present? %>
                      <div class="text-xs text-gray-400 mt-1"><%= customer.phone %></div>
                    <% end %>
                  </div>
                </div>
                <% if @booking.tenant_customer_id == customer.id %>
                  <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                    </svg>
                  </span>
                <% end %>
              </div>
            <% end %>
            
            <div class="customer-option cursor-pointer select-none relative py-3 px-3 hover:bg-blue-50 transition-colors border-t border-gray-200"
                 data-customer-id="new"
                 data-customer-name="Create new customer"
                 data-customer-dropdown-target="option">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <div class="font-medium text-blue-600">+ Create new customer</div>
                </div>
              </div>
              <% if @booking.tenant_customer_id == "new" %>
                <span class="absolute inset-y-0 right-2 flex items-center text-blue-600">
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                  </svg>
                </span>
              <% end %>
            </div>
          </div>
        </div>
        
        <!-- Hidden field to store the selected customer ID -->
        <%= form.hidden_field :tenant_customer_id, id: "tenant_customer_id" %>
      </div>

      <!-- New customer fields (hidden by default) -->
      <div id="new-tenant-customer-fields" class="hidden mb-4">
        <h3 class="text-lg font-bold mb-2">New Customer Details</h3>
        <%= form.fields_for :tenant_customer_attributes, @booking.tenant_customer do |cust_fields| %>
          <div class="mb-4">
            <%= cust_fields.label :name, class: "block text-gray-700 text-sm font-bold mb-2" %>
            <%= cust_fields.text_field :name, required: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
          </div>
          <div class="mb-4">
            <%= cust_fields.label :email, class: "block text-gray-700 text-sm font-bold mb-2" %>
            <%= cust_fields.email_field :email, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
          </div>
          <div class="mb-4">
            <%= cust_fields.label :phone, class: "block text-gray-700 text-sm font-bold mb-2" %>
            <%= cust_fields.telephone_field :phone, required: true, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
          </div>
        <% end %>
      </div>
    <% end %>

    <%# Date/Time Display (read-only since selected from calendar) %>
    <div class="mb-4">
      <%= form.label :start_time, "Start time", class: "block text-sm font-medium text-gray-700 mb-2" %>
      
      <% if @booking.start_time.present? %>
        <!-- Display selected date/time as read-only -->
        <div class="bg-gray-50 border border-gray-300 rounded-md px-3 py-2 text-gray-900 font-medium">
          <%= @booking.start_time.strftime("%A, %B %-d, %Y at %l:%M %p") %>
        </div>
        <!-- Hidden field to submit the value -->
        <%= form.hidden_field :start_time %>
        
        <p class="mt-2 text-sm text-gray-600">
          <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          To change, please 
          <%= link_to "return to calendar", tenant_calendar_path(service_id: @service.id), class: "text-blue-600 hover:text-blue-800 underline" %>.
        </p>
      <% else %>
        <!-- Fallback if no start_time is set -->
        <%= form.datetime_select :start_time,
              { minute_step: 15, start_year: Date.today.year, end_year: Date.today.year + 1, use_month_numbers: true },
              { class: 'form-input rounded border px-3 py-2 w-full' } %>
        <p class="mt-2 text-sm text-gray-600">Please select your preferred date and time.</p>
      <% end %>
    </div>

    <%# Add quantity input field - Potentially make this conditional based on service type %>
    <% if @service.experience? %>
      <div class="mb-4">
        <%= form.label :quantity, "Number of Attendees", class: "block text-sm font-medium text-gray-700 mb-2" %>
        <%= form.number_field :quantity, min: 1, max: @service.max_bookings, class: "form-input rounded border px-3 py-2 w-full", id: 'booking_quantity' %>
        <p class="text-sm text-gray-500">Min: <%= @service.min_bookings %>, Max: <%= @service.max_bookings %>, Spots Remaining: <%= @service.spots %></p>
      </div>
    <% else %>
       <%# For standard services, quantity is always 1, submit as hidden field %>
       <%= form.hidden_field :quantity, value: 1, id: 'booking_quantity' %>
    <% end %>

    <%# Booking policy date & duration inputs always displayed early in the form %>
    <%# These are kept hidden but their values are synced for JS policy enforcement %>
    <div class="mb-4" style="display: none;">
      <label for="booking_date" class="block text-sm font-medium text-gray-700 mb-2">Date</label>
      <input type="date" id="booking_date" name="booking[date]" class="form-input rounded border px-3 py-2 w-full"<% if policy&.max_advance_days %> max="<%= (Date.current + policy.max_advance_days.days).strftime('%Y-%m-%d') %>"<% end %> />
    </div>

    <div class="mb-4" style="display: none;">
      <label for="booking_duration" class="block text-sm font-medium text-gray-700 mb-2">Duration (minutes)</label>
      <input type="number" id="booking_duration" name="booking[duration]" class="form-input rounded border px-3 py-2 w-full" value="<%= @service.duration %>"<% if policy&.min_duration_mins %> min="<%= policy.min_duration_mins %>"<% end %><% if policy&.max_duration_mins %> max="<%= policy.max_duration_mins %>"<% end %> />
    </div>

    <div class="mb-4">
      <%= form.label :notes, "Notes (Optional)", class: "block text-gray-700 text-sm font-bold mb-2" %>
      <%= form.text_area :notes, rows: 4, class: "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" %>
    </div>

    <%# Display Price/Duration and Payment Requirements %>
    <div class="mb-6 p-4 bg-gray-100 rounded">
      <p><strong>Duration:</strong> <%= @service.duration %> minutes</p>
      <p><strong>Price:</strong> <span id="total-booking-price"><%= number_to_currency(@booking.total_charge) %></span></p>
      
      <%# Payment requirement messaging %>
      <% if @service.experience? %>
        <div class="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded">
          <p class="text-yellow-800 text-sm">
            <strong>⚠️ Payment Required:</strong> This experience booking requires immediate payment to confirm your spot.
          </p>
        </div>
      <% else %>
        <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded">
          <p class="text-blue-800 text-sm">
            <strong>💳 Flexible Payment:</strong> Your booking will be confirmed immediately. You can pay now or after your service.
          </p>
        </div>
      <% end %>
    </div>

    <%# --- Add-on Products Section --- %>
    <% if @available_products.present? && @available_products.any? %>
      <div class="mb-8">
        <h2 class="text-xl font-semibold mb-4 text-gray-900">Add Products to Your Booking (Optional)</h2>
        
        <!-- Responsive Product Table -->
        <div class="overflow-x-auto bg-white rounded-lg shadow-sm border border-gray-200">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Product
                </th>
                <th class="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Price
                </th>
                <th class="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Stock
                </th>
                <th class="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Quantity
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <% @available_products.each do |product| %>
                <% product.product_variants.each do |variant| %>
                  <%# Find existing add-on for this variant if form is re-rendered with errors %>
                  <% existing_add_on = @booking.booking_product_add_ons.find { |addon| addon.product_variant_id == variant.id } %>
                  <% add_on_object = existing_add_on || @booking.booking_product_add_ons.build(product_variant: variant, quantity: 0) %> 
                  <%# Use a unique child_index for each potential new record %>
                  <%= form.fields_for :booking_product_add_ons, add_on_object, child_index: variant.id do |addOnFields| %>
                    <tr class="hover:bg-gray-50 transition-colors">
                      <!-- Product Info -->
                      <td class="px-3 sm:px-6 py-4">
                        <div class="flex items-start gap-3">
                          <!-- Product Icon/Link -->
                          <div class="flex-shrink-0 mt-1">
                            <%= link_to product_path(product), 
                                  target: "_blank", 
                                  class: "text-gray-400 hover:text-primary transition-colors",
                                  title: "View #{product.name} details" do %>
                              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                              </svg>
                            <% end %>
                          </div>
                          
                          <!-- Product Details -->
                          <div class="min-w-0 flex-1">
                            <div class="text-sm font-medium text-gray-900">
                              <%= product.name %>
                            </div>
                            <% if variant.name != "Default" %>
                              <div class="text-sm text-gray-500 mt-1">
                                <%= variant.name %>
                              </div>
                            <% end %>
                          </div>
                        </div>
                      </td>
                      
                      <!-- Price -->
                      <td class="px-3 sm:px-6 py-4 whitespace-nowrap">
                        <div class="text-sm font-semibold text-green-600">
                          <%= number_to_currency(variant.final_price) %>
                        </div>
                      </td>
                      
                      <!-- Stock -->
                      <td class="px-3 sm:px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                          <% if variant.stock_quantity > 0 %>
                            <div class="flex items-center">
                              <div class="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                              <span class="text-sm text-gray-900"><%= variant.stock_quantity %></span>
                            </div>
                          <% else %>
                            <div class="flex items-center">
                              <div class="w-2 h-2 bg-red-400 rounded-full mr-2"></div>
                              <span class="text-sm text-gray-500">Out of stock</span>
                            </div>
                          <% end %>
                        </div>
                      </td>
                      
                      <!-- Quantity Controls -->
                      <td class="px-3 sm:px-6 py-4 whitespace-nowrap">
                        <%= addOnFields.hidden_field :product_variant_id, value: variant.id %>
                        
                        <div class="flex items-center gap-2 max-w-32">
                          <!-- Decrease Button -->
                          <button type="button" 
                                  class="quantity-btn decrease-btn w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center text-gray-500 hover:text-gray-700 hover:border-gray-400 transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-1"
                                  data-target="booking_booking_product_add_ons_attributes_<%= variant.id %>_quantity"
                                  <%= 'disabled' if variant.stock_quantity == 0 %>>
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
                            </svg>
                          </button>
                          
                          <!-- Quantity Input -->
                          <%= addOnFields.number_field :quantity, 
                                min: 0, 
                                max: variant.stock_quantity + (existing_add_on&.quantity || 0),
                                value: addOnFields.object.quantity || 0,
                                class: "quantity-input w-12 text-center border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-primary focus:border-transparent #{variant.stock_quantity == 0 ? 'bg-gray-100 text-gray-400' : ''}",
                                readonly: variant.stock_quantity == 0,
                                id: "booking_booking_product_add_ons_attributes_#{variant.id}_quantity" %>
                          
                          <!-- Increase Button -->
                          <button type="button" 
                                  class="quantity-btn increase-btn w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center text-gray-500 hover:text-gray-700 hover:border-gray-400 transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-1"
                                  data-target="booking_booking_product_add_ons_attributes_<%= variant.id %>_quantity"
                                  data-max="<%= variant.stock_quantity + (existing_add_on&.quantity || 0) %>"
                                  <%= 'disabled' if variant.stock_quantity == 0 %>>
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                            </svg>
                          </button>
                        </div>
                      </td>
                    </tr>
                  <% end %>
                <% end %>
              <% end %>
            </tbody>
          </table>
        </div>
        
        <!-- Help Text -->
        <p class="text-sm text-gray-500 mt-3 px-3 sm:px-0">
          <svg class="inline w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          Set quantity for any add-on product you wish to include. Leave at 0 to skip. Click the 
          <svg class="inline w-3 h-3 mx-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
          </svg>
          icon to view product details.
        </p>
      </div>
    <% end %>

    <%# Promo Code Section %>
    <div class="mb-6 p-4 bg-blue-50 border border-blue-200 rounded">
      <h3 class="text-lg font-semibold mb-3 text-blue-900">
        <svg class="inline w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
        </svg>
        Have a Promo Code?
      </h3>
      <div class="flex flex-col sm:flex-row gap-3">
        <%= form.text_field :promo_code, 
                           placeholder: "Enter promo code", 
                           class: "flex-1 shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:border-blue-500",
                           id: "promo_code_field" %>
        <button type="button" 
                id="apply_promo_code" 
                class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded focus:outline-none focus:shadow-outline transition-colors">
          Apply Code
        </button>
      </div>
      <div id="promo_code_result" class="mt-3 hidden">
        <!-- Promo code validation result will appear here -->
      </div>
    </div>

    <div class="flex items-center justify-between">
      <%# Show submit button if user is client or staff members are available %>
      <% if current_user&.role == 'client' || current_user.nil? || @service.staff_members.any? %>
        <%= form.submit "Confirm Booking", class: "bg-primary-500 hover:bg-primary-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline cursor-pointer" %>
      <% else %>
        <span class="text-gray-500">(Booking unavailable)</span>
      <% end %>
      <%= link_to 'Cancel', tenant_services_page_path, class: "inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800" %>
    </div>
  <% end %>

</div>

<script>
// Handle dynamic customer field toggling for staff/manager users
document.addEventListener('DOMContentLoaded', function() {
  // Customer Dropdown Functionality (similar to service dropdown)
  const customerDropdownButton = document.querySelector('[data-customer-dropdown-target="button"]');
  const customerDropdownMenu = document.querySelector('[data-customer-dropdown-target="menu"]');
  const customerDropdownOptions = document.querySelectorAll('[data-customer-dropdown-target="option"]');
  const customerDropdownText = document.querySelector('.customer-dropdown-text');
  const customerDropdownArrow = customerDropdownButton?.querySelector('svg');
  const customerHiddenField = document.getElementById('tenant_customer_id');
  
  // Only proceed if customer dropdown elements exist (staff/manager users only)
  if (!customerDropdownButton || !customerDropdownMenu) {
    return;
  }
  
  let selectedCustomerId = '<%= @booking.tenant_customer_id || "" %>';
  let customerDropdownButtonTouched = false;
    
  // Initialize customer fields display based on current selection
  function initializeCustomerFields() {
    const newCustomerFields = document.getElementById('new-tenant-customer-fields');
    if (newCustomerFields) {
      if (selectedCustomerId === 'new') {
        newCustomerFields.classList.remove('hidden');
      } else {
        newCustomerFields.classList.add('hidden');
      }
    }
  }
  
  // Call initialization
  initializeCustomerFields();
  
  // Shared function to toggle customer dropdown
  function toggleCustomerDropdown(e) {
    e.preventDefault();
    e.stopPropagation();
    
    // Check current state by examining classes and inline styles
    const isHidden = customerDropdownMenu.classList.contains('hidden') || 
                    customerDropdownMenu.style.display === 'none' || 
                    customerDropdownMenu.style.display === '';
    
    if (isHidden) {
      // Show dropdown
      customerDropdownMenu.classList.remove('hidden');
      customerDropdownArrow?.classList.add('rotate-180');
      
      // Mobile-specific positioning adjustments
      if (window.innerWidth <= 640) {
        customerDropdownMenu.style.position = 'absolute';
        customerDropdownMenu.style.top = '100%';
        customerDropdownMenu.style.left = '0';
        customerDropdownMenu.style.right = '0';
        customerDropdownMenu.style.zIndex = '50';
        customerDropdownMenu.style.marginTop = '0.25rem';
      }
    } else {
      // Hide dropdown
      customerDropdownMenu.classList.add('hidden');
      customerDropdownArrow?.classList.remove('rotate-180');
      
      // Clear mobile-specific inline styles
      if (window.innerWidth <= 640) {
        customerDropdownMenu.style.display = '';
        customerDropdownMenu.style.position = '';
        customerDropdownMenu.style.top = '';
        customerDropdownMenu.style.left = '';
        customerDropdownMenu.style.right = '';
        customerDropdownMenu.style.zIndex = '';
        customerDropdownMenu.style.marginTop = '';
      }
    }
  }
  
  // Toggle customer dropdown on click
  customerDropdownButton?.addEventListener('click', function(e) {
    customerDropdownButtonTouched = true;
    toggleCustomerDropdown(e);
    setTimeout(() => { customerDropdownButtonTouched = false; }, 100);
  });
  
  // Toggle customer dropdown on touch (for mobile)
  customerDropdownButton?.addEventListener('touchend', function(e) {
    customerDropdownButtonTouched = true;
    toggleCustomerDropdown(e);
    setTimeout(() => { customerDropdownButtonTouched = false; }, 100);
  });
  
  // Shared function for customer option selection
  function selectCustomerOption(element, e) {
    e.preventDefault();
    e.stopPropagation();
    
    const customerId = element.dataset.customerId;
    const customerName = element.dataset.customerName;
    
    // Update button text
    customerDropdownText.textContent = customerName;
    selectedCustomerId = customerId;
    
    // Update hidden field
    customerHiddenField.value = customerId;
    
    // Update selected state
    customerDropdownOptions.forEach(opt => {
      const checkIcon = opt.querySelector('svg');
      if (checkIcon) checkIcon.remove();
    });
    
    // Add check icon to selected option
    const checkIcon = document.createElement('span');
    checkIcon.className = 'absolute inset-y-0 right-2 flex items-center text-blue-600';
    checkIcon.innerHTML = `
      <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
      </svg>
    `;
    element.appendChild(checkIcon);
    
    // Close dropdown properly
    customerDropdownMenu.classList.add('hidden');
    customerDropdownArrow?.classList.remove('rotate-180');
    
    // Clear mobile-specific inline styles (critical for mobile)
    if (window.innerWidth <= 640) {
      customerDropdownMenu.style.display = '';
      customerDropdownMenu.style.position = '';
      customerDropdownMenu.style.top = '';
      customerDropdownMenu.style.left = '';
      customerDropdownMenu.style.right = '';
      customerDropdownMenu.style.zIndex = '';
      customerDropdownMenu.style.marginTop = '';
    }
    
    // Handle new customer fields toggle
    const newCustomerFields = document.getElementById('new-tenant-customer-fields');
    if (newCustomerFields) {
      if (customerId === 'new') {
        // Show new customer fields - use aggressive approach
        newCustomerFields.className = 'mb-4'; // Remove hidden, keep only mb-4
        newCustomerFields.style.display = 'block';
        newCustomerFields.style.visibility = 'visible';
        newCustomerFields.style.opacity = '1';
        
        // Make new customer fields required - using more specific selectors
        const nameField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="name"]');
        const phoneField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="phone"]');
        
        if (nameField) nameField.required = true;
        if (phoneField) phoneField.required = true;
        
      } else {
        // Hide new customer fields
        newCustomerFields.className = 'hidden mb-4'; // Ensure hidden class is applied
        newCustomerFields.style.display = 'none';
        newCustomerFields.style.visibility = 'hidden';
        newCustomerFields.style.opacity = '0';
        
        // Remove required attributes - using more specific selectors
        const nameField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="name"]');
        const emailField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="email"]');
        const phoneField = newCustomerFields.querySelector('input[name*="tenant_customer_attributes"][name*="phone"]');
        
        if (nameField) nameField.required = false;
        if (emailField) emailField.required = false;
        if (phoneField) phoneField.required = false;
        
        // Clear the fields
        if (nameField) nameField.value = '';
        if (emailField) emailField.value = '';
        if (phoneField) phoneField.value = '';
        
      }
    }
  }
  
  // Handle customer option selection
  customerDropdownOptions.forEach(option => {
    option.addEventListener('click', function(e) {
      selectCustomerOption(this, e);
    });
    
    // Handle touch for mobile options
    option.addEventListener('touchend', function(e) {
      selectCustomerOption(this, e);
    });
  });
  
  // Close customer dropdown when clicking outside
  document.addEventListener('click', function(event) {
    if (!event.target.closest('.customer-dropdown')) {
      if (!customerDropdownMenu?.classList.contains('hidden')) {
        customerDropdownMenu?.classList.add('hidden');
        customerDropdownArrow?.classList.remove('rotate-180');
        
        // Clear mobile styles if needed
        if (window.innerWidth <= 640) {
          customerDropdownMenu.style.display = '';
          customerDropdownMenu.style.position = '';
          customerDropdownMenu.style.top = '';
          customerDropdownMenu.style.left = '';
          customerDropdownMenu.style.right = '';
          customerDropdownMenu.style.zIndex = '';
          customerDropdownMenu.style.marginTop = '';
        }
      }
    }
  });
  
  // Handle touch outside for mobile
  document.addEventListener('touchend', function(event) {
    // Don't close if button was just touched
    if (customerDropdownButtonTouched) {
      return;
    }
    
    if (!event.target.closest('.customer-dropdown')) {
      const isOpen = !customerDropdownMenu?.classList.contains('hidden') && 
                    customerDropdownMenu?.style.display !== 'none' && 
                    customerDropdownMenu?.style.display !== '';
      if (isOpen) {
        customerDropdownMenu?.classList.add('hidden');
        customerDropdownArrow?.classList.remove('rotate-180');
        
        // Clear mobile styles if needed
        if (window.innerWidth <= 640) {
          customerDropdownMenu.style.display = '';
          customerDropdownMenu.style.position = '';
          customerDropdownMenu.style.top = '';
          customerDropdownMenu.style.left = '';
          customerDropdownMenu.style.right = '';
          customerDropdownMenu.style.zIndex = '';
          customerDropdownMenu.style.marginTop = '';
        }
      }
    }
  });
  
  // Handle escape key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      if (!customerDropdownMenu?.classList.contains('hidden')) {
        customerDropdownMenu?.classList.add('hidden');
        customerDropdownArrow?.classList.remove('rotate-180');
        
        // Clear mobile styles if needed
        if (window.innerWidth <= 640) {
          customerDropdownMenu.style.display = '';
          customerDropdownMenu.style.position = '';
          customerDropdownMenu.style.top = '';
          customerDropdownMenu.style.left = '';
          customerDropdownMenu.style.right = '';
          customerDropdownMenu.style.zIndex = '';
          customerDropdownMenu.style.marginTop = '';
        }
      }
    }
  });

  // Quantity Controls Functionality
  document.addEventListener('click', function(e) {
    if (e.target.closest('.quantity-btn')) {
      e.preventDefault();
      const button = e.target.closest('.quantity-btn');
      const targetId = button.getAttribute('data-target');
      const input = document.getElementById(targetId);
      
      if (!input) return;
      
      const currentValue = parseInt(input.value) || 0;
      const min = parseInt(input.getAttribute('min')) || 0;
      const max = parseInt(input.getAttribute('max')) || 999;
      
      if (button.classList.contains('decrease-btn')) {
        // Decrease quantity
        const newValue = Math.max(min, currentValue - 1);
        input.value = newValue;
      } else if (button.classList.contains('increase-btn')) {
        // Increase quantity
        const newValue = Math.min(max, currentValue + 1);
        input.value = newValue;
      }
      
      // Trigger change event for any listeners
      input.dispatchEvent(new Event('change', { bubbles: true }));
    }
  });

  // Handle direct input changes to ensure they stay within bounds
  document.addEventListener('input', function(e) {
    if (e.target.classList.contains('quantity-input')) {
      const input = e.target;
      const value = parseInt(input.value) || 0;
      const min = parseInt(input.getAttribute('min')) || 0;
      const max = parseInt(input.getAttribute('max')) || 999;
      
      if (value < min) {
        input.value = min;
      } else if (value > max) {
        input.value = max;
      }
    }
  });
});
</script>

<style>
  /* Customer Dropdown Styles (similar to service dropdown) */
  .customer-dropdown {
    position: relative;
  }
  
  .customer-dropdown-button {
    transition: all 0.2s ease-in-out;
  }
  
  .customer-dropdown-button:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  .customer-dropdown-menu {
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    border: 1px solid #e5e7eb;
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }
  
  .customer-option {
    transition: all 0.15s ease-in-out;
    min-height: 60px;
    display: flex;
    align-items: center;
  }
  
  .customer-option:active {
    background-color: #dbeafe;
    transform: scale(0.98);
  }
  
  .customer-option:last-child {
    border-bottom: none;
  }
  
  /* Arrow rotation animation */
  .customer-dropdown-button svg {
    transition: transform 0.2s ease-in-out;
  }
  
  .rotate-180 {
    transform: rotate(180deg);
  }
  
  /* Hidden class definition */
  .hidden {
    display: none !important;
  }
  
  /* New customer fields specific styling */
  #new-tenant-customer-fields {
    display: none;
  }
  
  #new-tenant-customer-fields:not(.hidden) {
    display: block !important;
  }
  
  /* Mobile improvements */
  @media (max-width: 640px) {
    .customer-dropdown-menu {
      position: absolute !important;
      left: 0 !important;
      right: 0 !important;
      top: 100% !important;
      bottom: auto !important;
      width: 100% !important;
      max-height: 60vh !important;
      z-index: 50 !important;
      margin-top: 0.25rem !important;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05) !important;
      border: 1px solid #e5e7eb !important;
    }
    
    .customer-dropdown {
      position: relative !important;
      z-index: 40 !important;
    }
    
    .customer-option {
      min-height: 70px;
      padding: 1rem;
    }
    
    .customer-dropdown-button {
      font-size: 1rem;
      padding: 1rem;
    }
    
    /* Ensure dropdown appears above other content */
    .customer-dropdown-menu:not(.hidden) {
      display: block !important;
      opacity: 1 !important;
      transform: translateY(0) !important;
    }
  }
  
  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    .customer-dropdown-button svg,
    .customer-option {
      transition: none;
    }
  }
</style>
