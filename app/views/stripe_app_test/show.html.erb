<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stripe App Deep Link Test</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        .test-section {
            background: #f8f9fa;
            padding: 20px;
            margin: 20px 0;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }
        .test-button {
            background: #6772e5;
            color: white;
            border: none;
            padding: 12px 24px;
            margin: 8px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            min-width: 200px;
        }
        .test-button:hover {
            background: #5469d4;
        }
        .fallback-button {
            background: #87ceeb;
            color: #333;
        }
        .fallback-button:hover {
            background: #7bb3d9;
        }
        .app-store-button {
            background: #28a745;
        }
        .app-store-button:hover {
            background: #218838;
        }
        .url-display {
            background: #e9ecef;
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
            font-family: monospace;
            font-size: 12px;
            word-break: break-all;
            border-left: 4px solid #6772e5;
        }
        .instructions {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
        }
        .result-log {
            background: #f1f3f4;
            padding: 15px;
            margin: 15px 0;
            border-radius: 6px;
            font-family: monospace;
            font-size: 14px;
            max-height: 200px;
            overflow-y: auto;
        }
        .success { color: #28a745; }
        .error { color: #dc3545; }
        .info { color: #6c757d; }
    </style>
</head>
<body>
    <h1>üß™ Stripe App Deep Link Validation Test</h1>
    
    <div class="instructions">
        <h3>üì± Enhanced Testing Instructions:</h3>
        <ol>
            <li><strong>Create Test PaymentIntent:</strong> 
                <details>
                    <summary>Click to see PaymentIntent creation code</summary>
                    <pre style="background: #f4f4f4; padding: 10px; margin: 10px 0; border-radius: 4px;">
# In Rails console or Stripe Dashboard API explorer:
intent = Stripe::PaymentIntent.create({
  amount: 1000, # $10.00
  currency: 'usd',
  payment_method_types: ['card_present'],
  capture_method: 'automatic'
}, {
  stripe_account: 'your_connected_account_id' # if using Connect
})

puts intent.id # Use this ID in the test
                    </pre>
                </details>
            </li>
            <li><strong>Install Stripe Dashboard App:</strong> Make sure you have the official Stripe Dashboard app installed on your iOS device</li>
            <li><strong>Enter Real PaymentIntent:</strong> When prompted, enter your actual test PaymentIntent ID (starts with pi_)</li>
            <li><strong>Open this page on your iPhone:</strong> Navigate to this test page in Safari on your phone</li>
            <li><strong>Test URL formats:</strong> Try the most likely candidates first (stripe:// schemes)</li>
            <li><strong>Document results:</strong> The log below will track success/failure for each attempt</li>
        </ol>
        <div style="background: #e3f2fd; padding: 10px; border-radius: 4px; margin-top: 10px;">
            <strong>üí° Pro Tip:</strong> Use "Test All URL Formats" to automatically try all variations in sequence!
        </div>
    </div>

    <div class="test-section">
        <h3>üÜï Test 1: stripe:// URL Schemes (Most Likely)</h3>
        <p>Testing the most accurate URL formats:</p>
        <div class="url-display" id="stripe-scheme-url-1"></div>
        <button class="test-button" onclick="testStripeScheme1()">Test stripe://payment_intents/</button>
        
        <div class="url-display" id="stripe-scheme-url-2"></div>
        <button class="test-button" onclick="testStripeScheme2()">Test stripe://terminal/collect-payment</button>
        
        <div class="url-display" id="stripe-scheme-url-3"></div>
        <button class="test-button" onclick="testStripeScheme3()">Test stripe://collect-payment</button>
    </div>

    <div class="test-section">
        <h3>üîÑ Test 2: Enhanced Dashboard Schemes</h3>
        <p>Testing stripe-dashboard:// with terminal paths:</p>
        <div class="url-display" id="dashboard-terminal-url"></div>
        <button class="test-button" onclick="testDashboardTerminal()">Test stripe-dashboard://terminal/</button>
        
        <div class="url-display" id="dashboard-scheme-url"></div>
        <button class="test-button" onclick="testDashboardScheme()">Test stripe-dashboard://payment_intents/</button>
    </div>

    <div class="test-section">
        <h3>‚ùå Test 3: Previously Failed Formats</h3>
        <p>These failed in initial testing:</p>
        <div class="url-display" id="universal-url"></div>
        <button class="test-button" onclick="testUniversalLink()">Test Universal Link (Failed)</button>
    </div>

    <div class="test-section">
        <h3>üåê Test 4: Web Dashboard Fallback</h3>
        <p>Should open Stripe web dashboard in browser:</p>
        <div class="url-display" id="web-url"></div>
        <button class="test-button fallback-button" onclick="testWebFallback()">Test Web Dashboard</button>
    </div>

    <div class="test-section">
        <h3>üì± Test 5: App Store Link</h3>
        <p>Link to install Stripe Dashboard app:</p>
        <button class="test-button app-store-button" onclick="openAppStore()">Open App Store</button>
    </div>

    <div class="test-section">
        <h3>üöÄ Test 6: Progressive Fallback</h3>
        <p>Tests all formats in sequence:</p>
        <button class="test-button" onclick="testAllFormats()">Test All URL Formats</button>
    </div>

    <div class="result-log" id="log">
        <div class="info">Test results will appear here...</div>
    </div>

    <script>
        // Real test PaymentIntent ID - REPLACE WITH YOUR ACTUAL TEST PAYMENT INTENT
        const testPaymentIntentId = prompt('Enter your test PaymentIntent ID (starts with pi_):') || 'pi_test_123456789';
        const testReturnUrl = 'https://bizblasts.com/stripe_app_return?session_token=test123';
        const encodedReturnUrl = encodeURIComponent(testReturnUrl);

        // Enhanced URL formats to test
        const testUrls = {
            // Previously tested (failed)
            universalLink: `https://dashboard.stripe.app.link/payment_intents/${testPaymentIntentId}?return_url=${encodedReturnUrl}`,
            dashboardScheme: `stripe-dashboard://payment_intents/${testPaymentIntentId}?return_url=${encodedReturnUrl}`,
            
            // New accurate formats to test
            stripeScheme1: `stripe://payment_intents/${testPaymentIntentId}?return_url=${encodedReturnUrl}`,
            stripeScheme2: `stripe://terminal/collect-payment?payment_intent=${testPaymentIntentId}&return_url=${encodedReturnUrl}`,
            stripeScheme3: `stripe://collect-payment?payment_intent=${testPaymentIntentId}&return_url=${encodedReturnUrl}`,
            
            // Alternative dashboard formats
            dashboardTerminal: `stripe-dashboard://terminal/collect-payment?payment_intent=${testPaymentIntentId}&return_url=${encodedReturnUrl}`,
            
            // Web fallback
            webDashboard: `https://dashboard.stripe.com/terminal/collect-payment?payment_intent=${testPaymentIntentId}&return_url=${encodedReturnUrl}`
        };

        // Display URLs in the interface
        document.getElementById('stripe-scheme-url-1').textContent = testUrls.stripeScheme1;
        document.getElementById('stripe-scheme-url-2').textContent = testUrls.stripeScheme2;
        document.getElementById('stripe-scheme-url-3').textContent = testUrls.stripeScheme3;
        document.getElementById('dashboard-terminal-url').textContent = testUrls.dashboardTerminal;
        document.getElementById('dashboard-scheme-url').textContent = testUrls.dashboardScheme;
        document.getElementById('universal-url').textContent = testUrls.universalLink;
        document.getElementById('web-url').textContent = testUrls.webDashboard;

        function logResult(message, type = 'info') {
            const log = document.getElementById('log');
            const timestamp = new Date().toLocaleTimeString();
            const entry = document.createElement('div');
            entry.className = type;
            entry.textContent = `[${timestamp}] ${message}`;
            log.appendChild(entry);
            log.scrollTop = log.scrollHeight;
        }

        function detectAppLaunch(url, timeout = 3000) {
            return new Promise((resolve, reject) => {
                const startTime = Date.now();
                
                // Try to detect if the page loses focus (app opened)
                const checkFocus = () => {
                    if (document.hidden || !document.hasFocus()) {
                        resolve(true);
                    }
                };

                // Listen for visibility changes
                document.addEventListener('visibilitychange', checkFocus);
                window.addEventListener('blur', checkFocus);

                // Attempt the deep link
                window.location.href = url;

                // Cleanup and resolve/reject after timeout
                setTimeout(() => {
                    document.removeEventListener('visibilitychange', checkFocus);
                    window.removeEventListener('blur', checkFocus);
                    
                    const elapsed = Date.now() - startTime;
                    if (elapsed < timeout && (document.hidden || !document.hasFocus())) {
                        resolve(true);
                    } else {
                        reject(false);
                    }
                }, timeout);
            });
        }

        // New enhanced test functions
        async function testStripeScheme1() {
            logResult('Testing stripe://payment_intents/ scheme...', 'info');
            try {
                await detectAppLaunch(testUrls.stripeScheme1);
                logResult('‚úÖ stripe://payment_intents/ SUCCESS - Stripe app opened!', 'success');
            } catch {
                logResult('‚ùå stripe://payment_intents/ FAILED - App did not open', 'error');
            }
        }

        async function testStripeScheme2() {
            logResult('Testing stripe://terminal/collect-payment scheme...', 'info');
            try {
                await detectAppLaunch(testUrls.stripeScheme2);
                logResult('‚úÖ stripe://terminal/collect-payment SUCCESS - Stripe app opened!', 'success');
            } catch {
                logResult('‚ùå stripe://terminal/collect-payment FAILED - App did not open', 'error');
            }
        }

        async function testStripeScheme3() {
            logResult('Testing stripe://collect-payment scheme...', 'info');
            try {
                await detectAppLaunch(testUrls.stripeScheme3);
                logResult('‚úÖ stripe://collect-payment SUCCESS - Stripe app opened!', 'success');
            } catch {
                logResult('‚ùå stripe://collect-payment FAILED - App did not open', 'error');
            }
        }

        async function testDashboardTerminal() {
            logResult('Testing stripe-dashboard://terminal/ scheme...', 'info');
            try {
                await detectAppLaunch(testUrls.dashboardTerminal);
                logResult('‚úÖ stripe-dashboard://terminal/ SUCCESS - Stripe app opened!', 'success');
            } catch {
                logResult('‚ùå stripe-dashboard://terminal/ FAILED - App did not open', 'error');
            }
        }

        async function testDashboardScheme() {
            logResult('Testing stripe-dashboard://payment_intents/ scheme...', 'info');
            try {
                await detectAppLaunch(testUrls.dashboardScheme);
                logResult('‚úÖ stripe-dashboard://payment_intents/ SUCCESS - Stripe app opened!', 'success');
            } catch {
                logResult('‚ùå stripe-dashboard://payment_intents/ FAILED - App did not open', 'error');
            }
        }

        async function testUniversalLink() {
            logResult('Testing Universal Link (previously failed)...', 'info');
            try {
                await detectAppLaunch(testUrls.universalLink);
                logResult('‚úÖ Universal Link SUCCESS - Stripe app opened!', 'success');
            } catch {
                logResult('‚ùå Universal Link FAILED - App did not open (expected)', 'error');
            }
        }

        function testWebFallback() {
            logResult('Opening Web Dashboard fallback...', 'info');
            window.open(testUrls.webDashboard, '_blank');
            logResult('üìÑ Web Dashboard opened in new tab', 'info');
        }

        function openAppStore() {
            logResult('Opening App Store...', 'info');
            window.open('https://apps.apple.com/app/stripe-dashboard/id978516833', '_blank');
            logResult('üè™ App Store opened', 'info');
        }

        async function testAllFormats() {
            logResult('üöÄ Starting Comprehensive URL Format Test...', 'info');
            logResult(`üìã Testing with PaymentIntent: ${testPaymentIntentId}`, 'info');
            
            const urlsToTest = [
                { name: 'stripe://payment_intents/', url: testUrls.stripeScheme1 },
                { name: 'stripe://terminal/collect-payment', url: testUrls.stripeScheme2 },
                { name: 'stripe://collect-payment', url: testUrls.stripeScheme3 },
                { name: 'stripe-dashboard://terminal/', url: testUrls.dashboardTerminal },
                { name: 'stripe-dashboard://payment_intents/', url: testUrls.dashboardScheme },
                { name: 'Universal Link', url: testUrls.universalLink }
            ];

            for (let i = 0; i < urlsToTest.length; i++) {
                const test = urlsToTest[i];
                logResult(`Attempt ${i + 1}: ${test.name}...`, 'info');
                
                try {
                    await detectAppLaunch(test.url, 3000);
                    logResult(`‚úÖ SUCCESS: ${test.name} opened Stripe app!`, 'success');
                    logResult(`üéØ WINNER: Use this format: ${test.name}`, 'success');
                    return; // Stop testing on first success
                } catch {
                    logResult(`‚ùå ${test.name} failed`, 'error');
                }
                
                // Brief delay between attempts
                if (i < urlsToTest.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }

            // If all deep links fail, open web fallback
            logResult('‚ùå All deep link attempts failed', 'error');
            logResult('üìÑ Opening web dashboard as final fallback...', 'info');
            window.open(testUrls.webDashboard, '_blank');
            logResult('üí° Recommendation: Contact Stripe Support for official deep link spec', 'info');
        }

        // Initialize
        logResult('üß™ Stripe App Deep Link Test Ready', 'info');
        logResult('üì± Make sure you have the Stripe Dashboard app installed!', 'info');
        
        // Detect if running on iOS
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        if (isIOS) {
            logResult('‚úÖ iOS device detected - deep links should work', 'success');
        } else {
            logResult('‚ö†Ô∏è  Non-iOS device detected - deep links may not work properly', 'error');
        }
    </script>
</body>
</html>