<!-- Form fields for booking -->
<%= form_with(model: booking, url: submit_url, method: booking.new_record? ? :post : :patch, 
            local: !admin_mode) do |f| %>

  <h2 class="text-xl font-bold mb-4"><%= booking.new_record? ? "New Booking" : "Edit Booking" %></h2>
  
  <!-- Hidden fields for admin mode -->
  <% if admin_mode && booking.tenant_customer_id.present? %>
    <%= f.hidden_field :tenant_customer_id %>
  <% end %>
  
  <!-- Service selection -->
  <div class="form-group mb-4">
    <%= f.label :service_id, class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= render 'shared/rich_dropdown',
        collection: services,
        field_name: "#{f.object_name}[service_id]",
        selected_value: f.object.service_id,
        prompt_text: "Select a service",
        value_method: :id,
        text_method: :name,
        price_method: :price,
        duration_method: :duration,
        required: true,
        dropdown_id: "booking_service_dropdown" %>
  </div>
  
  <!-- Staff member selection -->
  <div class="form-group mb-4">
    <%= f.label :staff_member_id, class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= render 'shared/rich_dropdown',
        collection: staff_members,
        field_name: "#{f.object_name}[staff_member_id]",
        selected_value: f.object.staff_member_id,
        prompt_text: "Select a staff member",
        value_method: :id,
        text_method: :name,
        required: true,
        dropdown_id: "booking_staff_dropdown" %>
  </div>
  
  <!-- Date and time selection with navigation -->
  <div class="form-group mb-4">
    <div class="flex items-center mb-2">
      <%= f.label :date, class: "block text-sm font-medium text-gray-700" %>
      <div class="date-navigation ml-auto flex">
        <button type="button" class="cursor-pointer text-blue-500 hover:text-blue-700 px-2"
               id="booking_prev_date_btn"
               data-direction="prev">
          &larr; Previous
        </button>
        <button type="button" class="cursor-pointer text-blue-500 hover:text-blue-700 px-2"
               id="booking_next_date_btn"
               data-direction="next">
          Next &rarr;
        </button>
      </div>
    </div>
    <%= f.date_field :date, value: date_value, required: true, 
                    class: "form-input rounded border px-3 py-2 w-full",
                    id: "booking_date_field" %>
  </div>
  
  <!-- Time selection -->
  <div class="form-group mb-4">
    <%= f.label :time, class: "block text-sm font-medium text-gray-700 mb-1" %>
    <% if time_value.present? %>
      <%= f.time_field :time, value: time_value, required: true, 
                      class: "form-input rounded border px-3 py-2 w-full",
                      id: "booking_time_field" %>
    <% else %>
      <%= f.select :time, [["Select a time", ""]], {}, 
                  { required: true, class: "form-select rounded border px-3 py-2 w-full",
                    id: "booking_time_field" } %>
    <% end %>
  </div>
  
  <% if include_customer_fields %>
    <!-- Customer information -->
    <fieldset class="border rounded p-4 mb-4">
      <legend class="text-sm font-medium text-gray-700 px-2">Customer Information</legend>
      
      <% if admin_mode && booking.tenant_customer_id.nil? %>
        <div class="form-group mb-4">
          <%= f.label :tenant_customer_id, "Select Existing Customer", class: "block text-sm font-medium text-gray-700 mb-1" %>
          <%= render 'shared/rich_dropdown',
              collection: TenantCustomer.order(:first_name, :last_name),
              field_name: "#{f.object_name}[tenant_customer_id]",
              selected_value: f.object.tenant_customer_id,
              prompt_text: "Create new customer",
              value_method: :id,
              text_method: :name_with_email,
              dropdown_id: "booking_customer_dropdown" %>
        </div>
      <% end %>
      
      <div class="form-group mb-4">
        <%= f.label :customer_name, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= f.text_field :customer_name, required: include_customer_fields, 
                         value: booking.tenant_customer&.name,
                         class: "form-input rounded border px-3 py-2 w-full",
                         id: "booking_customer_name_field" %>
      </div>
      
      <div class="form-group mb-4">
        <%= f.label :customer_email, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= f.email_field :customer_email, required: include_customer_fields,
                          value: booking.tenant_customer&.email, 
                          class: "form-input rounded border px-3 py-2 w-full",
                          id: "booking_customer_email_field" %>
      </div>
      
      <div class="form-group mb-4">
        <%= f.label :customer_phone, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= f.telephone_field :customer_phone, value: booking.tenant_customer&.phone,
                             class: "form-input rounded border px-3 py-2 w-full", 
                             id: "booking_customer_phone_field" %>
      </div>
    </fieldset>
  <% end %>
  
  <!-- Notes -->
  <div class="form-group mb-4">
    <%= f.label :notes, "Notes (Optional)", class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= f.text_area :notes, rows: 3, class: "form-textarea rounded border px-3 py-2 w-full",
                   id: "booking_notes_field" %>
  </div>
  
  <% if admin_mode %>
    <!-- Status (admin only) -->
    <div class="form-group mb-4">
      <%= f.label :status, class: "block text-sm font-medium text-gray-700 mb-1" %>
      <%= render 'shared/rich_dropdown',
          collection: booking.class.statuses.keys.map { |status| OpenStruct.new(id: status, name: status.humanize) },
          field_name: "#{f.object_name}[status]",
          selected_value: booking.status,
          prompt_text: "Select status",
          value_method: :id,
          text_method: :name,
          dropdown_id: "booking_status_dropdown" %>
    </div>
    
    <!-- Amount (admin only) -->
    <div class="form-group mb-4">
      <%= f.label :amount, class: "block text-sm font-medium text-gray-700 mb-1" %>
      <div class="flex">
        <span class="inline-flex items-center px-3 rounded-l border border-r-0 border-gray-300 bg-gray-50 text-gray-500">$</span>
        <%= f.number_field :amount, step: 0.01, class: "form-input rounded-r border px-3 py-2 flex-1" %>
      </div>
    </div>
  <% end %>
  
  <!-- Form actions -->
  <div class="form-actions flex justify-between">
    <button type="button" class="cursor-pointer bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
           id="booking_hide_form_btn">
      Cancel
    </button>
    <button type="submit" class="cursor-pointer bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
           id="booking_submit_btn">
      <%= submit_text %>
    </button>
  </div>
<% end %>

<script>
// Handle booking form dynamic behavior
function initializeBookingForm() {
  // Handle customer field toggling in admin mode
  const customerIdField = document.getElementById('booking_customer_dropdown_hidden');
  const customerNameField = document.getElementById('booking_customer_name_field');
  const customerEmailField = document.getElementById('booking_customer_email_field');
  const customerPhoneField = document.getElementById('booking_customer_phone_field');
  
  if (customerIdField) {
    customerIdField.addEventListener('change', function() {
      const isNewCustomer = this.value === '';
      
      // Show/hide individual customer fields based on selection
      if (customerNameField) {
        customerNameField.style.display = isNewCustomer ? 'block' : 'none';
        customerNameField.required = isNewCustomer;
      }
      if (customerEmailField) {
        customerEmailField.style.display = isNewCustomer ? 'block' : 'none';
        customerEmailField.required = isNewCustomer;
      }
      if (customerPhoneField) {
        customerPhoneField.style.display = isNewCustomer ? 'block' : 'none';
      }
    });
    
    // Initialize on page load
    customerIdField.dispatchEvent(new Event('change'));
  }
  
  // Handle date navigation
  const prevDateBtn = document.getElementById('booking_prev_date_btn');
  const nextDateBtn = document.getElementById('booking_next_date_btn');
  const dateField = document.getElementById('booking_date_field');
  
  if (prevDateBtn && dateField) {
    prevDateBtn.addEventListener('click', function() {
      const currentDate = new Date(dateField.value);
      currentDate.setDate(currentDate.getDate() - 1);
      dateField.value = currentDate.toISOString().split('T')[0];
      // Trigger change event for any listeners
      dateField.dispatchEvent(new Event('change'));
    });
  }
  
  if (nextDateBtn && dateField) {
    nextDateBtn.addEventListener('click', function() {
      const currentDate = new Date(dateField.value);
      currentDate.setDate(currentDate.getDate() + 1);
      dateField.value = currentDate.toISOString().split('T')[0];
      // Trigger change event for any listeners
      dateField.dispatchEvent(new Event('change'));
    });
  }
  
  // Handle form hide/cancel
  const hideFormBtn = document.getElementById('booking_hide_form_btn');
  if (hideFormBtn) {
    hideFormBtn.addEventListener('click', function() {
      // Find and hide the booking overlay if it exists
      const overlay = document.querySelector('.booking-overlay');
      if (overlay) {
        overlay.classList.add('hidden');
      }
    });
  }
}

// Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
document.addEventListener('DOMContentLoaded', initializeBookingForm);
document.addEventListener('turbo:load', initializeBookingForm);
</script> 