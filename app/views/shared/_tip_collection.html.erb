<% 
  # Tip collection partial
  # Usage: render 'shared/tip_collection', order: @order, base_amount: @order.total_amount
  # or: render 'shared/tip_collection', invoice: @invoice, base_amount: @invoice.total_amount
  
  business = local_assigns[:business] || (local_assigns[:order] ? local_assigns[:order].business : (local_assigns[:invoice] ? local_assigns[:invoice].business : current_tenant))
  tip_configuration = business.tip_configuration_or_default
  base_amount = local_assigns[:base_amount] || 0
  context = local_assigns[:context] || 'checkout' # checkout, invoice, booking
%>

<div class="tip-collection-component bg-white border border-gray-200 rounded-lg p-6 mb-6">
  <div class="flex items-center justify-between mb-4">
    <h3 class="text-lg font-semibold text-gray-800">
      <% if context == 'experience' %>
        Show Your Appreciation
      <% elsif context == 'invoice' %>
        Add a Tip
      <% else %>
        Add a Tip (Optional)
      <% end %>
    </h3>
    <span class="text-sm text-gray-500">
      <% if context == 'experience' %>
        For the service team
      <% else %>
        Support our team
      <% end %>
    </span>
  </div>

  <% if context == 'experience' && local_assigns[:booking] %>
    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
      <div class="flex items-start">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-blue-400 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="ml-3">
          <h4 class="text-sm font-medium text-blue-800">Your Recent Experience</h4>
          <p class="text-sm text-blue-700 mt-1">
            <%= service_with_variant(booking) %> with <%= booking.staff_member&.name || 'our team' %>
            <br>
            <span class="text-blue-600"><%= booking.local_start_time.strftime("%B %d, %Y at %I:%M %p") %></span>
          </p>
        </div>
      </div>
    </div>
  <% end %>

  <div class="space-y-4">
    <!-- Base amount display -->
    <div class="flex justify-between items-center text-sm text-gray-600">
      <span>
        <% if context == 'checkout' %>
          Order Total:
        <% elsif context == 'invoice' %>
          Invoice Amount:
        <% else %>
          Service Amount:
        <% end %>
      </span>
      <span class="font-medium"><%= number_to_currency(base_amount) %></span>
    </div>

    <!-- Get tip configuration -->
    <% 
      tip_config = current_tenant.tip_configuration_or_default
      default_percentages = tip_config.default_tip_percentages || [15, 18, 20, 25]
    %>

    <!-- Percentage buttons -->
    <div class="grid grid-cols-4 gap-2 sm:gap-3">
      <% default_percentages.each do |percentage| %>
        <button type="button"
                class="tip-percentage-btn bg-gray-100 hover:bg-blue-100 border border-gray-300 hover:border-blue-400 rounded-lg py-3 px-2 text-center transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer"
                data-percentage="<%= percentage %>">
          <div class="text-sm font-semibold text-gray-700"><%= percentage %>%</div>
          <div class="text-xs text-gray-500 mt-1">$<%= sprintf('%.2f', base_amount * percentage / 100.0) %></div>
        </button>
      <% end %>
    </div>

    <!-- Custom amount input -->
    <% if tip_config.custom_tip_enabled? %>
      <div class="border-t pt-4">
        <label for="custom-tip-amount" class="block text-sm font-medium text-gray-700 mb-2">
          Custom Amount
        </label>
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <span class="text-gray-500 sm:text-sm">$</span>
          </div>
          <input type="number" 
                 id="custom-tip-amount" 
                 class="block w-full pl-7 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                 placeholder="0.00" 
                 min="0" 
                 step="0.01">
        </div>
      </div>
    <% end %>

    <!-- Tip message -->
    <% if tip_config.tip_message.present? %>
      <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
        <p class="text-sm text-yellow-800"><%= tip_config.tip_message %></p>
      </div>
    <% end %>

    <!-- No tip option -->
    <div class="border-t pt-4">
      <button type="button"
              class="no-tip-btn w-full bg-gray-50 hover:bg-gray-100 border border-gray-300 rounded-lg py-3 px-4 text-sm text-gray-600 hover:text-gray-800 transition-colors duration-200 cursor-pointer">
        No tip
      </button>
    </div>

    <!-- Selected tip display -->
    <div class="selected-tip-display hidden bg-green-50 border border-green-200 rounded-lg p-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <svg class="h-5 w-5 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          <div>
            <div class="text-sm font-medium text-green-800">Tip Selected</div>
            <div class="text-sm text-green-600 selected-tip-amount">$0.00</div>
          </div>
        </div>
        <button type="button" class="cursor-pointer clear-tip-btn text-green-600 hover:text-green-800">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Hidden input to store tip amount -->
    <input type="hidden" name="tip_amount" id="tip_amount" value="0">
  </div>
</div>

<script>
function initializeTipCollection() {
  const tipComponent = document.querySelector('.tip-collection-component');
  if (!tipComponent) return;
  
  const percentageButtons = tipComponent.querySelectorAll('.tip-percentage-btn');
  const customInput = tipComponent.querySelector('#custom-tip-amount');
  const noTipButton = tipComponent.querySelector('.no-tip-btn');
  const selectedDisplay = tipComponent.querySelector('.selected-tip-display');
  const selectedAmount = tipComponent.querySelector('.selected-tip-amount');
  const clearButton = tipComponent.querySelector('.clear-tip-btn');
  const hiddenInput = tipComponent.querySelector('#tip_amount');
  
  const baseAmount = <%= base_amount.to_f %>;
  let currentTipAmount = 0;
  
  function updateTipAmount(amount) {
    currentTipAmount = amount;
    if (hiddenInput) {
      hiddenInput.value = amount;
    }
    
    if (amount > 0) {
      if (selectedDisplay) {
        selectedDisplay.classList.remove('hidden');
      }
      if (selectedAmount) {
        selectedAmount.textContent = '$' + amount.toFixed(2);
      }
    } else {
      if (selectedDisplay) {
        selectedDisplay.classList.add('hidden');
      }
    }
    
    // Clear all active states
    percentageButtons.forEach(btn => {
      btn.classList.remove('bg-blue-100', 'border-blue-400', 'ring-2', 'ring-blue-500');
      btn.classList.add('bg-gray-100', 'border-gray-300');
    });
    
    if (customInput) {
      customInput.value = amount > 0 ? amount.toFixed(2) : '';
    }
    
    // Dispatch custom event for other components to listen to
    document.dispatchEvent(new CustomEvent('tipAmountChanged', {
      detail: { amount: amount }
    }));
  }
  
  function clearTip() {
    updateTipAmount(0);
  }
  
  // Percentage button handlers
  percentageButtons.forEach(button => {
    button.addEventListener('click', function() {
      const percentage = parseFloat(this.dataset.percentage);
      const tipAmount = baseAmount * (percentage / 100);
      
      // Visual feedback
      this.classList.add('bg-blue-100', 'border-blue-400', 'ring-2', 'ring-blue-500');
      this.classList.remove('bg-gray-100', 'border-gray-300');
      
      updateTipAmount(tipAmount);
    });
  });
  
  // Custom input handler
  if (customInput) {
    customInput.addEventListener('input', function() {
      const amount = parseFloat(this.value) || 0;
      if (amount >= 0) {
        updateTipAmount(amount);
      }
    });
  }
  
  // No tip button handler
  if (noTipButton) {
    noTipButton.addEventListener('click', clearTip);
  }
  
  // Clear tip button handler
  if (clearButton) {
    clearButton.addEventListener('click', clearTip);
  }
}

// Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
document.addEventListener('DOMContentLoaded', initializeTipCollection);
document.addEventListener('turbo:load', initializeTipCollection);
</script> 