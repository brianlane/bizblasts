<h2>Manage Availability for <%= @service_provider.name %></h2>

<% if @service_provider.errors.any? %>
  <div class="flash flash_error">
    <h2><%= pluralize(@service_provider.errors.count, "error") %> occurred:</h2>
    <ul>
      <% @service_provider.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<%
  # Initialize availability data
  availability = @service_provider.availability || {}
  availability = availability.with_indifferent_access
  
  # Day names for the form
  days = %w[monday tuesday wednesday thursday friday saturday sunday]
  
  # Prepare exceptions data
  exceptions = availability[:exceptions] || {}
%>

<style>
  .day-schedule {
    margin-bottom: 20px;
    border: 1px solid #ddd;
    padding: 15px;
    border-radius: 4px;
  }
  .time-slot {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
  }
  .time-slot input {
    margin: 0 10px;
  }
  .add-slot-btn {
    margin-top: 10px;
  }
  .remove-slot-btn {
    margin-left: 10px;
    cursor: pointer;
    color: #d32f2f;
  }
  .exceptions-container {
    margin-top: 30px;
  }
  .exception-item {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    border: 1px solid #eee;
    padding: 10px;
    border-radius: 4px;
  }
  .closed-checkbox {
    margin-left: 20px;
  }
</style>

<%= form_tag(manage_availability_admin_service_provider_path(@service_provider), method: :post, id: "availability-form") do %>
  <div class="panel">
    <h3>Weekly Schedule</h3>
    <p class="hint">Set the regular working hours for each day of the week. Leave empty for days off.</p>
    
    <div class="panel_contents">
      <% days.each do |day| %>
        <div class="day-schedule" id="<%= day %>-schedule">
          <h4><%= day.capitalize %></h4>
          
          <div class="time-slots" id="<%= day %>-slots">
            <% 
              day_slots = availability[day] || []
              if day_slots.empty?
                # Show one empty slot by default
                day_slots = [{ 'start' => '', 'end' => '' }]
              end
            %>
            
            <% day_slots.each_with_index do |slot, index| %>
              <div class="time-slot">
                <label>From</label>
                <input type="text" 
                       name="service_provider[availability][<%= day %>][][start]" 
                       value="<%= slot['start'] %>" 
                       class="time-picker"
                       placeholder="09:00">
                <label>To</label>
                <input type="text" 
                       name="service_provider[availability][<%= day %>][][end]" 
                       value="<%= slot['end'] %>" 
                       class="time-picker"
                       placeholder="17:00">
                <span class="remove-slot-btn" onclick="removeTimeSlot(this)">Remove</span>
              </div>
            <% end %>
          </div>
          
          <button type="button" class="add-slot-btn" onclick="addTimeSlot('<%= day %>')">
            Add Time Slot
          </button>
        </div>
      <% end %>
    </div>
  </div>
  
  <div class="panel exceptions-container">
    <h3>Exceptions (Special Days)</h3>
    <p class="hint">Add specific dates with different hours or closures.</p>
    
    <div class="panel_contents">
      <div id="exceptions-list">
        <% 
          # Show existing exceptions
          exceptions.each do |date, slots| 
            is_closed = slots.empty?
        %>
          <div class="exception-item">
            <input type="text" 
                   name="exception_date" 
                   value="<%= date %>" 
                   class="date-picker" 
                   readonly>
            
            <div class="closed-checkbox">
              <input type="checkbox" 
                     id="closed-<%= date %>" 
                     <%= is_closed ? 'checked' : '' %> 
                     onchange="toggleExceptionClosed(this, '<%= date %>')">
              <label for="closed-<%= date %>">Closed all day</label>
            </div>
            
            <div class="exception-slots" id="exception-<%= date %>-slots" style="<%= is_closed ? 'display: none;' : '' %>">
              <% unless is_closed %>
                <% slots.each do |slot| %>
                  <div class="time-slot">
                    <label>From</label>
                    <input type="text" 
                           name="service_provider[availability][exceptions][<%= date %>][][start]" 
                           value="<%= slot['start'] %>" 
                           class="time-picker"
                           placeholder="09:00">
                    <label>To</label>
                    <input type="text" 
                           name="service_provider[availability][exceptions][<%= date %>][][end]" 
                           value="<%= slot['end'] %>" 
                           class="time-picker"
                           placeholder="17:00">
                    <span class="remove-slot-btn" onclick="removeExceptionTimeSlot(this)">Remove</span>
                  </div>
                <% end %>
              <% end %>
            </div>
            
            <% if is_closed %>
              <input type="hidden" name="service_provider[availability][exceptions][<%= date %>]" value="">
            <% end %>
            
            <button type="button" class="add-slot-btn" 
                    onclick="addExceptionTimeSlot('<%= date %>')"
                    style="<%= is_closed ? 'display: none;' : '' %>">
              Add Time Slot
            </button>
            
            <span class="remove-slot-btn" onclick="removeException(this)">Remove Exception</span>
          </div>
        <% end %>
      </div>
      
      <div style="margin-top: 20px;">
        <button type="button" id="add-exception-btn">Add Exception Day</button>
      </div>
      
      <!-- Template for new exception -->
      <div id="exception-template" style="display: none;">
        <div class="exception-item">
          <input type="text" name="exception_date" class="date-picker" readonly>
          
          <div class="closed-checkbox">
            <input type="checkbox" id="closed-{DATE}" onchange="toggleExceptionClosed(this, '{DATE}')">
            <label for="closed-{DATE}">Closed all day</label>
          </div>
          
          <div class="exception-slots" id="exception-{DATE}-slots">
            <div class="time-slot">
              <label>From</label>
              <input type="text" 
                     name="service_provider[availability][exceptions][{DATE}][][start]" 
                     class="time-picker"
                     placeholder="09:00">
              <label>To</label>
              <input type="text" 
                     name="service_provider[availability][exceptions][{DATE}][][end]" 
                     class="time-picker"
                     placeholder="17:00">
              <span class="remove-slot-btn" onclick="removeExceptionTimeSlot(this)">Remove</span>
            </div>
          </div>
          
          <input type="hidden" name="service_provider[availability][exceptions][{DATE}]" value="" style="display:none;">
          
          <button type="button" class="add-slot-btn" onclick="addExceptionTimeSlot('{DATE}')">
            Add Time Slot
          </button>
          
          <span class="remove-slot-btn" onclick="removeException(this)">Remove Exception</span>
        </div>
      </div>
    </div>
  </div>
  
  <div class="actions">
    <input type="submit" value="Save Availability" class="button">
    <a href="<%= admin_service_provider_path(@service_provider) %>" class="button">Cancel</a>
  </div>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize time pickers
    document.querySelectorAll('.time-picker').forEach(function(elem) {
      flatpickr(elem, {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
        time_24hr: true
      });
    });
    
    // Initialize date pickers
    document.querySelectorAll('.date-picker').forEach(function(elem) {
      flatpickr(elem, {
        dateFormat: "Y-m-d"
      });
    });
    
    // Add exception button
    document.getElementById('add-exception-btn').addEventListener('click', function() {
      addException();
    });
  });
  
  // Function to add a new time slot for a day
  function addTimeSlot(day) {
    const container = document.getElementById(day + '-slots');
    const newSlot = document.createElement('div');
    newSlot.className = 'time-slot';
    newSlot.innerHTML = `
      <label>From</label>
      <input type="text" 
             name="service_provider[availability][${day}][][start]" 
             class="time-picker"
             placeholder="09:00">
      <label>To</label>
      <input type="text" 
             name="service_provider[availability][${day}][][end]" 
             class="time-picker"
             placeholder="17:00">
      <span class="remove-slot-btn" onclick="removeTimeSlot(this)">Remove</span>
    `;
    container.appendChild(newSlot);
    
    // Initialize the new time pickers
    newSlot.querySelectorAll('.time-picker').forEach(function(elem) {
      flatpickr(elem, {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
        time_24hr: true
      });
    });
  }
  
  // Function to remove a time slot
  function removeTimeSlot(button) {
    const slot = button.parentNode;
    slot.parentNode.removeChild(slot);
  }
  
  // Function to add a new exception date
  function addException() {
    const container = document.getElementById('exceptions-list');
    const template = document.getElementById('exception-template');
    const date = new Date().toISOString().split('T')[0]; // Today's date in YYYY-MM-DD
    
    // Clone the template and replace {DATE} placeholders
    const newException = template.innerHTML.replace(/{DATE}/g, date);
    
    // Create a div to hold the new exception
    const exceptionDiv = document.createElement('div');
    exceptionDiv.innerHTML = newException;
    
    // Append to the container
    container.appendChild(exceptionDiv.firstElementChild);
    
    // Initialize the new pickers
    exceptionDiv.querySelectorAll('.date-picker').forEach(function(elem) {
      flatpickr(elem, {
        dateFormat: "Y-m-d",
        defaultDate: date
      });
    });
    
    exceptionDiv.querySelectorAll('.time-picker').forEach(function(elem) {
      flatpickr(elem, {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
        time_24hr: true
      });
    });
  }
  
  // Function to remove an exception
  function removeException(button) {
    const exception = button.closest('.exception-item');
    exception.parentNode.removeChild(exception);
  }
  
  // Function to toggle exception closed status
  function toggleExceptionClosed(checkbox, date) {
    const slotsContainer = document.getElementById('exception-' + date + '-slots');
    const addButton = checkbox.closest('.exception-item').querySelector('.add-slot-btn');
    const hiddenInput = checkbox.closest('.exception-item').querySelector('input[type="hidden"]');
    
    if (checkbox.checked) {
      // If closed, hide time slots and show hidden empty array input
      slotsContainer.style.display = 'none';
      addButton.style.display = 'none';
      hiddenInput.style.display = '';
    } else {
      // If open, show time slots and hide hidden input
      slotsContainer.style.display = '';
      addButton.style.display = '';
      hiddenInput.style.display = 'none';
      
      // If no slots, add one
      if (slotsContainer.children.length === 0) {
        addExceptionTimeSlot(date);
      }
    }
  }
  
  // Function to add a time slot to an exception
  function addExceptionTimeSlot(date) {
    const container = document.getElementById('exception-' + date + '-slots');
    const newSlot = document.createElement('div');
    newSlot.className = 'time-slot';
    newSlot.innerHTML = `
      <label>From</label>
      <input type="text" 
             name="service_provider[availability][exceptions][${date}][][start]" 
             class="time-picker"
             placeholder="09:00">
      <label>To</label>
      <input type="text" 
             name="service_provider[availability][exceptions][${date}][][end]" 
             class="time-picker"
             placeholder="17:00">
      <span class="remove-slot-btn" onclick="removeExceptionTimeSlot(this)">Remove</span>
    `;
    container.appendChild(newSlot);
    
    // Initialize the new time pickers
    newSlot.querySelectorAll('.time-picker').forEach(function(elem) {
      flatpickr(elem, {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
        time_24hr: true
      });
    });
  }
  
  // Function to remove an exception time slot
  function removeExceptionTimeSlot(button) {
    const slot = button.parentNode;
    slot.parentNode.removeChild(slot);
  }
</script> 