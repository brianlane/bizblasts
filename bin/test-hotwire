#!/usr/bin/env bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    printf "${1}${2}${NC}\n"
}

print_header() {
    echo "=================================================="
    print_color $BLUE "$1"
    echo "=================================================="
}

print_success() {
    print_color $GREEN "‚úÖ $1"
}

print_warning() {
    print_color $YELLOW "‚ö†Ô∏è  $1"
}

print_error() {
    print_color $RED "‚ùå $1"
}

# Check if we're in the right directory
if [ ! -f "Gemfile" ] || [ ! -d "app/javascript" ]; then
    print_error "This script must be run from the Rails application root directory"
    exit 1
fi

print_header "üß™ BizBlasts Enhanced Hotwire Setup Test Suite"

# Check prerequisites
print_header "üìã Checking Prerequisites"

# Check Ruby
if command -v ruby &> /dev/null; then
    RUBY_VERSION=$(ruby -v)
    print_success "Ruby found: $RUBY_VERSION"
else
    print_error "Ruby not found. Please install Ruby."
    exit 1
fi

# Check Rails
if command -v rails &> /dev/null; then
    RAILS_VERSION=$(rails -v)
    print_success "Rails found: $RAILS_VERSION"
else
    print_error "Rails not found. Please install Rails."
    exit 1
fi

# Check if bundle is available
if command -v bundle &> /dev/null; then
    print_success "Bundler found"
else
    print_error "Bundler not found. Please install bundler: gem install bundler"
    exit 1
fi

# Check if test database exists
print_header "üóÑÔ∏è  Database Setup"

if RAILS_ENV=test bundle exec rails db:version &> /dev/null; then
    print_success "Test database is set up"
else
    print_warning "Test database needs setup. Running db:prepare..."
    if RAILS_ENV=test bundle exec rails db:prepare; then
        print_success "Test database prepared successfully"
    else
        print_error "Failed to prepare test database"
        exit 1
    fi
fi

# Check if assets are compiled for test environment
print_header "üé® Asset Compilation Check"

if [ -d "public/assets" ] && [ "$(ls -A public/assets)" ]; then
    print_success "Assets directory exists and has files"
else
    print_warning "Assets not found. Compiling for test environment..."
    if RAILS_ENV=test bundle exec rails assets:precompile; then
        print_success "Assets compiled successfully"
    else
        print_error "Failed to compile assets"
        exit 1
    fi
fi

# Run System Tests
print_header "üîß Running Enhanced Hotwire System Tests"

print_color $BLUE "Running Enhanced Hotwire Setup tests..."
if RAILS_ENV=test bundle exec rspec spec/system/hotwire_setup_spec.rb --format documentation; then
    print_success "Enhanced Hotwire Setup tests passed"
else
    print_error "Enhanced Hotwire Setup tests failed"
    exit 1
fi

print_color $BLUE "Running Enhanced JavaScript Integration tests..."
if RAILS_ENV=test bundle exec rspec spec/system/stimulus_auto_discovery_spec.rb --format documentation; then
    print_success "Enhanced JavaScript Integration tests passed"
else
    print_error "Enhanced JavaScript Integration tests failed"
    exit 1
fi

# Run JavaScript Unit Tests (if Jest is configured)
print_header "‚ö° JavaScript Unit Tests"

if [ -f "package.json" ] && grep -q "jest" package.json; then
    if [ -f "jest.config.js" ]; then
        print_color $BLUE "Running JavaScript unit tests with Jest..."
        if npm test; then
            print_success "JavaScript unit tests passed"
        else
            print_warning "JavaScript unit tests failed or not properly configured"
        fi
    else
        print_warning "Jest found in package.json but jest.config.js not found"
    fi
else
    print_warning "Jest not configured in package.json - skipping JavaScript unit tests"
fi

# Final Summary
print_header "üìä Test Summary"

print_success "All system tests completed successfully!"
print_color $GREEN "‚ú® Your Enhanced Hotwire setup is working correctly!"

echo ""
print_color $BLUE "üìù What was tested:"
echo "   ‚Ä¢ Basic page functionality and asset loading"
echo "   ‚Ä¢ Interactive components and form handling" 
echo "   ‚Ä¢ Dynamic content manipulation"
echo "   ‚Ä¢ Event handling and browser compatibility"
echo "   ‚Ä¢ Responsive design and navigation"

echo ""
print_color $BLUE "üéØ Key Features Verified:"
echo "   ‚Ä¢ JavaScript assets load properly"
echo "   ‚Ä¢ DOM manipulation works correctly"
echo "   ‚Ä¢ Event listeners function as expected"
echo "   ‚Ä¢ Forms can be created and submitted"
echo "   ‚Ä¢ Modern JavaScript features are supported"

echo ""
print_color $YELLOW "üí° Next Steps:"
echo "   ‚Ä¢ Your enhanced Hotwire setup is ready for development"
echo "   ‚Ä¢ Stimulus controllers will auto-discover when created"
echo "   ‚Ä¢ Tenant-specific Turbo handling is configured"
echo "   ‚Ä¢ Check docs/HOTWIRE_SETUP.md for usage examples"

print_success "Test suite completed successfully! üéâ" 