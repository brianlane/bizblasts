#!/bin/bash
set -e

# This script provides a 10x faster approach to testing
start_time=$(date +%s)

# Initialize variables
SHOULD_FAIL=0
DB_CREATED=0
DB_SKIPPED=0

# Help function
show_help() {
  echo "Usage: ./bin/test [options] [test_files]"
  echo ""
  echo "Options:"
  echo "  No arguments    : Run all tests in parallel"
  echo "  fast            : Run tests without coverage"
  echo "  spec            : Run all tests in parallel"
  echo "  split           : Use intelligent test splitting with isolated databases"
  echo "  split-list      : Show test distribution across categories"
  echo "  split-run [cat] : Run specific test category (models, system_1, etc.)"
  echo "  split-all       : Run all categories in parallel with isolated databases"
  echo "  split-setup     : Setup all isolated databases"
  echo "  split-cleanup   : Clean up isolated test databases"
  echo "  -r, --reset-db  : Force recreation of test databases"
  echo "  -c, --coverage  : Enable code coverage (slower)"
  echo "  -p, --parallel N: Use N parallel processes (default: auto-detect)"
  echo "  -h, --help      : Show this help message"
  echo ""
  echo "Examples:"
  echo "  ./bin/test                                # Run all tests"
  echo "  ./bin/test fast                          # Run without coverage"
  echo "  ./bin/test split-list                    # Show test categories"
  echo "  ./bin/test split-run models              # Run only model tests"
  echo "  ./bin/test split-run system_1            # Run system test group 1"
  echo "  ./bin/test split-all                     # Run all categories in parallel"
  echo "  ./bin/test -p 16                        # Use 16 parallel processes"
  echo "  ./bin/test spec/models/user_spec.rb      # Run specific test file"
  echo ""
  exit 0
}

# Parse arguments
FORCE_DB_RESET=0
ENABLE_COVERAGE=0
CUSTOM_PROCESSORS=""
FAST_MODE=0

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      show_help
      ;;
    -r|--reset-db)
      FORCE_DB_RESET=1
      shift
      ;;
    -c|--coverage)
      ENABLE_COVERAGE=1
      shift
      ;;
    -p|--parallel)
      CUSTOM_PROCESSORS="$2"
      shift 2
      ;;
    fast)
      FAST_MODE=1
      shift
      ;;
    split-list)
      ./bin/split_tests.rb list
      exit $?
      ;;
    split-run)
      SPLIT_RUN_COMMAND=1
      CATEGORY="$2"
      if [ -z "$CATEGORY" ]; then
        echo "Error: Must specify category for split-run"
        echo "Use: ./bin/test split-list to see available categories"
        exit 1
      fi
      shift 2
      ;;
    split-all)
      SPLIT_ALL_COMMAND=1
      shift
      ;;
    split-setup)
      ./bin/split_tests.rb setup-all
      exit $?
      ;;
    split-cleanup)
      ./bin/split_tests.rb cleanup
      exit $?
      ;;
    split)
      echo "Available split commands:"
      echo "  split-list      Show test distribution"
      echo "  split-run [cat] Run specific category"
      echo "  split-all       Run all categories in parallel"
      echo "  split-setup     Setup isolated databases"
      echo "  split-cleanup   Clean up databases"
      echo ""
      echo "Use: ./bin/test split-list to see test categories"
      exit 0
      ;;
    *)
      break
      ;;
  esac
done

# Execute split commands after parsing all options
if [ "$SPLIT_RUN_COMMAND" = "1" ]; then
  # Build options for split_tests.rb
  SPLIT_OPTS=()
  [ $ENABLE_COVERAGE -eq 1 ] && SPLIT_OPTS+=("-c")
  [ $FAST_MODE -eq 1 ] && SPLIT_OPTS+=("-f")
  [ -n "$CUSTOM_PROCESSORS" ] && SPLIT_OPTS+=("-p" "$CUSTOM_PROCESSORS")
  
  ./bin/split_tests.rb run "$CATEGORY" "${SPLIT_OPTS[@]}"
  exit $?
fi

if [ "$SPLIT_ALL_COMMAND" = "1" ]; then
  # Build options for split_tests.rb
  SPLIT_OPTS=()
  [ $ENABLE_COVERAGE -eq 1 ] && SPLIT_OPTS+=("-c")
  [ $FAST_MODE -eq 1 ] && SPLIT_OPTS+=("-f")
  [ -n "$CUSTOM_PROCESSORS" ] && SPLIT_OPTS+=("-p" "$CUSTOM_PROCESSORS")
  
  ./bin/split_tests.rb run-all "${SPLIT_OPTS[@]}"
  exit $?
fi

# Auto-detect optimal processor count
if [ -z "$CUSTOM_PROCESSORS" ]; then
  # Get physical CPU cores (not hyperthreads)
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    PHYSICAL_CORES=$(sysctl -n hw.physicalcpu)
  else
    # Linux
    PHYSICAL_CORES=$(lscpu | grep "^Core(s) per socket" | awk '{print $4}')
    SOCKETS=$(lscpu | grep "^Socket(s)" | awk '{print $2}')
    PHYSICAL_CORES=$((PHYSICAL_CORES * SOCKETS))
  fi
  
  # Use 1.5x physical cores for optimal performance
  OPTIMAL_PROCESSORS=$((PHYSICAL_CORES * 3 / 2))
  # Cap at 16 to avoid diminishing returns
  PARALLEL_TEST_PROCESSORS=$([ $OPTIMAL_PROCESSORS -gt 16 ] && echo 16 || echo $OPTIMAL_PROCESSORS)
else
  PARALLEL_TEST_PROCESSORS=$CUSTOM_PROCESSORS
fi

echo "Using $PARALLEL_TEST_PROCESSORS parallel processes"

# Environment setup for maximum speed
export RAILS_ENV=test
export DISABLE_DATABASE_ENVIRONMENT_CHECK=1
export PARALLEL_TEST_FIRST_IS_1=true
export PARALLEL_TEST_RUNTIME_LOG=tmp/parallel_runtime.log
export PARALLEL_TEST_PROCESSORS=$PARALLEL_TEST_PROCESSORS

# Performance optimizations
export RUBY_GC_HEAP_INIT_SLOTS=2000000
export RUBY_GC_HEAP_FREE_SLOTS=1000000
export RUBY_GC_HEAP_GROWTH_FACTOR=1.1
export RUBY_GC_HEAP_GROWTH_MAX_SLOTS=500000
export RUBY_GC_MALLOC_LIMIT=104857600
export RUBY_GC_MALLOC_LIMIT_MAX=268435456
export RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR=1.1

# Enable YJIT for Ruby 3.1+
if ruby -e "exit(defined?(RubyVM::YJIT) != nil)" > /dev/null 2>&1; then
  export RUBY_YJIT_ENABLE=1
  echo "YJIT enabled for performance boost"
fi

# Disable Spring for parallel tests (causes issues)
export DISABLE_SPRING=1

# Coverage only if requested or in CI
if [ $ENABLE_COVERAGE -eq 1 ] || [ "$CI" == "true" ]; then
  export COVERAGE=true
  export SIMPLECOV_FORMATTER=simplecov-html
  mkdir -p coverage
else
  export NOCOV=true
  echo "Coverage disabled for speed (use -c to enable)"
fi

# Fast mode optimizations
if [ $FAST_MODE -eq 1 ]; then
  export SKIP_ASSET_COMPILATION=true
  export SKIP_DB_CLEAN=true
  export RAILS_DISABLE_ASSET_COMPILATION=true
  echo "Fast mode enabled - some features disabled"
fi

# Output file
OUTPUT_FILE="test.out"
rm -f "$OUTPUT_FILE"

log() {
  echo "$@" >> "$OUTPUT_FILE"
}

# Optimized database setup
cleanup_invalid_databases() {
  log "Checking for invalid test databases..."
  
  # Get list of all bizblasts_test* databases
  local invalid_dbs=$(psql -lqt | cut -d \| -f 1 | grep -E "bizblasts_test[0-9]*" | while read db; do
    db=$(echo $db | xargs)  # trim whitespace
    # Try to connect to the database
    if ! psql -d "$db" -c "SELECT 1;" > /dev/null 2>&1; then
      echo "$db"
    fi
  done)
  
  if [ -n "$invalid_dbs" ]; then
    log "Found invalid databases, cleaning up: $invalid_dbs"
    for db in $invalid_dbs; do
      log "Dropping invalid database: $db"
      psql -c "DROP DATABASE IF EXISTS $db;" 2>/dev/null || true
    done
  fi
}

setup_databases() {
  log "==> Preparing test databases for $PARALLEL_TEST_PROCESSORS processes..."
  
  # Clean up any invalid databases first
  cleanup_invalid_databases
  
  # Check existing databases
  local existing_dbs=0
  local needed_dbs=0
  
  # Check main database
  if psql -lqt | cut -d \| -f 1 | grep -qw "bizblasts_test"; then
    existing_dbs=$((existing_dbs + 1))
  fi
  
  # Check numbered databases (with PARALLEL_TEST_FIRST_IS_1, we need test1 through testN)
  for i in $(seq 1 $PARALLEL_TEST_PROCESSORS); do
    if psql -lqt | cut -d \| -f 1 | grep -qw "bizblasts_test$i"; then
      existing_dbs=$((existing_dbs + 1))
    else
      needed_dbs=$((needed_dbs + 1))
    fi
  done
  
  total_needed=$((PARALLEL_TEST_PROCESSORS + 1))  # +1 for the base test database
  
  if [ $FORCE_DB_RESET -eq 1 ]; then
    log "Force database reset requested - dropping and recreating all databases"
    needed_dbs=$total_needed
    
    # Drop all test databases first
    log "Dropping existing test databases..."
    for i in "" $(seq 1 $PARALLEL_TEST_PROCESSORS); do
      db_suffix=$i
      [ -z "$i" ] && db_suffix=""
      (
        if [ -z "$db_suffix" ]; then
          RAILS_ENV=test bundle exec rails db:drop 2>/dev/null || true
        else
          TEST_ENV_NUMBER=$i RAILS_ENV=test bundle exec rails db:drop 2>/dev/null || true
        fi
      ) &
    done
    wait
  elif [ $needed_dbs -eq 0 ] && [ $existing_dbs -eq $total_needed ]; then
    DB_SKIPPED=$total_needed
    log "All $total_needed test databases already exist, skipping setup"
    return
  else
    log "Found $existing_dbs databases, need to create $needed_dbs more"
  fi
  
  # Create missing databases in parallel
  log "Creating test databases in parallel..."
  
  # Always ensure main database exists
  if [ $FORCE_DB_RESET -eq 1 ] || ! psql -lqt | cut -d \| -f 1 | grep -qw "bizblasts_test"; then
    (
      RAILS_ENV=test bundle exec rails db:create db:schema:load >> "$OUTPUT_FILE" 2>&1
      RAILS_ENV=test bundle exec rails db:seed >> "$OUTPUT_FILE" 2>&1
      echo "Database bizblasts_test ready"
    ) &
  fi
  
  # Create numbered databases
  for i in $(seq 1 $PARALLEL_TEST_PROCESSORS); do
    if [ $FORCE_DB_RESET -eq 1 ] || ! psql -lqt | cut -d \| -f 1 | grep -qw "bizblasts_test$i"; then
      (
        TEST_ENV_NUMBER=$i RAILS_ENV=test bundle exec rails db:create db:schema:load >> "$OUTPUT_FILE" 2>&1
        echo "Database bizblasts_test$i ready"
      ) &
    fi
  done
  
  # Wait for all database creation to complete
  wait
  
  DB_CREATED=$needed_dbs
  DB_SKIPPED=$existing_dbs
  
  log "Database setup complete: created $DB_CREATED, reused $DB_SKIPPED"
  
  # Verify all databases exist
  local missing=0
  for i in "" $(seq 1 $PARALLEL_TEST_PROCESSORS); do
    db_name="bizblasts_test$i"
    [ -z "$i" ] && db_name="bizblasts_test"
    if ! psql -lqt | cut -d \| -f 1 | grep -qw "$db_name"; then
      log "ERROR: Database $db_name is still missing!"
      missing=$((missing + 1))
    fi
  done
  
  if [ $missing -gt 0 ]; then
    log "ERROR: $missing databases are missing. Run with -r to force recreate all databases."
    exit 1
  fi
}

# Setup databases
setup_databases

# Prepare runtime log directory
mkdir -p tmp
rm -f "$PARALLEL_TEST_RUNTIME_LOG"

# Determine what to run
FULL_SPEC="spec"
CMD_BASE=()
CMD_ARGS=()

if [ $# -eq 0 ] || [ "$1" == "spec" ]; then
  # Run full test suite
  log "Running full test suite with $PARALLEL_TEST_PROCESSORS parallel processes..."
  CMD_BASE=("bundle" "exec" "parallel_rspec")
  CMD_ARGS=($FULL_SPEC "-n" "$PARALLEL_TEST_PROCESSORS")
  
  # Add parallel_rspec specific options
  if [ $FAST_MODE -eq 0 ]; then
    # Normal mode - fail fast on first failure
    CMD_ARGS+=("--fail-fast")
  fi
else
  # Run specified tests
  if [ $# -gt 1 ] || [[ "$1" == *"spec/"* && -d "$1" ]]; then
    # Multiple files or directory - use parallel
    log "Running specified tests in parallel: $@"
    CMD_BASE=("bundle" "exec" "parallel_rspec")
    CMD_ARGS=("$@" "-n" "$PARALLEL_TEST_PROCESSORS")
    
    # Add fail-fast for parallel runs
    if [ $FAST_MODE -eq 0 ]; then
      CMD_ARGS+=("--fail-fast")
    fi
  else
    # Single file - run directly
    log "Running single test file: $@"
    CMD_BASE=("bundle" "exec" "rspec")
    CMD_ARGS=("$@" "--format" "progress")
    
    # Add RSpec options for single file runs
    CMD_ARGS+=("--fail-fast" "--no-profile")
  fi
fi

# Execute tests with timeout
TIMEOUT_CMD=("timeout" "300") # 5 minute timeout
log "Running: ${CMD_BASE[@]} ${CMD_ARGS[@]}"

"${TIMEOUT_CMD[@]}" "${CMD_BASE[@]}" "${CMD_ARGS[@]}" >> "$OUTPUT_FILE" 2>&1
EXIT_CODE=$?

if [ $EXIT_CODE -eq 124 ]; then
  log "Tests timed out after 5 minutes"
  SHOULD_FAIL=1
elif [ $EXIT_CODE -ne 0 ]; then
  log "Tests Failed (exit code: $EXIT_CODE)"
  SHOULD_FAIL=1
else
  log "Tests Passed"
fi

# Calculate duration
end_time=$(date +%s)
duration=$((end_time - start_time))

# Parse results
EXAMPLES_LINE=$(grep -E "[0-9]+ examples?, [0-9]+ failures?" "$OUTPUT_FILE" | tail -1)
FAILURE_COUNT="0"
TOTAL_TESTS="0"

if [ -n "$EXAMPLES_LINE" ]; then
  TOTAL_TESTS=$(echo "$EXAMPLES_LINE" | grep -oE "^[0-9]+ example" | grep -oE "[0-9]+")
  FAILURES_PART=$(echo "$EXAMPLES_LINE" | grep -oE "[0-9]+ failures?" | grep -oE "[0-9]+")
  [ -n "$FAILURES_PART" ] && FAILURE_COUNT=$FAILURES_PART
fi

# Coverage info if enabled
COVERAGE_INFO=""
if [ $ENABLE_COVERAGE -eq 1 ]; then
  COVERAGE_LINE=$(grep -E "^Line Coverage:" "$OUTPUT_FILE" | tail -1)
  if [ -n "$COVERAGE_LINE" ]; then
    COVERAGE_PERCENT=$(echo "$COVERAGE_LINE" | grep -oE '[0-9.]+%')
    COVERAGE_INFO="Coverage: $COVERAGE_PERCENT"
  fi
fi

# Output summary
echo "==> Tests completed in $duration seconds!"
if [ $DB_SKIPPED -gt 0 ]; then
  echo "    Reused $DB_SKIPPED existing databases"
fi
echo ""

if [ $SHOULD_FAIL -eq 0 ]; then
  echo "✅ All tests passed! ($TOTAL_TESTS tests)"
  [ -n "$COVERAGE_INFO" ] && echo "    $COVERAGE_INFO"
else
  echo "❌ Tests failed! ($FAILURE_COUNT of $TOTAL_TESTS tests failed)"
  [ -n "$COVERAGE_INFO" ] && echo "    $COVERAGE_INFO"
  echo ""
  echo "Failure details:"
  grep -A 5 "Failed examples:" "$OUTPUT_FILE" | head -20 | sed 's/^/  /'
fi

echo ""
echo "Full output: $OUTPUT_FILE"
echo "Parallel processes used: $PARALLEL_TEST_PROCESSORS"

# Performance tips if slow
if [ $duration -gt 180 ]; then
  echo ""
  echo "⚠️  Tests took over 3 minutes. Try:"
  echo "  • ./bin/test -p $((PARALLEL_TEST_PROCESSORS * 2))  # More parallel processes"
  echo "  • ./bin/test fast                                   # Disable coverage & DB cleaning"
  echo "  • Use SSD or tmpfs for test databases"
fi

exit $EXIT_CODE