diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index aa98ed0..a0c41b2 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -164,7 +164,7 @@ jobs:
         run: bundle install --jobs 4 --retry 3 --with development test
 
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
@@ -256,7 +256,7 @@ jobs:
         run: bundle install --jobs 4 --retry 3 --with development test
 
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
@@ -359,7 +359,7 @@ jobs:
         run: bundle install --jobs 4 --retry 3 --with development test
 
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
@@ -418,13 +418,13 @@ jobs:
             echo "No request specs found for group 2"
           fi
 
-  # Service and business logic tests
-  test_services:
+  # Service and business logic tests - Group 1
+  test_services_1:
     runs-on: ubuntu-latest
     
     env:
       RAILS_ENV: test
-      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_services
+      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_services_1
       DISABLE_PROPSHAFT: true
       RAILS_DISABLE_ASSET_COMPILATION: true
       DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
@@ -459,7 +459,7 @@ jobs:
         run: bundle install --jobs 4 --retry 3 --with development test
 
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
@@ -488,6 +488,7 @@ jobs:
         run: |
           chmod +x bin/build-tailwind-standalone.sh
           chmod +x script/test_tailwind_build.rb
+          chmod +x bin/split_service_tests.rb
 
       - name: Test Tailwind build
         env:
@@ -498,8 +499,8 @@ jobs:
 
       - name: Setup database
         run: |
-          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_services;"
-          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_services;"
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_services_1;"
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_services_1;"
           bundle exec rake ci:github_actions
 
       - name: Build Tailwind CSS
@@ -507,16 +508,23 @@ jobs:
           SKIP_SOLID_QUEUE_SETUP: true
         run: ./bin/build-tailwind-standalone.sh
 
-      - name: Run service tests
-        run: bundle exec rspec spec/services spec/jobs spec/policies
+      - name: Split and run service spec group 1
+        run: |
+          TESTS=$(./bin/split_service_tests.rb 1)
+          if [ -n "$TESTS" ]; then
+            echo "Running service spec group 1..."
+            bundle exec rspec $TESTS --format documentation
+          else
+            echo "No service specs found for group 1"
+          fi
 
-  # Integration tests
-  test_integration:
+  # Service and business logic tests - Group 2
+  test_services_2:
     runs-on: ubuntu-latest
     
     env:
       RAILS_ENV: test
-      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_integration
+      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_services_2
       DISABLE_PROPSHAFT: true
       RAILS_DISABLE_ASSET_COMPILATION: true
       DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
@@ -551,7 +559,7 @@ jobs:
         run: bundle install --jobs 4 --retry 3 --with development test
 
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
@@ -580,6 +588,7 @@ jobs:
         run: |
           chmod +x bin/build-tailwind-standalone.sh
           chmod +x script/test_tailwind_build.rb
+          chmod +x bin/split_service_tests.rb
 
       - name: Test Tailwind build
         env:
@@ -590,8 +599,8 @@ jobs:
 
       - name: Setup database
         run: |
-          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_integration;"
-          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_integration;"
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_services_2;"
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_services_2;"
           bundle exec rake ci:github_actions
 
       - name: Build Tailwind CSS
@@ -599,20 +608,26 @@ jobs:
           SKIP_SOLID_QUEUE_SETUP: true
         run: ./bin/build-tailwind-standalone.sh
 
-      - name: Run integration tests
-        run: bundle exec rspec spec/integration spec/features spec/mailers
+      - name: Split and run service spec group 2
+        run: |
+          TESTS=$(./bin/split_service_tests.rb 2)
+          if [ -n "$TESTS" ]; then
+            echo "Running service spec group 2..."
+            bundle exec rspec $TESTS --format documentation
+          else
+            echo "No service specs found for group 2"
+          fi
 
-  # System tests part 1 - Core functionality and authentication
-  test_system_1:
+  # Service tests part 3 (jobs, services, policies)
+  test_services_3:
     runs-on: ubuntu-latest
     
     env:
       RAILS_ENV: test
-      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_system_1
+      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_services_3
       DISABLE_PROPSHAFT: true
       RAILS_DISABLE_ASSET_COMPILATION: true
       DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
-      CI: true
       ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
       ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
       ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}
@@ -629,16 +644,98 @@ jobs:
 
     steps:
       - name: Install packages
+        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config
+
+      - name: Checkout code
+        uses: actions/checkout@v5
+
+      - name: Set up Ruby
+        uses: ruby/setup-ruby@v1
+        with:
+          ruby-version: '3.4.3'
+          bundler-cache: true
+
+      - name: Install all gems
+        run: bundle install --jobs 4 --retry 3 --with development test
+
+      - name: Set up Node.js
+        uses: actions/setup-node@v5
+        with:
+          node-version: '20'
+          cache: 'npm'
+
+      - name: Install JS Dependencies
+        run: npm install
+
+      - name: Build CSS Assets
         run: |
-          sudo apt-get update
-          sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
-          # Install Chrome with modern apt key handling
-          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
-          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
-          sudo apt-get update
-          sudo apt-get install -y google-chrome-stable
-          # Verify Chrome installation
-          google-chrome --version
+          AA_PATH=$(bundle info activeadmin --path)
+          mkdir -p app/assets/builds
+          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
+          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css --no-source-map --load-path=node_modules --load-path="$AA_PATH/app/assets/stylesheets"
+          mkdir -p public/assets && cp ./app/assets/builds/active_admin.css ./public/assets/
+
+      - name: Build JavaScript Assets
+        run: npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js
+
+      - name: Make scripts executable
+        run: chmod +x bin/build-tailwind-standalone.sh bin/split_service_tests.rb script/test_tailwind_build.rb
+
+      - name: Test Tailwind build
+        env:
+          RAILS_DISABLE_ASSET_COMPILATION: true
+          SKIP_SOLID_QUEUE_SETUP: true
+          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
+        run: ./script/test_tailwind_build.rb
+
+      - name: Setup database
+        run: |
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_services_3;"
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_services_3;"
+          bundle exec rake ci:github_actions
+
+      - name: Build Tailwind CSS
+        env:
+          SKIP_SOLID_QUEUE_SETUP: true
+        run: ./bin/build-tailwind-standalone.sh
+
+      - name: Split and run service spec group 3
+        run: |
+          TESTS=$(./bin/split_service_tests.rb 3)
+          if [ -n "$TESTS" ]; then
+            echo "Running service spec group 3..."
+            bundle exec rspec $TESTS --format documentation
+          else
+            echo "No service specs found for group 3"
+          fi
+
+  # Integration tests
+  test_integration:
+    runs-on: ubuntu-latest
+    
+    env:
+      RAILS_ENV: test
+      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_integration
+      DISABLE_PROPSHAFT: true
+      RAILS_DISABLE_ASSET_COMPILATION: true
+      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
+      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
+      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
+      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}
+
+    services:
+      postgres:
+        image: postgres
+        env:
+          POSTGRES_USER: postgres
+          POSTGRES_PASSWORD: postgres
+        ports:
+          - 5432:5432
+        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3
+
+    steps:
+      - name: Install packages
+        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config
 
       - name: Checkout code
         uses: actions/checkout@v5
@@ -653,7 +750,7 @@ jobs:
         run: bundle install --jobs 4 --retry 3 --with development test
 
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
@@ -682,7 +779,6 @@ jobs:
         run: |
           chmod +x bin/build-tailwind-standalone.sh
           chmod +x script/test_tailwind_build.rb
-          chmod +x bin/split_system_tests.rb
 
       - name: Test Tailwind build
         env:
@@ -693,8 +789,8 @@ jobs:
 
       - name: Setup database
         run: |
-          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_system_1;"
-          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_system_1;"
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_integration;"
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_integration;"
           bundle exec rake ci:github_actions
 
       - name: Build Tailwind CSS
@@ -702,6 +798,84 @@ jobs:
           SKIP_SOLID_QUEUE_SETUP: true
         run: ./bin/build-tailwind-standalone.sh
 
+      - name: Run integration tests
+        run: bundle exec rspec spec/integration spec/features spec/mailers
+
+  # System tests part 1
+  test_system_1:
+    runs-on: ubuntu-latest
+    
+    env:
+      RAILS_ENV: test
+      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_system_1
+      DISABLE_PROPSHAFT: true
+      RAILS_DISABLE_ASSET_COMPILATION: true
+      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
+      CI: true
+      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
+      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
+      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}
+
+    services:
+      postgres:
+        image: postgres
+        env:
+          POSTGRES_USER: postgres
+          POSTGRES_PASSWORD: postgres
+        ports:
+          - 5432:5432
+        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3
+
+    steps:
+      - name: Install packages
+        run: |
+          sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
+          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
+          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
+          sudo apt-get update && sudo apt-get install -y google-chrome-stable
+          google-chrome --version
+      - name: Checkout code
+        uses: actions/checkout@v5
+      - name: Set up Ruby
+        uses: ruby/setup-ruby@v1
+        with:
+          ruby-version: '3.4.3'
+          bundler-cache: true
+      - name: Install all gems
+        run: bundle install --jobs 4 --retry 3 --with development test
+      - name: Set up Node.js
+        uses: actions/setup-node@v5
+        with:
+          node-version: '20'
+          cache: 'npm'
+      - name: Install JS Dependencies
+        run: npm install
+      - name: Build CSS Assets
+        run: |
+          AA_PATH=$(bundle info activeadmin --path)
+          mkdir -p app/assets/builds
+          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
+          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css --no-source-map --load-path=node_modules --load-path="$AA_PATH/app/assets/stylesheets"
+          mkdir -p public/assets && cp ./app/assets/builds/active_admin.css ./public/assets/
+      - name: Build JavaScript Assets
+        run: npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js
+      - name: Make scripts executable
+        run: chmod +x bin/build-tailwind-standalone.sh bin/split_system_tests.rb script/test_tailwind_build.rb
+      - name: Test Tailwind build
+        env:
+          RAILS_DISABLE_ASSET_COMPILATION: true
+          SKIP_SOLID_QUEUE_SETUP: true
+          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
+        run: ./script/test_tailwind_build.rb
+      - name: Setup database
+        run: |
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_system_1;"
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_system_1;"
+          bundle exec rake ci:github_actions
+      - name: Build Tailwind CSS
+        env:
+          SKIP_SOLID_QUEUE_SETUP: true
+        run: ./bin/build-tailwind-standalone.sh
       - name: Run system tests 1
         run: |
           TESTS=$(./bin/split_system_tests.rb 1)
@@ -711,7 +885,6 @@ jobs:
           else
             echo "No system tests found for group 1"
           fi
-
       - name: Keep screenshots from failed system tests
         uses: actions/upload-artifact@v4
         if: failure()
@@ -720,7 +893,7 @@ jobs:
           path: ${{ github.workspace }}/tmp/screenshots
           if-no-files-found: ignore
 
-  # System tests part 2 - Business management and website building
+  # System tests part 2
   test_system_2:
     runs-on: ubuntu-latest
     
@@ -748,78 +921,53 @@ jobs:
     steps:
       - name: Install packages
         run: |
-          sudo apt-get update
-          sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
-          # Install Chrome with modern apt key handling
+          sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
           curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
           echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
-          sudo apt-get update
-          sudo apt-get install -y google-chrome-stable
-          # Verify Chrome installation
+          sudo apt-get update && sudo apt-get install -y google-chrome-stable
           google-chrome --version
-
       - name: Checkout code
         uses: actions/checkout@v5
-
       - name: Set up Ruby
         uses: ruby/setup-ruby@v1
         with:
           ruby-version: '3.4.3'
           bundler-cache: true
-
       - name: Install all gems
         run: bundle install --jobs 4 --retry 3 --with development test
-
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
-
       - name: Install JS Dependencies
         run: npm install
-
       - name: Build CSS Assets
         run: |
           AA_PATH=$(bundle info activeadmin --path)
           mkdir -p app/assets/builds
           npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
-          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
-            --no-source-map \
-            --load-path=node_modules \
-            --load-path="$AA_PATH/app/assets/stylesheets"
-          mkdir -p public/assets
-          cp ./app/assets/builds/active_admin.css ./public/assets/
-
+          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css --no-source-map --load-path=node_modules --load-path="$AA_PATH/app/assets/stylesheets"
+          mkdir -p public/assets && cp ./app/assets/builds/active_admin.css ./public/assets/
       - name: Build JavaScript Assets
-        run: |
-          mkdir -p app/assets/builds
-          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js
-
+        run: npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js
       - name: Make scripts executable
-        run: |
-          chmod +x bin/build-tailwind-standalone.sh
-          chmod +x script/test_tailwind_build.rb
-          chmod +x bin/split_system_tests.rb
-
+        run: chmod +x bin/build-tailwind-standalone.sh bin/split_system_tests.rb script/test_tailwind_build.rb
       - name: Test Tailwind build
         env:
           RAILS_DISABLE_ASSET_COMPILATION: true
           SKIP_SOLID_QUEUE_SETUP: true
           DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
         run: ./script/test_tailwind_build.rb
-
       - name: Setup database
         run: |
           PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_system_2;"
           PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_system_2;"
           bundle exec rake ci:github_actions
-
       - name: Build Tailwind CSS
         env:
           SKIP_SOLID_QUEUE_SETUP: true
         run: ./bin/build-tailwind-standalone.sh
-
       - name: Run system tests 2
         run: |
           TESTS=$(./bin/split_system_tests.rb 2)
@@ -829,7 +977,6 @@ jobs:
           else
             echo "No system tests found for group 2"
           fi
-
       - name: Keep screenshots from failed system tests
         uses: actions/upload-artifact@v4
         if: failure()
@@ -838,7 +985,7 @@ jobs:
           path: ${{ github.workspace }}/tmp/screenshots
           if-no-files-found: ignore
 
-  # System tests part 3 - E-commerce, payments, and UI features
+  # System tests part 3
   test_system_3:
     runs-on: ubuntu-latest
     
@@ -866,78 +1013,53 @@ jobs:
     steps:
       - name: Install packages
         run: |
-          sudo apt-get update
-          sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
-          # Install Chrome with modern apt key handling
+          sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
           curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
           echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
-          sudo apt-get update
-          sudo apt-get install -y google-chrome-stable
-          # Verify Chrome installation
+          sudo apt-get update && sudo apt-get install -y google-chrome-stable
           google-chrome --version
-
       - name: Checkout code
         uses: actions/checkout@v5
-
       - name: Set up Ruby
         uses: ruby/setup-ruby@v1
         with:
           ruby-version: '3.4.3'
           bundler-cache: true
-
       - name: Install all gems
         run: bundle install --jobs 4 --retry 3 --with development test
-
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
-
       - name: Install JS Dependencies
         run: npm install
-
       - name: Build CSS Assets
         run: |
           AA_PATH=$(bundle info activeadmin --path)
           mkdir -p app/assets/builds
           npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
-          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css \
-            --no-source-map \
-            --load-path=node_modules \
-            --load-path="$AA_PATH/app/assets/stylesheets"
-          mkdir -p public/assets
-          cp ./app/assets/builds/active_admin.css ./public/assets/
-
+          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css --no-source-map --load-path=node_modules --load-path="$AA_PATH/app/assets/stylesheets"
+          mkdir -p public/assets && cp ./app/assets/builds/active_admin.css ./public/assets/
       - name: Build JavaScript Assets
-        run: |
-          mkdir -p app/assets/builds
-          npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js
-
+        run: npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js
       - name: Make scripts executable
-        run: |
-          chmod +x bin/build-tailwind-standalone.sh
-          chmod +x script/test_tailwind_build.rb
-          chmod +x bin/split_system_tests.rb
-
+        run: chmod +x bin/build-tailwind-standalone.sh bin/split_system_tests.rb script/test_tailwind_build.rb
       - name: Test Tailwind build
         env:
           RAILS_DISABLE_ASSET_COMPILATION: true
           SKIP_SOLID_QUEUE_SETUP: true
           DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
         run: ./script/test_tailwind_build.rb
-
       - name: Setup database
         run: |
           PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_system_3;"
           PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_system_3;"
           bundle exec rake ci:github_actions
-
       - name: Build Tailwind CSS
         env:
           SKIP_SOLID_QUEUE_SETUP: true
         run: ./bin/build-tailwind-standalone.sh
-
       - name: Run system tests 3
         run: |
           TESTS=$(./bin/split_system_tests.rb 3)
@@ -947,7 +1069,6 @@ jobs:
           else
             echo "No system tests found for group 3"
           fi
-
       - name: Keep screenshots from failed system tests
         uses: actions/upload-artifact@v4
         if: failure()
@@ -956,7 +1077,7 @@ jobs:
           path: ${{ github.workspace }}/tmp/screenshots
           if-no-files-found: ignore
 
-  # System tests part 4 - Newly added for group 4
+  # System tests part 4
   test_system_4:
     runs-on: ubuntu-latest
 
@@ -984,10 +1105,11 @@ jobs:
     steps:
       - name: Install packages
         run: |
-          sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev pkg-config curl
+          sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
           curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
           echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
           sudo apt-get update && sudo apt-get install -y google-chrome-stable
+          google-chrome --version
       - name: Checkout code
         uses: actions/checkout@v5
       - name: Set up Ruby
@@ -998,7 +1120,7 @@ jobs:
       - name: Install all gems
         run: bundle install --jobs 4 --retry 3 --with development test
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
@@ -1014,7 +1136,7 @@ jobs:
       - name: Build JavaScript Assets
         run: npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js
       - name: Make scripts executable
-        run: chmod +x bin/split_system_tests.rb
+        run: chmod +x bin/build-tailwind-standalone.sh bin/split_system_tests.rb script/test_tailwind_build.rb
       - name: Test Tailwind build
         env:
           RAILS_DISABLE_ASSET_COMPILATION: true
@@ -1047,6 +1169,99 @@ jobs:
           path: ${{ github.workspace }}/tmp/screenshots
           if-no-files-found: ignore
 
+  # System tests part 5
+  test_system_5:
+    runs-on: ubuntu-latest
+
+    env:
+      RAILS_ENV: test
+      DATABASE_URL: postgres://postgres:postgres@localhost:5432/bizblasts_test_system_5
+      DISABLE_PROPSHAFT: true
+      RAILS_DISABLE_ASSET_COMPILATION: true
+      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
+      CI: true
+      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY }}
+      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY }}
+      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: ${{ secrets.ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT }}
+
+    services:
+      postgres:
+        image: postgres
+        env:
+          POSTGRES_USER: postgres
+          POSTGRES_PASSWORD: postgres
+        ports:
+          - 5432:5432
+        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=3
+
+    steps:
+      - name: Install packages
+        run: |
+          sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config curl
+          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
+          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
+          sudo apt-get update && sudo apt-get install -y google-chrome-stable
+          google-chrome --version
+      - name: Checkout code
+        uses: actions/checkout@v5
+      - name: Set up Ruby
+        uses: ruby/setup-ruby@v1
+        with:
+          ruby-version: '3.4.3'
+          bundler-cache: true
+      - name: Install all gems
+        run: bundle install --jobs 4 --retry 3 --with development test
+      - name: Set up Node.js
+        uses: actions/setup-node@v5
+        with:
+          node-version: '20'
+          cache: 'npm'
+      - name: Install JS Dependencies
+        run: npm install
+      - name: Build CSS Assets
+        run: |
+          AA_PATH=$(bundle info activeadmin --path)
+          mkdir -p app/assets/builds
+          npx sass ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css --no-source-map --load-path=node_modules
+          npx sass ./app/assets/stylesheets/active_admin.scss:./app/assets/builds/active_admin.css --no-source-map --load-path=node_modules --load-path="$AA_PATH/app/assets/stylesheets"
+          mkdir -p public/assets && cp ./app/assets/builds/active_admin.css ./public/assets/
+      - name: Build JavaScript Assets
+        run: npx esbuild app/javascript/application.js --bundle --outfile=app/assets/javascripts/application.js
+      - name: Make scripts executable
+        run: chmod +x bin/build-tailwind-standalone.sh bin/split_system_tests.rb script/test_tailwind_build.rb
+      - name: Test Tailwind build
+        env:
+          RAILS_DISABLE_ASSET_COMPILATION: true
+          SKIP_SOLID_QUEUE_SETUP: true
+          DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
+        run: ./script/test_tailwind_build.rb
+      - name: Setup database
+        run: |
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS bizblasts_test_system_5;"
+          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE bizblasts_test_system_5;"
+          bundle exec rake ci:github_actions
+      - name: Build Tailwind CSS
+        env:
+          SKIP_SOLID_QUEUE_SETUP: true
+        run: ./bin/build-tailwind-standalone.sh
+      - name: Run system tests 5
+        run: |
+          TESTS=$(./bin/split_system_tests.rb 5)
+          if [ -n "$TESTS" ]; then
+            echo "Running system tests group 5..."
+            bundle exec rspec $TESTS --format documentation
+          else
+            echo "No system tests found for group 5"
+          fi
+      - name: Keep screenshots from failed system tests
+        uses: actions/upload-artifact@v4
+        if: failure()
+        with:
+          name: system-test-5-screenshots
+          path: ${{ github.workspace }}/tmp/screenshots
+          if-no-files-found: ignore
+
+
   # Other tests (helpers, lib, etc.)
   test_other:
     runs-on: ubuntu-latest
@@ -1088,7 +1303,7 @@ jobs:
         run: bundle install --jobs 4 --retry 3 --with development test
 
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
@@ -1200,7 +1415,7 @@ jobs:
         run: bundle install --jobs 4 --retry 3 --with development test
 
       - name: Set up Node.js
-        uses: actions/setup-node@v4
+        uses: actions/setup-node@v5
         with:
           node-version: '20'
           cache: 'npm'
@@ -1266,7 +1481,7 @@ jobs:
           fi
 
   deploy:
-    needs: [scan_ruby, scan_js, lint, test_models, test_requests_1, test_requests_2, test_services, test_integration, test_system_1, test_system_2, test_system_3, test_system_4, test_other, performance_test]
+    needs: [scan_ruby, scan_js, lint, test_models, test_requests_1, test_requests_2, test_services_1, test_services_2, test_services_3, test_integration, test_system_1, test_system_2, test_system_3, test_system_4, test_system_5, test_other, performance_test]
     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
     runs-on: ubuntu-latest
     
diff --git a/.github/workflows/cursor-pointer-lint.yml b/.github/workflows/cursor-pointer-lint.yml
index 3d9287c..98845d3 100644
--- a/.github/workflows/cursor-pointer-lint.yml
+++ b/.github/workflows/cursor-pointer-lint.yml
@@ -31,7 +31,7 @@ jobs:
         
     - name: Comment on PR if issues found
       if: failure() && github.event_name == 'pull_request'
-      uses: actions/github-script@v7
+      uses: actions/github-script@v8
       with:
         script: |
           const { execSync } = require('child_process');
diff --git a/Gemfile b/Gemfile
index e96d64a..f4ec731 100644
--- a/Gemfile
+++ b/Gemfile
@@ -9,7 +9,7 @@ gem "propshaft"
 # Use postgresql as the database for Active Record
 gem "pg", "~> 1.6"
 # Use the Puma web server [https://github.com/puma/puma]
-gem "puma", ">= 5.0"
+gem "puma", "~> 6.6"
 # Build JSON APIs with ease [https://github.com/rails/jbuilder]
 gem "jbuilder"
 
@@ -66,7 +66,7 @@ gem "redcarpet"
 gem "rouge" # For syntax highlighting
 
 # Stripe for payments
-gem "stripe", "~> 15.4"
+gem "stripe", "~> 15.5"
 
 # QR Code generation for in-person payments
 gem "rqrcode", "~> 3.1"
@@ -124,7 +124,7 @@ gem 'geocoder'
 
 # Calendar integrations
 gem 'google-apis-calendar_v3', '~> 0.31'
-gem 'googleauth', '~> 1.8'
+gem 'googleauth', '~> 1.15'
 gem 'microsoft_graph', '~> 0.22'
 gem 'oauth2', '~> 2.0'
 gem 'icalendar', '~> 2.10'
diff --git a/Gemfile.lock b/Gemfile.lock
index 7e43eeb..55f01cd 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -100,8 +100,8 @@ GEM
       ruby2_keywords (>= 0.0.2)
     ast (2.4.3)
     aws-eventstream (1.4.0)
-    aws-partitions (1.1148.0)
-    aws-sdk-core (3.229.0)
+    aws-partitions (1.1156.0)
+    aws-sdk-core (3.232.0)
       aws-eventstream (~> 1, >= 1.3.0)
       aws-partitions (~> 1, >= 1.992.0)
       aws-sigv4 (~> 1.9)
@@ -109,11 +109,11 @@ GEM
       bigdecimal
       jmespath (~> 1, >= 1.6.1)
       logger
-    aws-sdk-kms (1.110.0)
-      aws-sdk-core (~> 3, >= 3.228.0)
+    aws-sdk-kms (1.112.0)
+      aws-sdk-core (~> 3, >= 3.231.0)
       aws-sigv4 (~> 1.5)
-    aws-sdk-s3 (1.197.0)
-      aws-sdk-core (~> 3, >= 3.228.0)
+    aws-sdk-s3 (1.199.0)
+      aws-sdk-core (~> 3, >= 3.231.0)
       aws-sdk-kms (~> 1)
       aws-sigv4 (~> 1.5)
     aws-sigv4 (1.12.1)
@@ -121,7 +121,7 @@ GEM
     base64 (0.3.0)
     bcrypt (3.1.20)
     benchmark (0.4.1)
-    bigdecimal (3.2.2)
+    bigdecimal (3.2.3)
     bindex (0.8.1)
     bootsnap (1.18.6)
       msgpack (~> 1.2)
@@ -137,9 +137,10 @@ GEM
       rack-test (>= 0.6.3)
       regexp_parser (>= 1.5, < 3.0)
       xpath (~> 3.2)
+    childprocess (4.1.0)
     chunky_png (1.4.0)
     concurrent-ruby (1.3.5)
-    connection_pool (2.5.3)
+    connection_pool (2.5.4)
     crass (1.0.6)
     cssbundling-rails (1.4.3)
       railties (>= 6.0.0)
@@ -189,11 +190,11 @@ GEM
       zeitwerk (~> 2.6)
     erb (5.0.2)
     erubi (1.13.1)
-    et-orbi (1.2.11)
+    et-orbi (1.3.0)
       tzinfo
-    factory_bot (6.5.4)
+    factory_bot (6.5.5)
       activesupport (>= 6.1.0)
-    factory_bot_rails (6.5.0)
+    factory_bot_rails (6.5.1)
       factory_bot (~> 6.5)
       railties (>= 6.1.0)
     faker (3.5.2)
@@ -202,6 +203,8 @@ GEM
       faraday-net_http (>= 2.0, < 3.5)
       json
       logger
+    faraday-follow_redirects (0.3.0)
+      faraday (>= 1, < 3)
     faraday-net_http (3.4.1)
       net-http (>= 0.5.0)
     ferrum (0.17.1)
@@ -221,7 +224,7 @@ GEM
     formtastic (5.0.0)
       actionpack (>= 6.0.0)
     formtastic_i18n (0.7.0)
-    fugit (1.11.1)
+    fugit (1.11.2)
       et-orbi (~> 1, >= 1.2.11)
       raabro (~> 1.4)
     geocoder (1.8.5)
@@ -231,23 +234,23 @@ GEM
       activesupport (>= 6.1)
     google-apis-calendar_v3 (0.48.0)
       google-apis-core (>= 0.15.0, < 2.a)
-    google-apis-core (0.18.0)
-      addressable (~> 2.5, >= 2.5.1)
-      googleauth (~> 1.9)
-      httpclient (>= 2.8.3, < 3.a)
-      mini_mime (~> 1.0)
-      mutex_m
+    google-apis-core (1.0.1)
+      addressable (~> 2.8, >= 2.8.7)
+      faraday (~> 2.13)
+      faraday-follow_redirects (~> 0.3)
+      googleauth (~> 1.14)
+      mini_mime (~> 1.1)
       representable (~> 3.0)
-      retriable (>= 2.0, < 4.a)
+      retriable (~> 3.1)
     google-cloud-env (2.3.1)
       base64 (~> 0.2)
       faraday (>= 1.0, < 3.a)
     google-logging-utils (0.2.0)
-    googleauth (1.14.0)
+    googleauth (1.15.0)
       faraday (>= 1.0, < 3.a)
       google-cloud-env (~> 2.2)
       google-logging-utils (~> 0.1)
-      jwt (>= 1.4, < 3.0)
+      jwt (>= 1.4, < 4.0)
       multi_json (~> 1.11)
       os (>= 0.9, < 2.0)
       signet (>= 0.16, < 2.a)
@@ -261,8 +264,6 @@ GEM
       csv
       mini_mime (>= 1.0.0)
       multi_xml (>= 0.5.2)
-    httpclient (2.9.0)
-      mutex_m
     i18n (1.14.7)
       concurrent-ruby (~> 1.0)
     icalendar (2.11.2)
@@ -294,7 +295,7 @@ GEM
       railties (>= 4.2.0)
       thor (>= 0.14, < 2.0)
     json (2.9.1)
-    jwt (2.10.1)
+    jwt (2.10.2)
       base64
     kaminari (1.2.2)
       activesupport (>= 4.1.0)
@@ -308,7 +309,7 @@ GEM
       activerecord
       kaminari-core (= 1.2.2)
     kaminari-core (1.2.2)
-    language_server-protocol (3.17.0.4)
+    language_server-protocol (3.17.0.5)
     lint_roller (1.1.0)
     logger (1.7.0)
     loofah (2.24.1)
@@ -320,7 +321,7 @@ GEM
       net-pop
       net-smtp
     marcel (1.0.4)
-    matrix (0.4.2)
+    matrix (0.4.3)
     microsoft_graph (0.22.2)
       microsoft_graph_core (~> 0.3.1)
     microsoft_graph_core (0.3.2)
@@ -341,8 +342,7 @@ GEM
       json (>= 2.6.3, < 2.10.0)
       microsoft_kiota_abstractions (~> 0.14.0)
       uuidtools (~> 2.2.0)
-    mini_magick (5.2.0)
-      benchmark
+    mini_magick (5.3.1)
       logger
     mini_mime (1.1.5)
     minitest (5.25.5)
@@ -350,10 +350,9 @@ GEM
     multi_json (1.17.0)
     multi_xml (0.7.2)
       bigdecimal (~> 3.1)
-    mutex_m (0.3.0)
     net-http (0.6.0)
       uri
-    net-imap (0.5.9)
+    net-imap (0.5.10)
       date
       net-protocol
     net-pop (0.1.2)
@@ -379,30 +378,30 @@ GEM
       racc (~> 1.4)
     nokogiri (1.18.9-x86_64-linux-musl)
       racc (~> 1.4)
-    oauth2 (2.0.12)
+    oauth2 (2.0.15)
       faraday (>= 0.17.3, < 4.0)
       jwt (>= 1.0, < 4.0)
       logger (~> 1.2)
       multi_xml (~> 0.5)
       rack (>= 1.2, < 4)
       snaky_hash (~> 2.0, >= 2.0.3)
-      version_gem (>= 1.1.8, < 3)
+      version_gem (~> 1.1, >= 1.1.8)
     orm_adapter (0.5.0)
     os (1.1.4)
     ostruct (0.6.3)
     parallel (1.27.0)
     parallel_tests (5.4.0)
       parallel
-    parser (3.3.8.0)
+    parser (3.3.9.0)
       ast (~> 2.4.1)
       racc
-    pg (1.6.1)
-    pg (1.6.1-aarch64-linux)
-    pg (1.6.1-aarch64-linux-musl)
-    pg (1.6.1-arm64-darwin)
-    pg (1.6.1-x86_64-darwin)
-    pg (1.6.1-x86_64-linux)
-    pg (1.6.1-x86_64-linux-musl)
+    pg (1.6.2)
+    pg (1.6.2-aarch64-linux)
+    pg (1.6.2-aarch64-linux-musl)
+    pg (1.6.2-arm64-darwin)
+    pg (1.6.2-x86_64-darwin)
+    pg (1.6.2-x86_64-linux)
+    pg (1.6.2-x86_64-linux-musl)
     pp (0.6.2)
       prettyprint
     prettyprint (0.2.0)
@@ -421,7 +420,7 @@ GEM
       activesupport (>= 3.0.0)
     raabro (1.4.0)
     racc (1.8.1)
-    rack (3.2.0)
+    rack (3.2.1)
     rack-attack (6.7.0)
       rack (>= 1.0, < 4)
     rack-session (2.1.1)
@@ -474,7 +473,7 @@ GEM
       erb
       psych (>= 4.0.0)
     redcarpet (3.6.1)
-    regexp_parser (2.10.0)
+    regexp_parser (2.11.2)
     reline (0.6.2)
       io-console (~> 0.5)
     representable (3.2.0)
@@ -487,7 +486,7 @@ GEM
       actionpack (>= 5.2)
       railties (>= 5.2)
     retriable (3.1.2)
-    rexml (3.4.1)
+    rexml (3.4.2)
     rouge (4.6.0)
     rqrcode (3.1.0)
       chunky_png (~> 1.0)
@@ -511,8 +510,8 @@ GEM
       rspec-support (~> 3.13)
     rspec-retry (0.6.2)
       rspec-core (> 3.3)
-    rspec-support (3.13.4)
-    rubocop (1.75.3)
+    rspec-support (3.13.5)
+    rubocop (1.80.2)
       json (~> 2.3)
       language_server-protocol (~> 3.17.0.2)
       lint_roller (~> 1.1.0)
@@ -520,43 +519,43 @@ GEM
       parser (>= 3.3.0.2)
       rainbow (>= 2.2.2, < 4.0)
       regexp_parser (>= 2.9.3, < 3.0)
-      rubocop-ast (>= 1.44.0, < 2.0)
+      rubocop-ast (>= 1.46.0, < 2.0)
       ruby-progressbar (~> 1.7)
       unicode-display_width (>= 2.4.0, < 4.0)
-    rubocop-ast (1.44.1)
+    rubocop-ast (1.46.0)
       parser (>= 3.3.7.2)
       prism (~> 1.4)
     rubocop-performance (1.25.0)
       lint_roller (~> 1.1)
       rubocop (>= 1.75.0, < 2.0)
       rubocop-ast (>= 1.38.0, < 2.0)
-    rubocop-rails (2.31.0)
+    rubocop-rails (2.33.3)
       activesupport (>= 4.2.0)
       lint_roller (~> 1.1)
       rack (>= 1.1)
       rubocop (>= 1.75.0, < 2.0)
-      rubocop-ast (>= 1.38.0, < 2.0)
+      rubocop-ast (>= 1.44.0, < 2.0)
     rubocop-rails-omakase (1.1.0)
       rubocop (>= 1.72)
       rubocop-performance (>= 1.24)
       rubocop-rails (>= 2.30)
     ruby-progressbar (1.13.0)
-    ruby-vips (2.2.3)
+    ruby-vips (2.2.5)
       ffi (~> 1.12)
       logger
     ruby2_keywords (0.0.5)
-    rubyzip (2.4.1)
+    rubyzip (3.0.2)
     securerandom (0.4.1)
-    selenium-webdriver (4.10.0)
+    selenium-webdriver (4.1.0)
+      childprocess (>= 0.5, < 5.0)
       rexml (~> 3.2, >= 3.2.5)
-      rubyzip (>= 1.2.2, < 3.0)
-      websocket (~> 1.0)
+      rubyzip (>= 1.2.2)
     shoulda-matchers (6.5.0)
       activesupport (>= 5.2.0)
-    signet (0.20.0)
+    signet (0.21.0)
       addressable (~> 2.8)
       faraday (>= 0.17.5, < 3.a)
-      jwt (>= 1.5, < 3.0)
+      jwt (>= 1.5, < 4.0)
       multi_json (~> 1.10)
     simple_calendar (3.1.0)
       rails (>= 6.1)
@@ -564,7 +563,7 @@ GEM
       docile (~> 1.1)
       simplecov-html (~> 0.11)
       simplecov_json_formatter (~> 0.1)
-    simplecov-html (0.13.1)
+    simplecov-html (0.13.2)
     simplecov_json_formatter (0.1.4)
     snaky_hash (2.0.3)
       hashie (>= 0.1.0, < 6)
@@ -582,17 +581,17 @@ GEM
       thor (>= 1.3.1)
     stduritemplate (0.0.59)
     stringio (3.1.7)
-    stripe (15.4.0)
+    stripe (15.5.0)
     tailwindcss-rails (4.3.0)
       railties (>= 7.0.0)
       tailwindcss-ruby (~> 4.0)
-    tailwindcss-ruby (4.1.11)
-    tailwindcss-ruby (4.1.11-aarch64-linux-gnu)
-    tailwindcss-ruby (4.1.11-aarch64-linux-musl)
-    tailwindcss-ruby (4.1.11-arm64-darwin)
-    tailwindcss-ruby (4.1.11-x86_64-darwin)
-    tailwindcss-ruby (4.1.11-x86_64-linux-gnu)
-    tailwindcss-ruby (4.1.11-x86_64-linux-musl)
+    tailwindcss-ruby (4.1.12)
+    tailwindcss-ruby (4.1.12-aarch64-linux-gnu)
+    tailwindcss-ruby (4.1.12-aarch64-linux-musl)
+    tailwindcss-ruby (4.1.12-arm64-darwin)
+    tailwindcss-ruby (4.1.12-x86_64-darwin)
+    tailwindcss-ruby (4.1.12-x86_64-linux-gnu)
+    tailwindcss-ruby (4.1.12-x86_64-linux-musl)
     thor (1.4.0)
     thruster (0.1.15)
     thruster (0.1.15-aarch64-linux)
@@ -605,13 +604,13 @@ GEM
     tzinfo (2.0.6)
       concurrent-ruby (~> 1.0)
     uber (0.1.0)
-    unicode-display_width (3.1.4)
+    unicode-display_width (3.1.5)
       unicode-emoji (~> 4.0, >= 4.0.4)
     unicode-emoji (4.0.4)
     uri (1.0.3)
     useragent (0.16.11)
     uuidtools (2.2.0)
-    version_gem (1.1.8)
+    version_gem (1.1.9)
     warden (1.2.9)
       rack (>= 2.0.9)
     warden-jwt_auth (0.11.0)
@@ -629,7 +628,6 @@ GEM
       rubyzip (>= 1.3.0)
       selenium-webdriver (~> 4.0, < 4.11)
     webrick (1.9.1)
-    websocket (1.2.11)
     websocket-driver (0.8.0)
       base64
       websocket-extensions (>= 0.1.0)
@@ -673,7 +671,7 @@ DEPENDENCIES
   faker
   geocoder
   google-apis-calendar_v3 (~> 0.31)
-  googleauth (~> 1.8)
+  googleauth (~> 1.15)
   groupdate
   httparty (~> 0.21)
   icalendar (~> 2.10)
@@ -686,7 +684,7 @@ DEPENDENCIES
   parallel_tests
   pg (~> 1.6)
   propshaft
-  puma (>= 5.0)
+  puma (~> 6.6)
   pundit
   rack-attack
   rails (~> 8.0.2)
@@ -703,7 +701,7 @@ DEPENDENCIES
   simplecov
   solid_cache
   solid_queue
-  stripe (~> 15.4)
+  stripe (~> 15.5)
   tailwindcss-rails
   thruster
   tod
diff --git a/README.md b/README.md
index a77e1ba..023e365 100644
--- a/README.md
+++ b/README.md
@@ -26,6 +26,59 @@ BizBlasts is a modern multi-tenant Rails 8 application for business websites wit
 
 **📖 See [Security Documentation](#security) section below for implementation details**
 
+## 🌐 **Custom Domain CNAME Setup (Premium Feature)**
+
+**BizBlasts Premium businesses can connect custom domains using CNAME records:**
+- ✅ **Automated DNS Monitoring** - Real-time verification of CNAME configuration
+- ✅ **Email-Guided Setup** - Step-by-step instructions sent to business owners
+- ✅ **Multi-DNS Server Verification** - Checks across Google DNS, Cloudflare, and OpenDNS
+- ✅ **Render.com Integration** - Automatic domain registration with hosting platform
+- ✅ **ActiveAdmin Management** - Complete admin interface for domain lifecycle
+- ✅ **Automatic SSL** - HTTPS certificates provisioned automatically
+- ✅ **Tier-Based Controls** - Domain removal on tier downgrades
+- ✅ **Timeout Assistance** - Troubleshooting emails when setup fails
+- ✅ **Domain Change Request Interface** - Intuitive form for requesting domain changes
+- ✅ **Tier-Conditional UI** - Interface adapts based on business subscription tier
+- ✅ **Rich Dropdown Components** - Enhanced UX with fancy JavaScript dropdowns
+
+**Custom Domain Workflow:**
+1. Business submits domain change request through settings interface
+2. System sends email notification to BizBlasts team for review
+3. Team reviews request and contacts business within 24-48 hours
+4. For custom domains: Domain ownership verification assistance provided
+5. System adds approved domain to Render.com via API
+6. Email sent with CNAME setup instructions (`domain.com` → `bizblasts.onrender.com`)
+7. DNS monitoring checks every 5 minutes for 1 hour
+8. Domain automatically activated when CNAME verified
+9. SSL certificate provisioned by Render.com
+
+**Environment Variables Required:**
+```bash
+RENDER_API_KEY=your_render_api_key_here
+RENDER_SERVICE_ID=your_render_service_id_here
+SUPPORT_EMAIL=bizblaststeam@gmail.com
+```
+
+### **Domain Change Request Features**
+
+**🎨 Tier-Adaptive Interface:**
+- **Premium Tier**: Full access to custom domain and subdomain options
+- **Free/Standard Tier**: Subdomain-only interface with upgrade prompts
+- **Smart Labels**: Contextual field labels based on subscription tier
+- **Conditional Content**: Premium-specific process steps and domain availability tools
+
+**✨ Enhanced UX Components:**
+- **Rich JavaScript Dropdowns**: Replaced HTML selects with interactive dropdowns
+- **Hover Effects**: Proper color transitions for buttons and links
+- **Consistent Spacing**: Uniform `mb-8` spacing between all form sections
+- **Visual Feedback**: Loading states, validation, and success/error messaging
+
+**🔧 Technical Implementation:**
+- **Route Integration**: `/manage/settings/business/edit` with domain change form
+- **Email Notifications**: Automatic team notifications via `DomainMailer`
+- **Turbo Compatible**: Works seamlessly with Rails 8 Hotwire stack
+- **Form Validation**: Real-time validation with proper error handling
+
 ---
 
 ## Prerequisites
@@ -37,13 +90,91 @@ BizBlasts is a modern multi-tenant Rails 8 application for business websites wit
 
 ## Domain Architecture: Subdomain vs Custom Domain
 
-BizBlasts supports two tenant hosting modes:
+BizBlasts supports two tenant hosting modes with unified routing:
 
 | Host Type            | Database Columns Used | Example |
 |----------------------|-----------------------|---------|
 | `subdomain` (default)| `subdomain` contains the subdomain **only** (e.g. `acme`) <br/> `hostname` may also be populated but is ignored for routing | `https://acme.bizblasts.com` (production) <br/> `http://acme.lvh.me:3000` (development) |
 | `custom_domain`      | `hostname` stores the full custom domain (e.g. `acme-corp.com`) | `https://acme-corp.com` |
 
+### **Unified Tenant Routing System**
+
+**🎯 Key Achievement:** All tenant routes automatically work on both subdomains AND custom domains without code duplication.
+
+#### **Route Architecture:**
+```ruby
+# config/routes.rb - Single constraint handles both domain types
+constraints TenantPublicConstraint do
+  scope module: 'public' do
+    get '/', to: 'pages#show'           # Works on both testbiz.bizblasts.com AND customdomain.com
+    get '/services', to: 'pages#show'   # Works on both domain types
+    get '/book', to: 'booking#new'      # Works on both domain types
+    # ... all tenant routes work universally
+  end
+  
+  # Cart, orders, payments - all work on both domain types
+  resource :cart, controller: 'public/carts'
+  resources :orders, controller: 'public/orders'
+  resources :payments, controller: 'public/payments'
+end
+```
+
+#### **Constraint Logic:**
+- **`TenantPublicConstraint`**: Matches both `*.bizblasts.com` subdomains AND active custom domains
+- **`CustomDomainConstraint`**: Identifies requests from verified custom domains (`status: 'cname_active'`)
+- **`SubdomainConstraint`**: Handles `*.bizblasts.com` subdomains (used for admin/manage routes)
+
+#### **Tenant Detection Flow:**
+1. **Request arrives** → `ApplicationController#set_tenant`
+2. **Subdomain check** → `find_business_by_subdomain` 
+3. **Custom domain check** → `find_business_by_custom_domain` (matches both apex and www)
+4. **Tenant set** → `ActsAsTenant.current_tenant = business`
+5. **Route constraint** → `TenantPublicConstraint` matches and serves tenant content
+
+#### **Mailer URL Reliability:**
+```ruby
+# ✅ CORRECT: Reliable host determination for critical links
+@business.mailer_host                    # Always reliable (defaults to subdomain)
+@business.mailer_host(prefer_custom_domain: true)  # Uses custom domain only if fully verified
+
+# ❌ WRONG: Could break if custom domain has DNS issues
+@business.hostname                       # Might be unreliable for payments/invoices
+```
+
+### **Adding New Tenant Routes**
+
+**✅ Future-Proof Pattern:**
+```ruby
+# All routes added here automatically work on BOTH subdomains and custom domains
+constraints TenantPublicConstraint do
+  scope module: 'public' do
+    get '/new-feature', to: 'new_feature#index'  # ← Works on testbiz.bizblasts.com AND customdomain.com
+  end
+end
+```
+
+**🚨 Common Mistake:**
+```ruby
+# ❌ WRONG: Only works on main platform domain
+get '/new-feature', to: 'public/new_feature#index'
+```
+
+### **Route Validation Tools**
+
+**Automated validation ensures all routes work correctly:**
+```bash
+# Comprehensive route validation
+bin/rails tenant:validate_routes
+
+# Quick development testing
+bin/test-tenant-routes
+
+# Test specific new route
+bin/test-tenant-routes --route /new-feature
+```
+
+**📖 Complete Documentation:** [docs/TENANT_ROUTING_GUIDE.md](docs/TENANT_ROUTING_GUIDE.md)
+
 When generating links or redirects **always use the `TenantHost` helper (it automatically adds `:port` in dev/test)**:
 
 ```
diff --git a/app/admin/businesses.rb b/app/admin/businesses.rb
index 562473d..0738bec 100644
--- a/app/admin/businesses.rb
+++ b/app/admin/businesses.rb
@@ -1,6 +1,41 @@
 # frozen_string_literal: true
 
 ActiveAdmin.register Business do
+  # Use numeric ID in action-item links to avoid hostname-with-dot issues
+  config.clear_action_items!
+
+  action_item :edit, only: :show do
+    link_to 'Edit Business', edit_admin_business_path(resource.id)
+  end
+
+  action_item :delete, only: :show do
+    link_to 'Delete Business', admin_business_path(resource.id), method: :delete, data: { confirm: 'Are you sure?' }
+  end
+
+  action_item :start_domain_setup, only: :show, if: proc { resource.can_setup_custom_domain? } do
+    link_to 'Start Domain Setup', start_domain_setup_admin_business_path(resource.id),
+            class: 'button aa-post-confirm',
+            data: { turbo: false, confirm: 'Begin CNAME setup and email instructions?' }
+  end
+
+  action_item :restart_domain_monitoring, only: :show, if: proc { ['cname_pending', 'cname_monitoring', 'cname_timeout'].include?(resource.status) } do
+    link_to 'Restart Monitoring', restart_domain_monitoring_admin_business_path(resource.id),
+            class: 'button aa-post-confirm',
+            data: { turbo: false, confirm: 'Restart DNS monitoring for another hour?' }
+  end
+
+  action_item :force_activate_domain, only: :show, if: proc { resource.premium_tier? && resource.host_type_custom_domain? } do
+    link_to 'Force Activate Domain', force_activate_domain_admin_business_path(resource.id),
+            class: 'button aa-post-confirm',
+            data: { turbo: false, confirm: 'Force-activate domain (bypasses DNS verification). Continue?' }
+  end
+
+  action_item :disable_custom_domain, only: :show, if: proc { resource.cname_active? || resource.status.in?(['cname_pending','cname_monitoring','cname_timeout']) } do
+    link_to 'Remove Custom Domain', disable_custom_domain_admin_business_path(resource.id),
+            class: 'button aa-post-confirm',
+            data: { turbo: false, confirm: 'Permanently remove custom domain and revert to subdomain hosting?' }
+  end
+
   # Remove tenant scoping for admin panel
   controller do
     # skip_before_action :set_tenant, if: -> { true } # REMOVED: Global filter was removed
@@ -19,17 +54,38 @@ ActiveAdmin.register Business do
       raise ActiveRecord::RecordNotFound, "Couldn't find Business with 'id'=#{params[:id]} or 'hostname'=#{params[:id]}"
     end
 
-    # Removed custom create action - let ActiveAdmin handle redirect
+    # Ensure redirects after create/update use numeric ID to avoid dots in hostname.
+    def create
+      super do |success, _failure|
+        success.html { return redirect_to admin_business_path(resource.id) }
+      end
+    end
+
+    def update
+      super do |success, _failure|
+        success.html { return redirect_to admin_business_path(resource.id) }
+      end
+    end
+
+    # Ensure form actions use numeric ID instead of business.to_param (hostname)
+    def resource_path(resource)
+      admin_business_path(resource.id)
+    end
+
+    def resource_url(resource)
+      admin_business_url(resource.id)
+    end
   end
 
-  # Permit parameters updated for hostname/host_type and domain coverage
+  # Permit parameters updated for hostname/host_type, domain coverage, and CNAME fields
   permit_params :name, :industry, :phone, :email, :website,
                 :address, :city, :state, :zip, :description, :time_zone,
-                :active, :tier, :service_template_id, 
-                :hostname, :host_type, # Added new fields
+                :active, :tier, :subdomain, :service_template_id, 
+                :hostname, :host_type, :canonical_preference, # Added new fields
                 :stripe_customer_id, # Stripe integration
                 :domain_coverage_applied, :domain_cost_covered, :domain_renewal_date, :domain_coverage_notes, # Domain coverage fields
-                :domain_auto_renewal_enabled, :domain_coverage_expires_at, :domain_registrar, :domain_registration_date # Auto-renewal tracking
+                :domain_auto_renewal_enabled, :domain_coverage_expires_at, :domain_registrar, :domain_registration_date, # Auto-renewal tracking
+                :status, :cname_setup_email_sent_at, :cname_monitoring_active, :cname_check_attempts, :render_domain_added # CNAME fields
 
   # Enable batch actions
   batch_action :destroy, confirm: "Are you sure you want to delete these businesses?" do |ids|
@@ -95,15 +151,105 @@ ActiveAdmin.register Business do
     end
   end
 
+  # CNAME Domain Management Actions
+  member_action :start_domain_setup, method: :post do
+    begin
+      setup_service = CnameSetupService.new(resource)
+      result = setup_service.start_setup!
+      
+      if result[:success]
+        redirect_to admin_business_path(resource.id), notice: result[:message]
+      else
+        redirect_to admin_business_path(resource.id), alert: "Domain setup failed: #{result[:error]}"
+      end
+    rescue => e
+      redirect_to admin_business_path(resource.id), alert: "Error starting domain setup: #{e.message}"
+    end
+  end
+
+  member_action :restart_domain_monitoring, method: :post do
+    begin
+      setup_service = CnameSetupService.new(resource)
+      result = setup_service.restart_monitoring!
+      
+      if result[:success]
+        redirect_to admin_business_path(resource.id), notice: result[:message]
+      else
+        redirect_to admin_business_path(resource.id), alert: "Failed to restart monitoring: #{result[:error]}"
+      end
+    rescue => e
+      redirect_to admin_business_path(resource.id), alert: "Error restarting monitoring: #{e.message}"
+    end
+  end
+
+  member_action :force_activate_domain, method: :post do
+    begin
+      setup_service = CnameSetupService.new(resource)
+      result = setup_service.force_activate!
+      
+      if result[:success]
+        redirect_to admin_business_path(resource.id), notice: result[:message]
+      else
+        redirect_to admin_business_path(resource.id), alert: "Failed to activate domain: #{result[:error]}"
+      end
+    rescue => e
+      redirect_to admin_business_path(resource.id), alert: "Error activating domain: #{e.message}"
+    end
+  end
+
+  member_action :disable_custom_domain, method: :post do
+    begin
+      removal_service = DomainRemovalService.new(resource)
+      result = removal_service.remove_domain!
+      
+      if result[:success]
+        redirect_to admin_business_path(resource.id), notice: result[:message]
+      else
+        redirect_to admin_business_path(resource.id), alert: "Failed to remove domain: #{result[:error]}"
+      end
+    rescue => e
+      redirect_to admin_business_path(resource.id), alert: "Error removing domain: #{e.message}"
+    end
+  end
+
+  member_action :domain_status, method: :get do
+    begin
+      business = Business.find(params[:id])
+      
+      setup_service = CnameSetupService.new(business)
+      status = setup_service.status
+      
+      # Add real-time DNS check if monitoring
+      if business.cname_monitoring_active?
+        # Use canonical domain for DNS checking instead of raw hostname
+        check_domain = business.canonical_domain || business.hostname
+        dns_checker = CnameDnsChecker.new(check_domain)
+        dns_result = dns_checker.verify_cname
+        status[:dns_check] = {
+          verified: dns_result[:verified],
+          target: dns_result[:target],
+          checked_at: dns_result[:checked_at],
+          error: dns_result[:error]
+        }
+      end
+      
+      render json: status
+    rescue => e
+      render json: { error: e.message }, status: :internal_server_error
+    end
+  end
+
   # Filter options updated
   filter :name
   filter :hostname
   filter :host_type, as: :select, collection: Business.host_types.keys.map { |k| [k.humanize, k] }
+  filter :status, as: :select, collection: Business.statuses.keys.map { |k| [k.humanize, k] }
   filter :tier, as: :select, collection: Business.tiers.keys.map { |k| [k.humanize, k] }
   filter :industry
   filter :active
   filter :stripe_status, as: :select, collection: [['Connected', 'connected'], ['Not Connected', 'not_connected']], label: "Stripe Status"
   filter :domain_coverage_applied, as: :select, collection: [['Yes', true], ['No', false]]
+  filter :cname_monitoring_active, as: :select, collection: [['Yes', true], ['No', false]]
   filter :domain_renewal_date
   filter :created_at
 
@@ -112,19 +258,34 @@ ActiveAdmin.register Business do
     selectable_column
     column :id
     column :name
+    column :subdomain
     column :hostname
     column :host_type
+    column :status do |business|
+      case business.status
+      when 'cname_pending'
+        status_tag "Setup Pending", class: "warning"
+      when 'cname_monitoring'
+        status_tag "DNS Monitoring", class: "warning"
+      when 'cname_active'
+        status_tag "Domain Active", class: "ok"
+      when 'cname_timeout'
+        status_tag "Setup Timeout", class: "error"
+      else
+        status_tag business.status.humanize, class: "default"
+      end
+    end
     column :tier
     column "Stripe Status", :stripe_account_id do |business|
       if business.stripe_account_id.present?
         begin
           if StripeService.check_onboarding_status(business)
-            status_tag "Connected", class: "ok"
+            status_tag("Connected", class: "ok") + " (Account ID: #{business.stripe_account_id})".html_safe
           else
-            status_tag "Setup Incomplete", class: "warning"
+            status_tag("Setup Incomplete", class: "warning") + " (Account ID: #{business.stripe_account_id})".html_safe
           end
         rescue => e
-          status_tag "Error", class: "error"
+          status_tag("Error", class: "error") + " (Account ID: #{business.stripe_account_id})".html_safe
         end
       else
         status_tag "Not Connected", class: "error"
@@ -153,6 +314,22 @@ ActiveAdmin.register Business do
       item "View", admin_business_path(business.id)
       item "Edit", edit_admin_business_path(business.id)
       item "Delete", admin_business_path(business.id), method: :delete, data: { confirm: "Are you sure?" }
+
+      if business.can_setup_custom_domain?
+        item "Start Domain Setup", start_domain_setup_admin_business_path(business.id), class: 'member_link aa-post-confirm', data: { turbo: false, confirm: 'Begin CNAME setup and email instructions?' }
+      end
+
+      if ['cname_pending', 'cname_monitoring', 'cname_timeout'].include?(business.status)
+        item "Restart Monitoring", restart_domain_monitoring_admin_business_path(business.id), class: 'member_link aa-post-confirm', data: { turbo: false, confirm: 'Restart DNS monitoring for another hour?' }
+      end
+
+      if business.premium_tier? && business.host_type_custom_domain?
+        item "Force Activate Domain", force_activate_domain_admin_business_path(business.id), class: 'member_link aa-post-confirm', data: { turbo: false, confirm: 'Force-activate domain (bypasses DNS verification). Continue?' }
+      end
+
+      if business.cname_active? || business.status.in?(['cname_pending', 'cname_monitoring', 'cname_timeout'])
+        item "Remove Custom Domain", disable_custom_domain_admin_business_path(business.id), class: 'member_link aa-post-confirm', data: { turbo: false, confirm: 'Permanently remove custom domain and revert to subdomain hosting?' }
+      end
     end
   end
 
@@ -161,19 +338,27 @@ ActiveAdmin.register Business do
     attributes_table do
       row :id
       row :name
+      row :subdomain
       row :hostname
       row :host_type
+      row :canonical_preference do |business|
+        if business.host_type_custom_domain?
+          status_tag(business.canonical_preference.humanize, class: business.www_canonical_preference? ? "ok" : "warning")
+        else
+          "N/A (Subdomain)"
+        end
+      end
       row :tier
       row "Stripe Status" do |business|
         if business.stripe_account_id.present?
           begin
             if StripeService.check_onboarding_status(business)
-              status_tag("Connected", class: "ok") + " (Account ID: #{business.stripe_account_id})".html_safe
+              status_tag("Connected", class: "ok") + " (Account ID: #{ERB::Util.h(business.stripe_account_id)})".html_safe
             else
-              status_tag("Setup Incomplete", class: "warning") + " (Account ID: #{business.stripe_account_id})".html_safe
+              status_tag("Setup Incomplete", class: "warning") + " (Account ID: #{ERB::Util.h(business.stripe_account_id)})".html_safe
             end
           rescue => e
-            status_tag("Error", class: "error") + " (Account ID: #{business.stripe_account_id})".html_safe
+            status_tag("Error", class: "error") + " (Account ID: #{ERB::Util.h(business.stripe_account_id)})".html_safe
           end
         else
           status_tag "Not Connected", class: "error"
@@ -199,28 +384,28 @@ ActiveAdmin.register Business do
     # Stripe Integration Panel
     panel "Stripe Integration" do
       attributes_table_for business do
-        row "Connection Status" do |b|
-          if b.stripe_account_id.present?
+        row "Connection Status" do |business|
+          if business.stripe_account_id.present?
             begin
-              if StripeService.check_onboarding_status(b)
-                status_tag "Connected", class: "ok"
+              if StripeService.check_onboarding_status(business)
+                status_tag("Connected", class: "ok") + " (Account ID: #{ERB::Util.h(business.stripe_account_id)})".html_safe
               else
-                status_tag "Setup Incomplete", class: "warning"
+                status_tag("Setup Incomplete", class: "warning") + " (Account ID: #{ERB::Util.h(business.stripe_account_id)})".html_safe
               end
             rescue => e
-              status_tag "Error", class: "error"
+              status_tag("Error", class: "error") + " (Account ID: #{ERB::Util.h(business.stripe_account_id)})".html_safe
             end
           else
             status_tag "Not Connected", class: "error"
           end
         end
-        row "Stripe Connect Account ID" do |b|
-          b.stripe_account_id.present? ? b.stripe_account_id : "Not set"
+        row "Stripe Connect Account ID" do |business|
+          business.stripe_account_id.present? ? business.stripe_account_id : "Not set"
         end
-        row "Stripe Customer ID (for subscriptions)" do |b|
-          b.stripe_customer_id.present? ? b.stripe_customer_id : "Not set"
+        row "Stripe Customer ID (for subscriptions)" do |business|
+          business.stripe_customer_id.present? ? business.stripe_customer_id : "Not set"
         end
-        row "Connected At" do |b|
+        row "Connected At" do |business|
           # This would need to be tracked separately if needed
           "Not tracked"
         end
@@ -231,12 +416,12 @@ ActiveAdmin.register Business do
     if business.eligible_for_domain_coverage?
       panel "Domain Coverage Information" do
         attributes_table_for business do
-          row "Coverage Status" do |b|
-            if b.domain_coverage_applied?
-              if b.domain_coverage_expired?
+          row "Coverage Status" do |business|
+            if business.domain_coverage_applied?
+              if business.domain_coverage_expired?
                 status_tag "Coverage Expired", class: "error"
-              elsif b.domain_coverage_expires_soon?
-                status_tag "Expiring Soon (#{b.domain_coverage_remaining_days} days)", class: "warning"
+              elsif business.domain_coverage_expires_soon?
+                status_tag "Expiring Soon (#{business.domain_coverage_remaining_days} days)", class: "warning"
               else
                 status_tag "Coverage Applied", class: "ok"
               end
@@ -244,28 +429,28 @@ ActiveAdmin.register Business do
               status_tag "Coverage Available", class: "warning"
             end
           end
-          row "Coverage Limit" do |b|
-            "$#{b.domain_coverage_limit}/year"
+          row "Coverage Limit" do |business|
+            "$#{business.domain_coverage_limit}/year"
           end
-          row "Amount Covered" do |b|
-            b.domain_cost_covered.present? ? "$#{b.domain_cost_covered}" : "Not applied"
+          row "Amount Covered" do |business|
+            business.domain_cost_covered.present? ? "$#{business.domain_cost_covered}" : "Not applied"
           end
-          row "Domain Registrar" do |b|
-            b.domain_registrar.present? ? b.domain_registrar.titleize : "Not specified"
+          row "Domain Registrar" do |business|
+            business.domain_registrar.present? ? business.domain_registrar.titleize : "Not specified"
           end
-          row "Registration Date" do |b|
-            b.domain_registration_date&.strftime("%B %d, %Y") || "Not set"
+          row "Registration Date" do |business|
+            business.domain_registration_date&.strftime("%B %d, %Y") || "Not set"
           end
-          row "Domain Renewal Date" do |b|
-            b.domain_renewal_date&.strftime("%B %d, %Y") || "Not set"
+          row "Domain Renewal Date" do |business|
+            business.domain_renewal_date&.strftime("%B %d, %Y") || "Not set"
           end
-          row "Coverage Expires" do |b|
-            if b.domain_coverage_expires_at.present?
-              expires_text = b.domain_coverage_expires_at.strftime("%B %d, %Y")
-              if b.domain_coverage_expired?
+          row "Coverage Expires" do |business|
+            if business.domain_coverage_expires_at.present?
+              expires_text = business.domain_coverage_expires_at.strftime("%B %d, %Y")
+              if business.domain_coverage_expired?
                 "#{expires_text} (EXPIRED)"
-              elsif b.domain_coverage_expires_soon?
-                "#{expires_text} (expires in #{b.domain_coverage_remaining_days} days)"
+              elsif business.domain_coverage_expires_soon?
+                "#{expires_text} (expires in #{business.domain_coverage_remaining_days} days)"
               else
                 expires_text
               end
@@ -273,15 +458,147 @@ ActiveAdmin.register Business do
               "Not set"
             end
           end
-          row "Auto-Renewal Status" do |b|
-            if b.domain_will_auto_renew?
+          row "Auto-Renewal Status" do |business|
+            if business.domain_will_auto_renew?
               status_tag "Auto-Renewal Enabled", class: "ok"
             else
               status_tag "Manual Renewal", class: "warning"
             end
           end
-          row "Coverage Notes" do |b|
-            b.domain_coverage_notes.present? ? simple_format(b.domain_coverage_notes) : "No notes"
+          row "Coverage Notes" do |business|
+            business.domain_coverage_notes.present? ? simple_format(business.domain_coverage_notes) : "No notes"
+          end
+        end
+      end
+    end
+    
+    # CNAME Custom Domain Panel for Premium businesses with custom domains
+    if business.premium_tier? && business.host_type_custom_domain?
+      panel "Custom Domain Management" do
+        attributes_table_for business do
+          row "Domain Status" do |business|
+            case business.status
+            when 'cname_pending'
+              status_tag "Setup Pending", class: "warning"
+            when 'cname_monitoring'
+              status_tag "DNS Monitoring Active", class: "warning"
+            when 'cname_active'
+              status_tag "Active & Working", class: "ok"
+            when 'cname_timeout'
+              status_tag "Setup Timed Out", class: "error"
+            else
+              status_tag business.status.humanize, class: "default"
+            end
+          end
+          row "Custom Domain" do |business|
+            if business.hostname.present?
+              # Use canonical domain for display and links
+              canonical_domain = business.canonical_domain || business.hostname
+              display_text = business.hostname
+              # Show canonical preference indicator if different from hostname
+              if canonical_domain != business.hostname
+                display_text += " → #{canonical_domain}"
+              end
+              
+              if business.cname_active?
+                link_to display_text, "https://#{canonical_domain}", target: "_blank", class: "external-link"
+              else
+                display_text
+              end
+            else
+              "Not configured"
+            end
+          end
+          row "Monitoring Active" do |business|
+            business.cname_monitoring_active? ? status_tag("Yes", class: "ok") : status_tag("No", class: "default")
+          end
+          row "DNS Check Attempts" do |business|
+            "#{business.cname_check_attempts}/12"
+          end
+          row "Setup Email Sent" do |business|
+            if business.cname_setup_email_sent_at.present?
+              "#{time_ago_in_words(business.cname_setup_email_sent_at)} ago"
+            else
+              "Not sent"
+            end
+          end
+          row "Render Domain Added" do |business|
+            business.render_domain_added? ? status_tag("Yes", class: "ok") : status_tag("No", class: "error")
+          end
+        end
+        
+        # Live status refresh for monitoring domains
+        if business.cname_monitoring_active?
+          div id: "domain-live-status", style: "margin: 15px 0; padding: 10px; background: #f0f8ff; border-radius: 4px;" do
+            para style: "margin: 0; font-weight: bold;" do
+              "🔄 Live DNS Status: "
+              span "Checking...", id: "live-status-text"
+            end
+            para style: "margin: 5px 0 0 0; font-size: 12px; color: #666;" do
+              "Last checked: "
+              span "Never", id: "last-checked"
+            end
+          end
+          
+          script do
+            raw <<-JAVASCRIPT
+              function updateDomainStatus() {
+                fetch('/admin/businesses/#{business.id}/domain_status')
+                  .then(response => response.json())
+                  .then(data => {
+                    const statusText = document.getElementById('live-status-text');
+                    const lastChecked = document.getElementById('last-checked');
+                    
+                    if (data.dns_check) {
+                      if (data.dns_check.verified) {
+                        statusText.innerHTML = '✅ DNS Verified';
+                        statusText.style.color = 'green';
+                      } else {
+                        statusText.innerHTML = '⏳ DNS Pending';
+                        statusText.style.color = 'orange';
+                      }
+                      lastChecked.textContent = new Date(data.dns_check.checked_at).toLocaleTimeString();
+                    } else {
+                      statusText.innerHTML = '📊 Monitoring Active';
+                      statusText.style.color = 'blue';
+                    }
+                  })
+                  .catch(error => {
+                    console.error('Error fetching domain status:', error);
+                  });
+              }
+              
+              // Update immediately and then every 30 seconds
+              updateDomainStatus();
+              setInterval(updateDomainStatus, 30000);
+            JAVASCRIPT
+          end
+        end
+        
+        # Domain management actions
+        div class: "domain-actions", style: "margin-top: 15px;" do
+          if business.can_setup_custom_domain?
+            link_to "Start Domain Setup", start_domain_setup_admin_business_path(business.id), 
+                    method: :post, class: "button", 
+                    data: { confirm: "This will start the CNAME setup process and send setup instructions via email. Continue?" }
+          end
+          
+          if ['cname_pending', 'cname_monitoring', 'cname_timeout'].include?(business.status)
+            link_to "Restart Monitoring", restart_domain_monitoring_admin_business_path(business.id), 
+                    method: :post, class: "button", 
+                    data: { confirm: "This will restart DNS monitoring for another hour. Continue?" }
+          end
+          
+          if business.premium_tier? && business.host_type_custom_domain?
+            link_to "Force Activate Domain", force_activate_domain_admin_business_path(business.id), 
+                    method: :post, class: "button", 
+                    data: { confirm: "This will bypass DNS verification and immediately activate the domain. Use only if DNS is properly configured. Continue?" }
+          end
+          
+          if business.cname_active? || business.status.in?(['cname_pending', 'cname_monitoring', 'cname_timeout'])
+            button_to "Remove Custom Domain", disable_custom_domain_admin_business_path(business.id), 
+                    method: :post, class: "button", style: "background-color: #dc3545; color: white;",
+                    data: { confirm: "⚠️ WARNING: This will permanently remove the custom domain and revert to subdomain hosting (#{business.subdomain || business.hostname}.bizblasts.com). The domain will no longer work for this business. This action cannot be undone. Are you sure you want to continue?" }
           end
         end
       end
@@ -308,8 +625,10 @@ ActiveAdmin.register Business do
   form do |f|
     f.inputs "Business Details" do
       f.input :name
+      f.input :subdomain
       f.input :hostname
       f.input :host_type, as: :select, collection: Business.host_types.keys.map { |k| [k.humanize, k] }, include_blank: false
+      f.input :canonical_preference, as: :select, collection: Business.canonical_preferences.keys.map { |k| [k.humanize, k] }, include_blank: false, hint: "Choose canonical URL format for custom domains"
       f.input :tier, as: :select, collection: Business.tiers.keys.map { |k| [k.humanize, k] }, include_blank: false
       f.input :industry, as: :select, collection: Business.industries.keys.map { |k| [k.humanize, k] }, include_blank: false
       f.input :phone
diff --git a/app/admin/customer_subscriptions.rb b/app/admin/customer_subscriptions.rb
index 0262005..3e50089 100644
--- a/app/admin/customer_subscriptions.rb
+++ b/app/admin/customer_subscriptions.rb
@@ -29,7 +29,7 @@ ActiveAdmin.register CustomerSubscription do
     id_column
     
     column :business do |subscription|
-      link_to subscription.business.name, admin_business_path(subscription.business)
+      link_to subscription.business.name, admin_business_path(subscription.business.id)
     end
     
     column :customer do |subscription|
@@ -86,7 +86,7 @@ ActiveAdmin.register CustomerSubscription do
     attributes_table do
       row :id
       row :business do |subscription|
-        link_to subscription.business.name, admin_business_path(subscription.business)
+        link_to subscription.business.name, admin_business_path(subscription.business.id)
       end
       row :customer do |subscription|
         div do
diff --git a/app/admin/policy_acceptances.rb b/app/admin/policy_acceptances.rb
index b57d7e7..700df90 100644
--- a/app/admin/policy_acceptances.rb
+++ b/app/admin/policy_acceptances.rb
@@ -53,7 +53,7 @@ ActiveAdmin.register PolicyAcceptance do
           end
           row :business do |user|
             if user.business
-              link_to user.business.name, admin_business_path(user.business)
+              link_to user.business.name, admin_business_path(user.business.id)
             else
               span "No Business", class: 'empty'
             end
diff --git a/app/admin/products.rb b/app/admin/products.rb
index 56cb9cb..55c07c7 100644
--- a/app/admin/products.rb
+++ b/app/admin/products.rb
@@ -197,7 +197,7 @@ ActiveAdmin.register Product do
       if product.update(permitted_params[:product])
         redirect_to resource_path, notice: "Product was successfully updated."
       else
-        render plain: product.errors.full_messages.join(', '), status: :unprocessable_entity
+        render plain: product.errors.full_messages.join(', '), status: :unprocessable_content
       end
     end
   end
diff --git a/app/admin/service_templates.rb b/app/admin/service_templates.rb
index 87fd615..5e704d5 100644
--- a/app/admin/service_templates.rb
+++ b/app/admin/service_templates.rb
@@ -225,7 +225,7 @@ ActiveAdmin.register ServiceTemplate do
                collection_path # Fallback
              end
       # Redirect back to the form, potentially preserving input if possible (ActiveAdmin might handle this)
-      redirect_to path, status: :unprocessable_entity
+      redirect_to path, status: :unprocessable_content
     end
 
     # Explicitly define create action for logging
@@ -240,7 +240,7 @@ ActiveAdmin.register ServiceTemplate do
         redirect_to resource_path(@service_template), notice: "Service template was successfully created."
       else
         Rails.logger.error("ServiceTemplate save failed: #{@service_template.errors.full_messages.join(', ')}")
-        render :new, status: :unprocessable_entity
+        render :new, status: :unprocessable_content
       end
       Rails.logger.info("--- ServiceTemplate Create Action End ---")
     end
@@ -257,7 +257,7 @@ ActiveAdmin.register ServiceTemplate do
         redirect_to resource_path(@service_template), notice: "Service template was successfully updated."
       else
         Rails.logger.error("ServiceTemplate update failed: #{@service_template.errors.full_messages.join(', ')}")
-        render :edit, status: :unprocessable_entity
+        render :edit, status: :unprocessable_content
       end
       Rails.logger.info("--- ServiceTemplate Update Action End ---")
     end
diff --git a/app/admin/services.rb b/app/admin/services.rb
index edb5c53..bf15969 100644
--- a/app/admin/services.rb
+++ b/app/admin/services.rb
@@ -79,40 +79,7 @@ ActiveAdmin.register Service do
     end
   end
 
-  filter :name
-  filter :description
-  filter :price
-  filter :duration
-  filter :active
-  filter :business
-
-  index do
-    selectable_column
-    id_column
-    column :name
-    column :description
-    column :price do |service|
-      number_to_currency(service.price) if service.price
-    end
-    column :duration do |service|
-      "#{service.duration} minutes" if service.duration
-    end
-    column :active
-    column :business
-    actions
-  end
 
-  form do |f|
-    f.inputs do
-      f.input :name
-      f.input :description
-      f.input :price
-      f.input :duration, label: 'Duration (minutes)'
-      f.input :active
-      f.input :business, collection: Business.order(:name)
-    end
-    f.actions
-  end
 
   # Permit relevant parameters including the association and nested image attributes
   permit_params :business_id, :name, :description, :duration, :price, :active, :featured, :allow_discounts, :availability_settings, :service_type, staff_member_ids: [], add_on_product_ids: [], min_bookings: [], max_bookings: [], spots: [], images_attributes: [:id, :primary, :position, :_destroy]
@@ -196,7 +163,7 @@ ActiveAdmin.register Service do
     attributes_table do
       row :name
       row :business do |service|
-        link_to service.business.name, admin_business_path(service.business)
+        link_to service.business.name, admin_business_path(service.business.id)
       end
       row :description
       row :duration
@@ -261,7 +228,7 @@ ActiveAdmin.register Service do
         redirect_to resource_path(service), notice: "Service was successfully updated."
       else
         flash.now[:error] = service.errors.full_messages.join(', ')
-        render :edit, status: :unprocessable_entity
+        render :edit, status: :unprocessable_content
       end
     end
 
@@ -274,7 +241,7 @@ ActiveAdmin.register Service do
         redirect_to resource_path(service), notice: "Service was successfully created."
       else
         flash.now[:error] = service.errors.full_messages.join(', ')
-        render :new, status: :unprocessable_entity
+        render :new, status: :unprocessable_content
       end
     end
 
diff --git a/app/admin/subscription_analytics.rb b/app/admin/subscription_analytics.rb
index da1142b..6cf11ea 100644
--- a/app/admin/subscription_analytics.rb
+++ b/app/admin/subscription_analytics.rb
@@ -133,7 +133,7 @@ ActiveAdmin.register_page "Subscription Analytics" do
         top_businesses.each do |business_data, revenue|
           business = Business.find(business_data[0])
           tr do
-            td link_to(business.name, admin_business_path(business))
+            td link_to(business.name, admin_business_path(business.id))
             td business.customer_subscriptions.active.count
             td number_to_currency(revenue)
             td status_tag(business.tier)
@@ -153,7 +153,7 @@ ActiveAdmin.register_page "Subscription Analytics" do
           link_to subscription.id, admin_customer_subscription_path(subscription)
         end
         column :business do |subscription|
-          link_to subscription.business.name, admin_business_path(subscription.business)
+          link_to subscription.business.name, admin_business_path(subscription.business.id)
         end
         column :customer do |subscription|
           subscription.tenant_customer.email
@@ -190,7 +190,7 @@ ActiveAdmin.register_page "Subscription Analytics" do
                     admin_customer_subscription_path(transaction.customer_subscription)
           end
           column :business do |transaction|
-            link_to transaction.business.name, admin_business_path(transaction.business)
+            link_to transaction.business.name, admin_business_path(transaction.business.id)
           end
           column :customer do |transaction|
             transaction.tenant_customer.email
diff --git a/app/admin/subscription_reports.rb b/app/admin/subscription_reports.rb
index 7c9e5a3..87c0a8a 100644
--- a/app/admin/subscription_reports.rb
+++ b/app/admin/subscription_reports.rb
@@ -346,7 +346,7 @@ ActiveAdmin.register_page "Subscription Reports" do
               link_to transaction.id, admin_subscription_transaction_path(transaction)
             end
             column :business do |transaction|
-              link_to transaction.business.name, admin_business_path(transaction.business)
+              link_to transaction.business.name, admin_business_path(transaction.business.id)
             end
             column :customer do |transaction|
               transaction.tenant_customer.email
diff --git a/app/admin/subscription_transactions.rb b/app/admin/subscription_transactions.rb
index 1d63bc2..4831a31 100644
--- a/app/admin/subscription_transactions.rb
+++ b/app/admin/subscription_transactions.rb
@@ -33,7 +33,7 @@ ActiveAdmin.register SubscriptionTransaction do
     end
     
     column :business do |transaction|
-      link_to transaction.business.name, admin_business_path(transaction.business)
+      link_to transaction.business.name, admin_business_path(transaction.business.id)
     end
     
     column :customer do |transaction|
@@ -82,7 +82,7 @@ ActiveAdmin.register SubscriptionTransaction do
                 admin_customer_subscription_path(transaction.customer_subscription)
       end
       row :business do |transaction|
-        link_to transaction.business.name, admin_business_path(transaction.business)
+        link_to transaction.business.name, admin_business_path(transaction.business.id)
       end
       row :customer do |transaction|
         div do
diff --git a/app/admin/tip_configurations.rb b/app/admin/tip_configurations.rb
index b589129..2a822fe 100644
--- a/app/admin/tip_configurations.rb
+++ b/app/admin/tip_configurations.rb
@@ -11,7 +11,7 @@ ActiveAdmin.register TipConfiguration do
     selectable_column
     id_column
     column :business do |config|
-      link_to config.business.name, admin_business_path(config.business) if config.business
+      link_to config.business.name, admin_business_path(config.business.id) if config.business
     end
     column :default_tip_percentages do |config|
       config.tip_percentage_options.map { |p| "#{p}%" }.join(", ")
@@ -30,7 +30,7 @@ ActiveAdmin.register TipConfiguration do
     attributes_table do
       row :id
       row :business do |config|
-        link_to config.business.name, admin_business_path(config.business)
+        link_to config.business.name, admin_business_path(config.business.id)
       end
       row :default_tip_percentages do |config|
         config.default_tip_percentages&.join(", ")
diff --git a/app/admin/tips.rb b/app/admin/tips.rb
index f92e537..e57d678 100644
--- a/app/admin/tips.rb
+++ b/app/admin/tips.rb
@@ -15,7 +15,7 @@ ActiveAdmin.register Tip do
     selectable_column
     id_column
     column :business do |tip|
-      link_to tip.business.name, admin_business_path(tip.business) if tip.business
+      link_to tip.business.name, admin_business_path(tip.business.id) if tip.business
     end
     column :booking do |tip|
       link_to "Booking ##{tip.booking.id}", admin_booking_path(tip.booking) if tip.booking
@@ -41,7 +41,7 @@ ActiveAdmin.register Tip do
     attributes_table do
       row :id
       row :business do |tip|
-        link_to tip.business.name, admin_business_path(tip.business)
+        link_to tip.business.name, admin_business_path(tip.business.id)
       end
       row :booking do |tip|
         link_to "Booking ##{tip.booking.id}", admin_booking_path(tip.booking)
diff --git a/app/assets/javascripts/active_admin.js b/app/assets/javascripts/active_admin.js
index 15acc9d..f60640a 100644
--- a/app/assets/javascripts/active_admin.js
+++ b/app/assets/javascripts/active_admin.js
@@ -656,4 +656,58 @@ function initializeActiveAdminEnhancements() {
 
 // Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
 document.addEventListener('DOMContentLoaded', initializeActiveAdminEnhancements);
-document.addEventListener('turbo:load', initializeActiveAdminEnhancements);
\ No newline at end of file
+document.addEventListener('turbo:load', initializeActiveAdminEnhancements);
+
+// Custom confirm + POST helper for ActiveAdmin member links
+function initializeAAConfirmPostLinks() {
+  function wire(container) {
+    const links = container.querySelectorAll('a.aa-post-confirm');
+    links.forEach((link) => {
+      // Replace existing handlers
+      const cloned = link.cloneNode(true);
+      link.parentNode.replaceChild(cloned, link);
+
+      cloned.addEventListener('click', function(e) {
+        e.preventDefault();
+        const message = cloned.getAttribute('data-confirm');
+        if (message && !window.confirm(message)) {
+          return false;
+        }
+        // Build and submit a POST form
+        const form = document.createElement('form');
+        form.method = 'POST';
+        form.action = cloned.getAttribute('href');
+        form.style.display = 'none';
+        // CSRF token
+        const csrf = document.querySelector('meta[name="csrf-token"]');
+        if (csrf) {
+          const token = document.createElement('input');
+          token.type = 'hidden';
+          token.name = 'authenticity_token';
+          token.value = csrf.getAttribute('content');
+          form.appendChild(token);
+        }
+        // Method override not needed (POST), but keep compatibility hook
+        const methodInput = document.createElement('input');
+        methodInput.type = 'hidden';
+        methodInput.name = '_method';
+        methodInput.value = 'post';
+        form.appendChild(methodInput);
+
+        document.body.appendChild(form);
+        form.submit();
+        return false;
+      });
+    });
+  }
+
+  // Initial wire
+  wire(document);
+
+  // Re-wire on Turbo loads and DOM changes
+  document.addEventListener('turbo:load', () => wire(document));
+  document.addEventListener('DOMContentLoaded', () => wire(document));
+}
+
+document.addEventListener('DOMContentLoaded', initializeAAConfirmPostLinks);
+document.addEventListener('turbo:load', initializeAAConfirmPostLinks);
\ No newline at end of file
diff --git a/app/assets/stylesheets/active_admin.scss b/app/assets/stylesheets/active_admin.scss
index 13544e6..4953d80 100644
--- a/app/assets/stylesheets/active_admin.scss
+++ b/app/assets/stylesheets/active_admin.scss
@@ -760,3 +760,61 @@ html body.active_admin #content-preview {
   width: 100% !important;
   box-sizing: border-box !important;
 }
+
+// Match button_to-generated buttons to ActiveAdmin action-item style
+body.active_admin .action_items .action_item form.button_to,
+body.active_admin .action_items .action_item form.button_to div,
+body.active_admin .action_items .action_item form.button_to input[type="submit"],
+body.active_admin .action_items .action_item form.button_to button {
+  display: inline-block;
+  margin: 0 6px;
+}
+
+body.active_admin .action_items .action_item form.button_to input[type="submit"],
+body.active_admin .action_items .action_item form.button_to button,
+body.active_admin .action_items .action_item .button {
+  background: #f5f5f5;
+  background-image: linear-gradient(#f5f5f5, #e5e5e5);
+  border: 1px solid #c8c8c8;
+  border-radius: 20px;
+  box-shadow: inset 0 1px 0 rgba(255,255,255,0.7), 0 1px 2px rgba(0,0,0,0.1);
+  color: #555 !important;
+  font-weight: 700;
+  padding: 10px 20px;
+  text-decoration: none;
+}
+
+body.active_admin .action_items .action_item form.button_to input[type="submit"]:hover,
+body.active_admin .action_items .action_item form.button_to button:hover,
+body.active_admin .action_items .action_item .button:hover {
+  background-image: linear-gradient(#ffffff, #e9e9e9);
+}
+
+body.active_admin .action_items .action_item .button-danger,
+body.active_admin .action_items .action_item form.button_to .button-danger {
+  background: #7a7f84;
+  background-image: linear-gradient(#7a7f84, #5a5f64);
+  color: #fff !important;
+  border-color: #4c4f52;
+}
+
+body.active_admin .action_items .action_item .button-danger:hover,
+body.active_admin .action_items .action_item form.button_to .button-danger:hover {
+  background-image: linear-gradient(#8a8f94, #6a6f74);
+}
+
+// Final polish: make submit buttons visually identical to AA .button links
+body.active_admin .action_items .action_item form.button_to input[type="submit"],
+body.active_admin .action_items .action_item form.button_to button {
+  -webkit-appearance: none;
+  appearance: none;
+  line-height: 1.2;
+  cursor: pointer;
+  text-shadow: 0 1px 0 rgba(255,255,255,0.8);
+  vertical-align: middle;
+}
+
+// Ensure the form wrapper does not affect vertical rhythm
+body.active_admin .action_items .action_item form.button_to {
+  display: inline;
+}
diff --git a/app/controllers/application_controller.rb b/app/controllers/application_controller.rb
index 3a8a306..5d2a111 100644
--- a/app/controllers/application_controller.rb
+++ b/app/controllers/application_controller.rb
@@ -27,6 +27,7 @@ class ApplicationController < ActionController::Base
   # Set current tenant based on subdomain/custom domain
   # This filter should be skipped in specific controllers where tenant context is handled differently
   before_action :set_tenant, unless: -> { maintenance_mode? }
+  # (Removed obsolete redirect callback – route-level redirect now handles this)
   before_action :check_database_connection
 
   # Authentication (now runs after tenant is set)
@@ -37,6 +38,9 @@ class ApplicationController < ActionController::Base
 
   # Handle Pundit NotAuthorizedError
   rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized
+  
+  # Handle unsafe redirect errors (e.g., when already-signed-in users access registration)
+  rescue_from ActionController::Redirecting::UnsafeRedirectError, with: :handle_unsafe_redirect
 
   # Allow manually setting tenant in tests
   def self.allow_tenant_params
@@ -113,6 +117,9 @@ class ApplicationController < ActionController::Base
     # Try to find business by custom domain first
     business = find_business_by_custom_domain
     
+    # Custom domain redirects are handled by Render based on which domain was added as primary
+    # No Rails-level redirects needed - Render automatically redirects to the canonical domain
+    
     # If no custom domain match, try subdomain
     if business.nil?
       hostname = extract_hostname_for_tenant
@@ -166,9 +173,17 @@ class ApplicationController < ActionController::Base
   end
 
   # Find business by custom domain (exact hostname match)
+  # Only allow active custom domains that are also health-verified to serve traffic
   def find_business_by_custom_domain
     return nil unless businesses_table_exists?
-    Business.find_by(host_type: 'custom_domain', hostname: request.host)
+
+    host = request.host.to_s.downcase
+    root = host.sub(/^www\./, '')
+    candidates = [host, root, "www.#{root}"]
+
+    Business.where(host_type: 'custom_domain', status: 'cname_active', domain_health_verified: true)
+            .where('LOWER(hostname) IN (?)', candidates)
+            .first
   end
 
   # Extract hostname/subdomain for tenant lookup
@@ -202,8 +217,7 @@ class ApplicationController < ActionController::Base
   def find_business_by_subdomain(hostname)
     return nil unless hostname.present? && businesses_table_exists?
     # Search for tenant businesses matching either hostname or subdomain (case-insensitive)
-    Business.where(host_type: 'subdomain')
-            .where("LOWER(hostname) = ? OR LOWER(subdomain) = ?", hostname.downcase, hostname.downcase)
+    Business.where("LOWER(hostname) = ? OR LOWER(subdomain) = ?", hostname.downcase, hostname.downcase)
             .first
   end
 
@@ -250,6 +264,13 @@ class ApplicationController < ActionController::Base
     redirect_to root_path, allow_other_host: true and return
   end
 
+  def handle_unsafe_redirect
+    # Log the unsafe redirect attempt for debugging
+    Rails.logger.warn "[UnsafeRedirect] User #{current_user&.id || 'anonymous'} attempted unsafe redirect from #{request.fullpath}"
+    
+    # Render the standard Rails 404 page instead of showing Rails error
+    render file: Rails.root.join('public', '404.html'), status: :not_found, layout: false
+  end
 
   # === DEVISE OVERRIDES ===
   # Customize the redirect path after sign-in
diff --git a/app/controllers/business/registrations_controller.rb b/app/controllers/business/registrations_controller.rb
index 80ecb9f..dc5d03a 100644
--- a/app/controllers/business/registrations_controller.rb
+++ b/app/controllers/business/registrations_controller.rb
@@ -42,7 +42,7 @@ class Business::RegistrationsController < Users::RegistrationsController
       build_resource(user_params)
 
       business_attrs = raw_business_params.except(:industry)
-      allowed_business_keys = [:name, :phone, :email, :address, :city, :state, :zip, :description, :tier, :hostname, :platform_referral_code]
+      allowed_business_keys = [:name, :phone, :email, :address, :city, :state, :zip, :description, :tier, :hostname, :canonical_preference, :platform_referral_code]
       business_attrs = if business_attrs.respond_to?(:permit)
                          business_attrs.permit(*allowed_business_keys).to_h
                        else
@@ -52,7 +52,7 @@ class Business::RegistrationsController < Users::RegistrationsController
 
       clean_up_passwords resource
       set_minimum_password_length
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
       return
     end
     
@@ -93,7 +93,7 @@ class Business::RegistrationsController < Users::RegistrationsController
       
       clean_up_passwords resource
       set_minimum_password_length
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
       return
     end
 
@@ -119,9 +119,8 @@ class Business::RegistrationsController < Users::RegistrationsController
       business_attributes: [
         :name, :industry, :phone, :email, :address, :city, :state, :zip,
         :description, :tier, 
-        :hostname, # Permit the single hostname field
+        :hostname, :subdomain, :host_type, :custom_domain_owned, :canonical_preference,
         :platform_referral_code # Permit platform referral code
-        # Removed :subdomain, :domain
       ],
       policy_acceptances: {}
     ])
@@ -131,32 +130,41 @@ class Business::RegistrationsController < Users::RegistrationsController
   def process_business_host_params(raw_params)
     # Handle both ActionController::Parameters and regular Hash
     if raw_params.respond_to?(:permit!)
-      processed_params = raw_params.except(:hostname).permit! # Permit all *except* hostname initially
+      processed_params = raw_params.except(:hostname, :subdomain).permit! # Remove hostname and subdomain initially
     else
-      # For regular Hash (like in tests), just duplicate and remove hostname
-      processed_params = raw_params.except(:hostname).dup
+      # For regular Hash (like in tests), just duplicate and remove hostname/subdomain
+      processed_params = raw_params.except(:hostname, :subdomain).dup
     end
     
     tier = raw_params[:tier]
-    # Note: Form now submits :hostname directly, not :subdomain/:domain
-    hostname_input = raw_params[:hostname].presence 
-
-    if hostname_input.present?
-      # Basic check: Does it look like a custom domain or just a subdomain part?
-      if hostname_input.include?('.') 
-        processed_params[:hostname] = hostname_input
-        processed_params[:host_type] = 'custom_domain'
-      else 
-        # Assume it's intended as a subdomain part
-        processed_params[:hostname] = hostname_input 
+    subdomain_input = raw_params[:subdomain].presence
+    hostname_input = raw_params[:hostname].presence # Custom domain (Premium only)
+
+    # Priority: Custom domain (hostname) > Subdomain
+    if hostname_input.present? && tier == 'premium'
+      # Premium tier with custom domain
+      processed_params[:hostname] = hostname_input
+      processed_params[:host_type] = 'custom_domain'
+    elsif subdomain_input.present?
+      # Use subdomain (for all tiers)
+      processed_params[:hostname] = subdomain_input 
+      processed_params[:host_type] = 'subdomain'
+    else
+      # Neither provided - set defaults based on tier
+      if tier == 'free'
+        # Free tier defaults to subdomain host_type even if hostname is blank
+        # This allows the model validation to show the correct error message
+        processed_params[:hostname] = nil 
+        processed_params[:host_type] = 'subdomain'
+      elsif tier.in?(['standard', 'premium'])
+        # Paid tiers without custom domain default to subdomain with generated hostname
+        # This allows Premium businesses to be created without requiring custom domains
+        processed_params[:hostname] = nil # Will be auto-generated by model if needed
         processed_params[:host_type] = 'subdomain'
+      else
+        processed_params[:hostname] = nil 
+        processed_params[:host_type] = nil
       end
-    else
-      # Neither provided, let model handle blank hostname
-      processed_params[:hostname] = nil 
-      # For free tier, default to subdomain host_type even if hostname is blank
-      # This allows the model validation to show the correct error message
-      processed_params[:host_type] = tier == 'free' ? 'subdomain' : nil
     end
 
     # Convert human-readable industry name (value) to the enum key string
@@ -190,7 +198,7 @@ class Business::RegistrationsController < Users::RegistrationsController
   def business_params
     params.require(:user).fetch(:business_attributes, {}).permit(
       :name, :industry, :phone, :email, :address, :city, :state, :zip,
-      :description, :tier, :hostname 
+      :description, :tier, :hostname, :subdomain, :host_type 
     )
   end
   
@@ -227,7 +235,6 @@ class Business::RegistrationsController < Users::RegistrationsController
   def setup_stripe_integration(business)
     # Only setup Stripe for paid tiers
     return unless business.tier.in?(['standard', 'premium'])
-    
     Rails.logger.info "[REGISTRATION] Setting up Stripe integration for Business ##{business.id} (#{business.tier} tier)"
     
     begin
@@ -324,7 +331,7 @@ class Business::RegistrationsController < Users::RegistrationsController
       
       clean_up_passwords resource
       set_minimum_password_length
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
     end
   end
 
diff --git a/app/controllers/business_manager/bookings_controller.rb b/app/controllers/business_manager/bookings_controller.rb
index 9e37624..46a93d4 100644
--- a/app/controllers/business_manager/bookings_controller.rb
+++ b/app/controllers/business_manager/bookings_controller.rb
@@ -397,7 +397,7 @@ module BusinessManager
       # Render form with errors if any policy violations
       if @booking.errors.any?
         flash.now[:alert] = @booking.errors.full_messages.join(', ')
-        return render :new, status: :unprocessable_entity
+        return render :new, status: :unprocessable_content
       end
 
       if @booking.save
@@ -406,7 +406,7 @@ module BusinessManager
       else
         #raise "DEBUG: Booking errors: #{@booking.errors.full_messages.inspect}"
         flash.now[:alert] = @booking.errors.full_messages.join(', ')
-        render :new, status: :unprocessable_entity
+        render :new, status: :unprocessable_content
       end
     end
     
diff --git a/app/controllers/business_manager/customer_subscriptions_controller.rb b/app/controllers/business_manager/customer_subscriptions_controller.rb
index fa7343f..4122482 100644
--- a/app/controllers/business_manager/customer_subscriptions_controller.rb
+++ b/app/controllers/business_manager/customer_subscriptions_controller.rb
@@ -60,7 +60,7 @@ class BusinessManager::CustomerSubscriptionsController < BusinessManager::BaseCo
       @tenant_customers = current_business.tenant_customers.active.order(:first_name, :last_name)
       @products = current_business.products.active.order(:name)
       @services = current_business.services.active.order(:name)
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
     end
   end
 
@@ -80,7 +80,7 @@ class BusinessManager::CustomerSubscriptionsController < BusinessManager::BaseCo
       @tenant_customers = current_business.tenant_customers.active.order(:first_name, :last_name)
       @products = current_business.products.active.order(:name)
       @services = current_business.services.active.order(:name)
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
 
diff --git a/app/controllers/business_manager/loyalty_controller.rb b/app/controllers/business_manager/loyalty_controller.rb
index 11d9bab..860d5ae 100644
--- a/app/controllers/business_manager/loyalty_controller.rb
+++ b/app/controllers/business_manager/loyalty_controller.rb
@@ -25,7 +25,7 @@ class BusinessManager::LoyaltyController < BusinessManager::BaseController
     if @loyalty_program.update(loyalty_program_params)
       redirect_to business_manager_loyalty_index_path, notice: 'Loyalty program updated successfully.'
     else
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
   
@@ -38,7 +38,7 @@ class BusinessManager::LoyaltyController < BusinessManager::BaseController
     else
       @loyalty_stats = {}
       @recent_transactions = []
-      render :index, status: :unprocessable_entity
+      render :index, status: :unprocessable_content
     end
   end
   
diff --git a/app/controllers/business_manager/payments_controller.rb b/app/controllers/business_manager/payments_controller.rb
index 0575a33..04713ac 100644
--- a/app/controllers/business_manager/payments_controller.rb
+++ b/app/controllers/business_manager/payments_controller.rb
@@ -128,7 +128,7 @@ module BusinessManager
       if params[:tenant_customer_id].blank? || params[:tenant_customer_id] == ''
         set_customers
         flash.now[:error] = 'Please select a customer or create a new customer.'
-        render :new, status: :unprocessable_entity
+        render :new, status: :unprocessable_content
         return
       end
       
@@ -136,7 +136,7 @@ module BusinessManager
       if payment_amount < 0.50
         set_customers
         flash.now[:error] = 'Payment amount must be at least $0.50.'
-        render :new, status: :unprocessable_entity
+        render :new, status: :unprocessable_content
         return
       end
       
@@ -154,7 +154,7 @@ module BusinessManager
         rescue ActiveRecord::RecordNotFound
           set_customers
           flash.now[:error] = 'Selected customer not found. Please select a valid customer.'
-          render :new, status: :unprocessable_entity
+          render :new, status: :unprocessable_content
           return
         end
       else
@@ -164,21 +164,21 @@ module BusinessManager
         if customer_params[:first_name].blank?
           set_customers
           flash.now[:error] = 'Please enter the customer\'s first name.'
-          render :new, status: :unprocessable_entity
+          render :new, status: :unprocessable_content
           return
         end
         
         if customer_params[:last_name].blank?
           set_customers
           flash.now[:error] = 'Please enter the customer\'s last name.'
-          render :new, status: :unprocessable_entity
+          render :new, status: :unprocessable_content
           return
         end
         
         if customer_params[:email].blank?
           set_customers
           flash.now[:error] = 'Please enter the customer\'s email address.'
-          render :new, status: :unprocessable_entity
+          render :new, status: :unprocessable_content
           return
         end
         
@@ -214,7 +214,7 @@ module BusinessManager
       else
         set_customers
         flash.now[:error] = 'Unable to create payment order. Please check your information and try again.'
-        render :new, status: :unprocessable_entity
+        render :new, status: :unprocessable_content
       end
     end
 
diff --git a/app/controllers/business_manager/products_controller.rb b/app/controllers/business_manager/products_controller.rb
index 2997f14..bc98583 100644
--- a/app/controllers/business_manager/products_controller.rb
+++ b/app/controllers/business_manager/products_controller.rb
@@ -29,7 +29,7 @@ module BusinessManager
         redirect_to business_manager_product_path(@product), notice: 'Product was successfully created.'
       else
         flash.now[:alert] = @product.errors.full_messages.to_sentence
-        render :new, status: :unprocessable_entity
+        render :new, status: :unprocessable_content
       end
     end
 
@@ -45,7 +45,7 @@ module BusinessManager
         redirect_to business_manager_product_path(@product), notice: 'Product was successfully updated.'
       else
         flash.now[:alert] = @product.errors.full_messages.to_sentence
-        render :edit, status: :unprocessable_entity
+        render :edit, status: :unprocessable_content
       end
     end
 
@@ -61,7 +61,7 @@ module BusinessManager
       if @product.move_to_position(new_position)
         render json: { status: 'success', message: 'Product position updated successfully' }
       else
-        render json: { status: 'error', message: 'Failed to update product position' }, status: :unprocessable_entity
+        render json: { status: 'error', message: 'Failed to update product position' }, status: :unprocessable_content
       end
     end
 
@@ -96,7 +96,7 @@ module BusinessManager
         end
       else
         respond_to do |format|
-          format.json { render json: { status: 'error', message: 'Failed to move product up' }, status: :unprocessable_entity }
+          format.json { render json: { status: 'error', message: 'Failed to move product up' }, status: :unprocessable_content }
           format.html { redirect_to business_manager_products_path, alert: 'Failed to move product up' }
         end
       end
@@ -133,7 +133,7 @@ module BusinessManager
         end
       else
         respond_to do |format|
-          format.json { render json: { status: 'error', message: 'Failed to move product down' }, status: :unprocessable_entity }
+          format.json { render json: { status: 'error', message: 'Failed to move product down' }, status: :unprocessable_content }
           format.html { redirect_to business_manager_products_path, alert: 'Failed to move product down' }
         end
       end
diff --git a/app/controllers/business_manager/promotions_controller.rb b/app/controllers/business_manager/promotions_controller.rb
index 03ee230..7cbeccb 100644
--- a/app/controllers/business_manager/promotions_controller.rb
+++ b/app/controllers/business_manager/promotions_controller.rb
@@ -36,7 +36,7 @@ class BusinessManager::PromotionsController < BusinessManager::BaseController
     else
       @products = current_business.products.active
       @services = current_business.services.active
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
     end
   end
   
@@ -56,7 +56,7 @@ class BusinessManager::PromotionsController < BusinessManager::BaseController
     else
       @products = current_business.products.active
       @services = current_business.services.active
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
   
diff --git a/app/controllers/business_manager/referrals_controller.rb b/app/controllers/business_manager/referrals_controller.rb
index f2c3a66..b2fca39 100644
--- a/app/controllers/business_manager/referrals_controller.rb
+++ b/app/controllers/business_manager/referrals_controller.rb
@@ -24,7 +24,7 @@ class BusinessManager::ReferralsController < BusinessManager::BaseController
       
       redirect_to business_manager_referrals_path, notice: 'Referral program updated successfully.'
     else
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
   
@@ -37,7 +37,7 @@ class BusinessManager::ReferralsController < BusinessManager::BaseController
     else
       @referrals = []
       @referral_stats = {}
-      render :index, status: :unprocessable_entity
+      render :index, status: :unprocessable_content
     end
   end
   
diff --git a/app/controllers/business_manager/services_controller.rb b/app/controllers/business_manager/services_controller.rb
index bb0cbb9..72dd908 100644
--- a/app/controllers/business_manager/services_controller.rb
+++ b/app/controllers/business_manager/services_controller.rb
@@ -38,7 +38,7 @@ class BusinessManager::ServicesController < BusinessManager::BaseController
       
       redirect_to business_manager_services_path, notice: 'Service was successfully created.'
     else
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
     end
   end
 
@@ -61,7 +61,7 @@ class BusinessManager::ServicesController < BusinessManager::BaseController
       
       redirect_to business_manager_services_path, notice: 'Service was successfully updated.'
     else
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
 
@@ -104,7 +104,7 @@ class BusinessManager::ServicesController < BusinessManager::BaseController
       if @service.move_to_position(new_position)
         render json: { status: 'success', message: 'Service position updated successfully' }
       else
-        render json: { status: 'error', message: 'Failed to update service position' }, status: :unprocessable_entity
+        render json: { status: 'error', message: 'Failed to update service position' }, status: :unprocessable_content
       end
     end
 
@@ -139,7 +139,7 @@ class BusinessManager::ServicesController < BusinessManager::BaseController
         end
       else
         respond_to do |format|
-          format.json { render json: { status: 'error', message: 'Failed to move service up' }, status: :unprocessable_entity }
+          format.json { render json: { status: 'error', message: 'Failed to move service up' }, status: :unprocessable_content }
           format.html { redirect_to business_manager_services_path, alert: 'Failed to move service up' }
         end
       end
@@ -176,7 +176,7 @@ class BusinessManager::ServicesController < BusinessManager::BaseController
         end
       else
         respond_to do |format|
-          format.json { render json: { status: 'error', message: 'Failed to move service down' }, status: :unprocessable_entity }
+          format.json { render json: { status: 'error', message: 'Failed to move service down' }, status: :unprocessable_content }
           format.html { redirect_to business_manager_services_path, alert: 'Failed to move service down' }
         end
       end
@@ -342,7 +342,7 @@ class BusinessManager::ServicesController < BusinessManager::BaseController
         @availability_manager.errors.join(', ') : 
         'Failed to update availability settings. Please check your input and try again.'
       
-      render 'availability', status: :unprocessable_entity
+      render 'availability', status: :unprocessable_content
     end
   rescue => e
     logger.error("Exception in availability update: #{e.message}")
diff --git a/app/controllers/business_manager/settings/booking_policies_controller.rb b/app/controllers/business_manager/settings/booking_policies_controller.rb
index 878b644..c709ede 100644
--- a/app/controllers/business_manager/settings/booking_policies_controller.rb
+++ b/app/controllers/business_manager/settings/booking_policies_controller.rb
@@ -45,7 +45,7 @@ class BusinessManager::Settings::BookingPoliciesController < BusinessManager::Ba
       redirect_to business_manager_settings_booking_policy_path, notice: 'Booking policies updated successfully.'
     else
       flash.now[:alert] = 'Error updating booking policies.'
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
 
diff --git a/app/controllers/business_manager/settings/business_controller.rb b/app/controllers/business_manager/settings/business_controller.rb
index faba61e..ff5005c 100644
--- a/app/controllers/business_manager/settings/business_controller.rb
+++ b/app/controllers/business_manager/settings/business_controller.rb
@@ -65,6 +65,19 @@ class BusinessManager::Settings::BusinessController < BusinessManager::BaseContr
     Rails.logger.info "[BUSINESS_SETTINGS] sync_location parameter: #{params[:sync_location].inspect}"
     
     if @business.update(business_params)
+      # After update, check if hostname or subdomain changed
+      if (@business.saved_change_to_hostname? || @business.saved_change_to_subdomain?)
+        # Only redirect to custom domain if it's already active and working
+        # For new custom domains, stay on current domain until setup is complete
+        if @business.host_type_custom_domain? && !@business.custom_domain_allow?
+          Rails.logger.info "[BUSINESS_SETTINGS] Custom domain #{@business.hostname} not yet active, staying on current domain"
+          # Don't redirect - let user stay on current working domain
+          flash[:notice] = "Custom domain configuration started! Check your email for setup instructions. You'll be able to use your custom domain once DNS is configured."
+        else
+          target_url = TenantHost.url_for(@business, request, edit_business_manager_settings_business_path)
+          return redirect_to target_url, allow_other_host: true
+        end
+      end
       # Check if the sync_location parameter is present with a value of '1'
       if params[:sync_location] == '1'
         sync_with_default_location
@@ -73,7 +86,174 @@ class BusinessManager::Settings::BusinessController < BusinessManager::BaseContr
         redirect_to edit_business_manager_settings_business_path, notice: 'Business information updated successfully.'
       end
     else
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
+    end
+  end
+
+  # POST /manage/settings/business/check_subdomain_availability
+  def check_subdomain_availability
+    result = SubdomainAvailabilityService.call(params[:subdomain], exclude_business: @business)
+    render json: result.to_h
+  end
+
+  # GET /manage/settings/business/check_domain_status
+  def check_domain_status
+    unless @business.host_type_custom_domain? && @business.hostname.present?
+      return render json: { 
+        error: 'Domain status checking is only available for custom domains' 
+      }, status: :unprocessable_entity
+    end
+
+    begin
+      # Initialize monitoring service (which includes all checkers)
+      monitoring_service = DomainMonitoringService.new(@business)
+      
+      # Get comprehensive status
+      # Use canonical domain for checking instead of raw hostname
+      check_domain = @business.canonical_domain || @business.hostname
+      dns_checker = CnameDnsChecker.new(check_domain)
+      dual_verifier = DualDomainVerifier.new(@business.hostname) # Dual verifier needs raw hostname to check both apex/www
+      health_checker = DomainHealthChecker.new(check_domain)
+      render_service = RenderDomainService.new
+
+      # Perform all checks
+      dns_result = dns_checker.verify_cname
+      dual_result = dual_verifier.verify_both_domains
+      health_result = health_checker.check_health
+      
+      # Check render status
+      render_result = begin
+        domain = render_service.find_domain_by_name(check_domain)
+        if domain
+          verification = render_service.verify_domain(domain['id'])
+          { found: true, verified: verification['verified'] == true }
+        else
+          { found: false, verified: false }
+        end
+      rescue => e
+        { found: false, verified: false, error: e.message }
+      end
+
+      # Use verification strategy to determine status consistently
+      verification_strategy = DomainVerificationStrategy.new(@business)
+      verification_result = verification_strategy.determine_status(dns_result, render_result, health_result)
+      
+      overall_status = verification_result[:verified]
+      status_message = if overall_status
+        verification_result[:status_reason]
+      elsif @business.status == 'cname_active' && @business.domain_health_verified
+        'Domain is active and verified'
+      else
+        verification_result[:status_reason]
+      end
+
+      render json: {
+        overall_status: overall_status,
+        status_message: status_message,
+        dns_check: {
+          verified: dns_result[:verified],
+          target: dns_result[:target],
+          expected_target: dns_result[:expected_target],
+          error: dns_result[:error]
+        },
+        dual_verification: {
+          overall_verified: dual_result[:overall_verified],
+          apex_domain: dual_result[:apex_domain],
+          www_domain: dual_result[:www_domain]
+        },
+        render_check: {
+          verified: render_result[:verified],
+          found: render_result[:found],
+          error: render_result[:error]
+        },
+        health_check: {
+          healthy: health_result[:healthy],
+          status_code: health_result[:status_code],
+          response_time: health_result[:response_time],
+          error: health_result[:error]
+        },
+        business_status: {
+          status: @business.status,
+          domain_health_verified: @business.domain_health_verified,
+          render_domain_added: @business.render_domain_added,
+          custom_domain_allow: @business.custom_domain_allow?
+        }
+      }
+
+    rescue => e
+      Rails.logger.error "[DomainStatusCheck] Error checking domain #{@business.hostname}: #{e.message}"
+      error_response = { 
+        error: 'Unable to check domain status'
+      }
+      
+      # Only include error details in development/test environments
+      if Rails.env.development? || Rails.env.test?
+        error_response[:details] = e.message
+      end
+      
+      render json: error_response, status: :internal_server_error
+    end
+  end
+
+  # POST /manage/settings/business/finalize_domain_activation
+  # Idempotent endpoint to persist activation immediately once checks pass.
+  # Does not send emails and keeps GET semantics clean.
+  def finalize_domain_activation
+    unless @business.host_type_custom_domain? && @business.hostname.present?
+      return render json: { error: 'Activation only applies to custom domains' }, status: :unprocessable_entity
+    end
+
+    begin
+      check_domain = @business.canonical_domain || @business.hostname
+      dns_checker = CnameDnsChecker.new(check_domain)
+      dual_verifier = DualDomainVerifier.new(@business.hostname)
+      health_checker = DomainHealthChecker.new(check_domain)
+      render_service = RenderDomainService.new
+
+      dns_result = dns_checker.verify_cname
+      dual_result = dual_verifier.verify_both_domains
+      health_result = health_checker.check_health
+
+      render_result = begin
+        domain = render_service.find_domain_by_name(check_domain)
+        if domain
+          verification = render_service.verify_domain(domain['id'])
+          { found: true, verified: verification['verified'] == true }
+        else
+          { found: false, verified: false }
+        end
+      rescue => e
+        { found: false, verified: false, error: e.message }
+      end
+
+      verification_strategy = DomainVerificationStrategy.new(@business)
+      verification_result = verification_strategy.determine_status(dns_result, render_result, health_result)
+
+      unless verification_result[:verified]
+        return render json: {
+          activated: false,
+          status_message: verification_result[:status_reason]
+        }, status: :unprocessable_entity
+      end
+
+      # Persist activation idempotently (no emails here)
+      ActiveRecord::Base.transaction do
+        @business.mark_domain_health_status!(true)
+        @business.cname_success! unless @business.cname_active?
+      end
+
+      render json: {
+        activated: true,
+        business_status: {
+          status: @business.status,
+          domain_health_verified: @business.domain_health_verified,
+          render_domain_added: @business.render_domain_added,
+          custom_domain_allow: @business.custom_domain_allow?
+        }
+      }
+    rescue => e
+      Rails.logger.error "[DomainActivation] Failed to finalize activation for #{@business.hostname}: #{e.message}"
+      render json: { error: 'Unable to finalize activation' }, status: :internal_server_error
     end
   end
 
@@ -99,6 +279,7 @@ class BusinessManager::Settings::BusinessController < BusinessManager::BaseContr
     # in IntegrationsController to ensure proper verification through GoogleBusinessVerificationService
     permitted = params.require(:business).permit(
       :name, :industry, :phone, :email, :website, :address, :city, :state, :zip, :description, :time_zone, :logo, :stock_management_enabled,
+      :subdomain, :hostname, :host_type, :custom_domain_owned, :canonical_preference,
       # Permit individual hour fields, which will be processed into a JSON hash
       *days_of_week.flat_map { |day| ["hours_#{day}_open", "hours_#{day}_close"] }
     )
diff --git a/app/controllers/business_manager/settings/integrations_controller.rb b/app/controllers/business_manager/settings/integrations_controller.rb
index 4dd2c2c..b4509b9 100644
--- a/app/controllers/business_manager/settings/integrations_controller.rb
+++ b/app/controllers/business_manager/settings/integrations_controller.rb
@@ -128,7 +128,7 @@ module BusinessManager
           render json: { 
             error: 'Failed to save Google Business connection', 
             details: @business.errors.full_messages 
-          }, status: :unprocessable_entity
+          }, status: :unprocessable_content
         end
       rescue => e
         Rails.logger.error "[IntegrationsController] Google Business connect error: #{e.message}"
@@ -150,7 +150,7 @@ module BusinessManager
           render json: { 
             error: 'Failed to disconnect Google Business', 
             details: @business.errors.full_messages 
-          }, status: :unprocessable_entity
+          }, status: :unprocessable_content
         end
       rescue => e
         Rails.logger.error "[IntegrationsController] Google Business disconnect error: #{e.message}"
@@ -200,7 +200,7 @@ module BusinessManager
           render json: { 
             error: 'Failed to save Google Business information', 
             details: @business.errors.full_messages 
-          }, status: :unprocessable_entity
+          }, status: :unprocessable_content
         end
       rescue => e
         Rails.logger.error "[IntegrationsController] Manual Google Business connect error: #{e.message}"
diff --git a/app/controllers/business_manager/settings/locations_controller.rb b/app/controllers/business_manager/settings/locations_controller.rb
index 5c312ba..b8862af 100644
--- a/app/controllers/business_manager/settings/locations_controller.rb
+++ b/app/controllers/business_manager/settings/locations_controller.rb
@@ -24,7 +24,7 @@ module BusinessManager
         if @location.save
           redirect_to business_manager_settings_locations_path, notice: 'Location was successfully created.'
         else
-          render :new, status: :unprocessable_entity
+          render :new, status: :unprocessable_content
         end
       end
 
@@ -51,7 +51,7 @@ module BusinessManager
             redirect_to business_manager_settings_locations_path, notice: 'Location was successfully updated.'
           end
         else
-          render :edit, status: :unprocessable_entity
+          render :edit, status: :unprocessable_content
         end
       end
 
diff --git a/app/controllers/business_manager/settings/notifications_controller.rb b/app/controllers/business_manager/settings/notifications_controller.rb
index 52dc2bb..d58cb73 100644
--- a/app/controllers/business_manager/settings/notifications_controller.rb
+++ b/app/controllers/business_manager/settings/notifications_controller.rb
@@ -19,7 +19,7 @@ module BusinessManager
         if @notification_template.save
           redirect_to business_manager_settings_notifications_path, notice: 'Notification template created successfully.'
         else
-          render :new, status: :unprocessable_entity
+          render :new, status: :unprocessable_content
         end
       end
 
@@ -34,7 +34,7 @@ module BusinessManager
         if @notification_template.update(notification_template_params)
           redirect_to business_manager_settings_notifications_path, notice: 'Notification template updated successfully.'
         else
-          render :edit, status: :unprocessable_entity
+          render :edit, status: :unprocessable_content
         end
       end
 
diff --git a/app/controllers/business_manager/settings/profiles_controller.rb b/app/controllers/business_manager/settings/profiles_controller.rb
index 5f17147..170d5ec 100644
--- a/app/controllers/business_manager/settings/profiles_controller.rb
+++ b/app/controllers/business_manager/settings/profiles_controller.rb
@@ -73,7 +73,7 @@ class BusinessManager::Settings::ProfilesController < BusinessManager::BaseContr
     unless @user.valid_password?(deletion_params[:current_password])
       flash.now[:alert] = 'Current password is incorrect.'
       @account_deletion_info = @user.can_delete_account?
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
       return
     end
 
@@ -81,7 +81,7 @@ class BusinessManager::Settings::ProfilesController < BusinessManager::BaseContr
     unless deletion_params[:confirm_deletion] == 'DELETE'
       flash.now[:alert] = 'You must type DELETE to confirm account deletion.'
       @account_deletion_info = @user.can_delete_account?
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
       return
     end
 
@@ -111,14 +111,14 @@ class BusinessManager::Settings::ProfilesController < BusinessManager::BaseContr
       sign_in(@user)
       flash.now[:alert] = e.message
       @account_deletion_info = @user.can_delete_account?
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     rescue => e
       Rails.logger.error "Account deletion failed for user #{@user.id}: #{e.message}"
       # Re-sign in the user since we signed them out
       sign_in(@user)
       flash.now[:alert] = 'An error occurred while deleting your account. Please contact support.'
       @account_deletion_info = @user.can_delete_account?
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
 
@@ -153,7 +153,7 @@ class BusinessManager::Settings::ProfilesController < BusinessManager::BaseContr
       @account_deletion_info = @user.can_delete_account?
       @business_deletion_info = calculate_business_deletion_impact if @user.manager? && @account_deletion_info[:can_delete]
       flash.now[:alert] = 'Failed to update notification preferences.'
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
 
diff --git a/app/controllers/business_manager/settings/subscriptions_controller.rb b/app/controllers/business_manager/settings/subscriptions_controller.rb
index f650f6b..c1961f6 100644
--- a/app/controllers/business_manager/settings/subscriptions_controller.rb
+++ b/app/controllers/business_manager/settings/subscriptions_controller.rb
@@ -5,6 +5,7 @@ class BusinessManager::Settings::SubscriptionsController < BusinessManager::Base
   before_action :set_business, except: [:webhook]
   before_action :set_subscription, only: [:show]
   before_action :set_stripe_api_key, only: [:create_checkout_session, :customer_portal_session, :webhook]
+  before_action :validate_premium_upgrade_requirements, only: [:create_checkout_session]
 
   # Webhook specific skips - it authenticates via Stripe signature and operates outside user session context
   skip_before_action :verify_authenticity_token, only: [:webhook]
@@ -25,6 +26,16 @@ class BusinessManager::Settings::SubscriptionsController < BusinessManager::Base
     # For now, let's assume a placeholder price_id
     price_id = params[:price_id] || 'YOUR_STRIPE_PRICE_ID_HERE' # Replace with actual logic
 
+    # Prepare metadata for Premium upgrades with custom domain
+    metadata = { business_id: @business.id.to_s }
+    
+    # If this is a Premium upgrade and hostname is provided, store it in metadata
+    premium_price_id = ENV['STRIPE_PREMIUM_PRICE_ID']
+    if price_id == premium_price_id && params[:hostname].present?
+      metadata[:hostname] = params[:hostname].strip.downcase
+      metadata[:requires_custom_domain_setup] = 'true'
+    end
+
     begin
       session = Stripe::Checkout::Session.create({
         payment_method_types: ['card'],
@@ -36,7 +47,8 @@ class BusinessManager::Settings::SubscriptionsController < BusinessManager::Base
         success_url: business_manager_settings_subscription_url + '?session_id={CHECKOUT_SESSION_ID}',
         cancel_url: business_manager_settings_subscription_url,
         customer: @business.stripe_customer_id, # Assuming business model has stripe_customer_id
-        client_reference_id: @business.id # To identify the business in webhook
+        client_reference_id: @business.id, # To identify the business in webhook
+        metadata: metadata
       })
       redirect_to session.url, allow_other_host: true
     rescue Stripe::StripeError => e
@@ -114,6 +126,70 @@ class BusinessManager::Settings::SubscriptionsController < BusinessManager::Base
     render json: { message: :ok }, status: :ok
   end
 
+  def downgrade
+    authorize Subscription.new(business: @business), :update?, policy_class: Settings::SubscriptionPolicy
+
+    target_tier = params[:target_tier]
+    unless %w[free standard].include?(target_tier)
+      flash[:alert] = "Invalid downgrade target."
+      return redirect_to business_manager_settings_subscription_path
+    end
+
+    begin
+      subscription = @business.subscription
+
+      case target_tier
+      when 'free'
+        # Schedule cancellation at period end if we have an active Stripe subscription.
+        if subscription&.stripe_subscription_id.present?
+          Stripe::Subscription.update(
+            subscription.stripe_subscription_id,
+            { cancel_at_period_end: true }
+          )
+        end
+
+        # Immediately reflect tier change for feature gating, but leave subscription status untouched
+        # until Stripe webhook updates it. This avoids inconsistent states (local cancelled vs. Stripe active).
+        @business.update!(tier: 'free')
+        flash[:notice] = "Your subscription will be cancelled at the end of the current billing period. You'll move to the Free tier." unless flash[:notice]
+
+      when 'standard'
+        unless subscription&.stripe_subscription_id.present?
+          flash[:alert] = "No active subscription found to downgrade."
+          return redirect_to business_manager_settings_subscription_path
+        end
+
+        price_id = ENV['STRIPE_STANDARD_PRICE_ID']
+        raise "Standard price ID not configured" if price_id.blank?
+
+        stripe_sub = Stripe::Subscription.retrieve(subscription.stripe_subscription_id)
+        first_item_id = stripe_sub.items&.data&.first&.id
+        unless first_item_id
+          raise "Unable to determine Stripe subscription item to update"
+        end
+
+        Stripe::Subscription.update(
+          subscription.stripe_subscription_id,
+          {
+            items: [{ id: first_item_id, price: price_id }],
+            proration_behavior: 'create_prorations'
+          }
+        )
+
+        @business.update!(tier: 'standard')
+        flash[:notice] = "Your subscription has been downgraded to the Standard tier." unless flash[:notice]
+      end
+
+    rescue Stripe::StripeError => e
+      flash[:alert] = "Stripe error: #{e.message}"
+    rescue => e
+      Rails.logger.error("Downgrade error: #{e.message}")
+      flash[:alert] = "Unable to process downgrade. Please try again or contact support."
+    end
+
+    redirect_to business_manager_settings_subscription_path
+  end
+
   private
 
   def set_business
@@ -164,9 +240,21 @@ class BusinessManager::Settings::SubscriptionsController < BusinessManager::Base
       Rails.logger.error("Failed to save subscription: #{subscription_record.errors.full_messages.join(', ')}")
     end
 
-    # Update business tier if necessary
-    # new_tier = map_stripe_plan_to_tier(stripe_sub.items.data.first&.price&.id)
-    # business.update(tier: new_tier) if new_tier
+    # Handle tier update based on subscription - ALWAYS update tier after successful payment
+    premium_price_id = ENV['STRIPE_PREMIUM_PRICE_ID']
+    current_price_id = stripe_sub.items.data.first&.price&.id
+    new_tier = map_stripe_plan_to_tier(current_price_id)
+    
+    # Update business tier regardless of domain setup - customer paid for the tier
+    if new_tier && business.tier != new_tier
+      business.update!(tier: new_tier)
+      Rails.logger.info("Updated business tier to #{new_tier} for business_id=#{business.id}")
+    end
+
+    # For Premium upgrades, attempt custom domain setup as an optional feature
+    if current_price_id == premium_price_id
+      attempt_custom_domain_setup(business, session)
+    end
   end
 
   def handle_invoice_paid(invoice)
@@ -222,4 +310,75 @@ class BusinessManager::Settings::SubscriptionsController < BusinessManager::Base
     # current_tier = map_stripe_plan_to_tier(stripe_sub.items.data.first&.price&.id)
     # business.update(tier: current_tier) if current_tier && business.tier != current_tier
   end
+
+  def validate_premium_upgrade_requirements
+    premium_price_id = ENV['STRIPE_PREMIUM_PRICE_ID']
+    return unless params[:price_id] == premium_price_id
+
+    # Hostname is now optional for Premium upgrades - only validate if provided
+    return if params[:hostname].blank?
+
+    # Basic hostname validation when provided
+    hostname = params[:hostname].strip.downcase
+    unless hostname.match?(/\A[a-z0-9]([a-z0-9\-]{0,61}[a-z0-9])?(\.[a-z0-9]([a-z0-9\-]{0,61}[a-z0-9])?)*\z/)
+      flash[:alert] = "Invalid hostname format. Please enter a valid domain name."
+      redirect_to business_manager_settings_subscription_path
+      return
+    end
+
+    # Check if hostname is already taken by another business
+    if Business.where.not(id: @business.id).exists?(hostname: hostname)
+      flash[:alert] = "This hostname is already taken. Please choose a different domain."
+      redirect_to business_manager_settings_subscription_path
+      return
+    end
+  end
+
+  def attempt_custom_domain_setup(business, session)
+    # Check if this Premium upgrade includes custom domain setup
+    unless session.metadata&.dig('requires_custom_domain_setup') == 'true'
+      Rails.logger.info("Premium upgrade for business_id=#{business.id} does not include custom domain setup")
+      return
+    end
+    
+    hostname = session.metadata&.dig('hostname')
+    unless hostname.present?
+      Rails.logger.warn("Premium upgrade requested custom domain setup but no hostname provided for business_id=#{business.id}")
+      return
+    end
+
+    Rails.logger.info("Attempting custom domain setup for business_id=#{business.id}, hostname=#{hostname}")
+
+    begin
+      # Update business with custom domain configuration
+      business.update!(
+        hostname: hostname,
+        host_type: 'custom_domain'
+      )
+      
+      Rails.logger.info("Successfully configured custom domain #{hostname} for business_id=#{business.id}")
+      
+      # The business model callbacks will automatically trigger custom domain setup
+      # via trigger_custom_domain_setup_after_premium_upgrade
+      
+    rescue ActiveRecord::RecordInvalid => e
+      Rails.logger.error("Failed to configure custom domain for business_id=#{business.id}: #{e.message}")
+      Rails.logger.info("Business_id=#{business.id} will still have Premium tier benefits without custom domain")
+      
+      # Consider sending notification to business owner about domain setup failure
+      # while confirming their Premium benefits are still active
+      # TODO: Send email notification about domain setup failure
+    end
+  end
+
+  def map_stripe_plan_to_tier(price_id)
+    case price_id
+    when ENV['STRIPE_STANDARD_PRICE_ID']
+      'standard'
+    when ENV['STRIPE_PREMIUM_PRICE_ID']
+      'premium'
+    else
+      nil # Could be free tier or unknown plan
+    end
+  end
 end 
\ No newline at end of file
diff --git a/app/controllers/business_manager/settings/teams_controller.rb b/app/controllers/business_manager/settings/teams_controller.rb
index b158c77..d2c68b9 100644
--- a/app/controllers/business_manager/settings/teams_controller.rb
+++ b/app/controllers/business_manager/settings/teams_controller.rb
@@ -32,14 +32,14 @@ module BusinessManager
           else
             @staff_member.build_user(user_attrs)
             flash.now[:alert] = @staff_member.errors.full_messages.to_sentence
-            render :new, status: :unprocessable_entity
+            render :new, status: :unprocessable_content
           end
         else
           @staff_member = current_business.staff_members.new(team_member_params.except(:user_attributes))
           @staff_member.build_user(user_attrs)
           @staff_member.errors.add(:user, @user.errors.full_messages.to_sentence)
           flash.now[:alert] = @staff_member.errors.full_messages.to_sentence
-          render :new, status: :unprocessable_entity
+          render :new, status: :unprocessable_content
         end
       end
 
diff --git a/app/controllers/business_manager/settings/website_pages_controller.rb b/app/controllers/business_manager/settings/website_pages_controller.rb
index b83d925..f4350ef 100644
--- a/app/controllers/business_manager/settings/website_pages_controller.rb
+++ b/app/controllers/business_manager/settings/website_pages_controller.rb
@@ -14,7 +14,7 @@ module BusinessManager
         if @business.update(website_pages_params)
           redirect_to edit_business_manager_settings_website_pages_path, notice: 'Website pages settings updated.'
         else
-          render :edit, status: :unprocessable_entity
+          render :edit, status: :unprocessable_content
         end
       end
 
diff --git a/app/controllers/business_manager/staff_members_controller.rb b/app/controllers/business_manager/staff_members_controller.rb
index 9dd925c..3ccc250 100644
--- a/app/controllers/business_manager/staff_members_controller.rb
+++ b/app/controllers/business_manager/staff_members_controller.rb
@@ -47,7 +47,7 @@ class BusinessManager::StaffMembersController < BusinessManager::BaseController
       @staff_member = @current_business.staff_members.new(staff_member_params.except(:user_attributes))
       @staff_member.build_user(user_attrs)
       @staff_member.errors.add(:user, @user.errors.full_messages.to_sentence)
-      render :new, status: :unprocessable_entity and return
+      render :new, status: :unprocessable_content and return
     end
 
     # Now build the StaffMember record linking the new user
@@ -59,7 +59,7 @@ class BusinessManager::StaffMembersController < BusinessManager::BaseController
     else
       # Preserve nested user data on failure so form can re-render the new-user fields
       @staff_member.build_user(user_attrs)
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
     end
   end
 
@@ -82,7 +82,7 @@ class BusinessManager::StaffMembersController < BusinessManager::BaseController
     if @staff_member.update(update_params)
       redirect_to business_manager_staff_member_path(@staff_member), notice: 'Staff member was successfully updated.'
     else
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
 
@@ -219,7 +219,7 @@ class BusinessManager::StaffMembersController < BusinessManager::BaseController
         )
         
         @services = @staff_member.services.active
-        render 'business_manager/staff_members/availability', status: :unprocessable_entity
+        render 'business_manager/staff_members/availability', status: :unprocessable_content
       end
     else
       # GET request
diff --git a/app/controllers/business_manager/website/pages_controller.rb b/app/controllers/business_manager/website/pages_controller.rb
index effe277..6666d25 100644
--- a/app/controllers/business_manager/website/pages_controller.rb
+++ b/app/controllers/business_manager/website/pages_controller.rb
@@ -49,7 +49,7 @@ class BusinessManager::Website::PagesController < BusinessManager::Website::Base
     else
       @available_page_types = Page.page_types.keys
       flash.now[:alert] = 'Please fix the errors below to create the page.'
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
     end
   end
   
diff --git a/app/controllers/client/settings_controller.rb b/app/controllers/client/settings_controller.rb
index 3802a3f..e31affb 100644
--- a/app/controllers/client/settings_controller.rb
+++ b/app/controllers/client/settings_controller.rb
@@ -27,7 +27,7 @@ class Client::SettingsController < ApplicationController # Changed from Client::
       else
         @account_deletion_info = @user.can_delete_account?
         flash.now[:alert] = 'Failed to update password. Please check your current password and ensure new passwords match.'
-        render :edit, status: :unprocessable_entity
+        render :edit, status: :unprocessable_content
       end
     else
       # Profile update only (no password change)
@@ -37,7 +37,7 @@ class Client::SettingsController < ApplicationController # Changed from Client::
       else
         @account_deletion_info = @user.can_delete_account?
         flash.now[:alert] = 'Failed to update profile settings.'
-        render :edit, status: :unprocessable_entity
+        render :edit, status: :unprocessable_content
       end
     end
   end
@@ -47,7 +47,7 @@ class Client::SettingsController < ApplicationController # Changed from Client::
     unless @user.valid_password?(deletion_params[:current_password])
       flash.now[:alert] = 'Current password is incorrect.'
       @account_deletion_info = @user.can_delete_account?
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
       return
     end
 
@@ -55,7 +55,7 @@ class Client::SettingsController < ApplicationController # Changed from Client::
     unless deletion_params[:confirm_deletion] == 'DELETE'
       flash.now[:alert] = 'You must type DELETE to confirm account deletion.'
       @account_deletion_info = @user.can_delete_account?
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
       return
     end
 
@@ -78,14 +78,14 @@ class Client::SettingsController < ApplicationController # Changed from Client::
       sign_in(@user)
       flash.now[:alert] = e.message
       @account_deletion_info = @user.can_delete_account?
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     rescue => e
       Rails.logger.error "Account deletion failed for user #{@user.id}: #{e.message}"
       # Re-sign in the user since we signed them out
       sign_in(@user)
       flash.now[:alert] = 'An error occurred while deleting your account. Please contact support.'
       @account_deletion_info = @user.can_delete_account?
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
 
@@ -102,7 +102,7 @@ class Client::SettingsController < ApplicationController # Changed from Client::
       # This case should be rare unless there's a validation on the notification_preferences hash itself
       flash.now[:alert] = 'Failed to update notification preferences.'
       @account_deletion_info = @user.can_delete_account?
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
 
diff --git a/app/controllers/client/subscriptions_controller.rb b/app/controllers/client/subscriptions_controller.rb
index acbfe97..986aba1 100644
--- a/app/controllers/client/subscriptions_controller.rb
+++ b/app/controllers/client/subscriptions_controller.rb
@@ -49,7 +49,7 @@ class Client::SubscriptionsController < ApplicationController
     if @customer_subscription.update(client_subscription_params)
       redirect_to client_subscription_path(@customer_subscription), notice: 'Subscription updated successfully'
     else
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
 
@@ -63,7 +63,7 @@ class Client::SubscriptionsController < ApplicationController
     if @customer_subscription.update(client_subscription_params)
       redirect_to client_subscription_path(@customer_subscription), notice: 'Preferences updated successfully'
     else
-      render :preferences, status: :unprocessable_entity
+      render :preferences, status: :unprocessable_content
     end
   end
 
diff --git a/app/controllers/client_bookings_controller.rb b/app/controllers/client_bookings_controller.rb
index 6bbd53f..fd13a7b 100644
--- a/app/controllers/client_bookings_controller.rb
+++ b/app/controllers/client_bookings_controller.rb
@@ -55,7 +55,7 @@ class ClientBookingsController < ApplicationController
       rescue ArgumentError => e
         Rails.logger.warn "[CLIENT BOOKING] Invalid start_time provided: #{params[:booking][:start_time]} — #{e.message}"
         flash.now[:alert] = "Invalid start time format. Please choose a valid time."
-        render :edit, status: :unprocessable_entity and return
+        render :edit, status: :unprocessable_content and return
       end
 
       if new_start_time && @booking.service&.duration.present?
@@ -83,7 +83,7 @@ class ClientBookingsController < ApplicationController
                                         .select(&:visible_to_customers?) # Filter out hidden products
                                         .sort_by(&:name)
       flash.now[:alert] = @booking.errors.full_messages.to_sentence
-      render :edit, status: :unprocessable_entity
+      render :edit, status: :unprocessable_content
     end
   end
   
diff --git a/app/controllers/docs_controller.rb b/app/controllers/docs_controller.rb
index 84d598b..bc06f2b 100644
--- a/app/controllers/docs_controller.rb
+++ b/app/controllers/docs_controller.rb
@@ -26,6 +26,12 @@ class DocsController < ApplicationController
       description: 'Proven tactics for marketing, customer retention, and scaling your very first business',
       category: 'Business Growth',
       estimated_read_time: '10 min read'
+    },
+    'custom-domain-faq' => {
+      title: 'Custom Domain Setup FAQ',
+      description: 'Step-by-step instructions for setting up CNAME records with popular domain registrars',
+      category: 'Technical Setup',
+      estimated_read_time: '15 min read'
     }
   }.freeze
 
@@ -62,6 +68,8 @@ class DocsController < ApplicationController
       'legal-setup-arizona'
     when 'business-growth-strategies'
       'business-growth-strategies'
+    when 'custom-domain-faq'
+      'custom-domain-faq'
     else
       nil
     end
diff --git a/app/controllers/orders_controller.rb b/app/controllers/orders_controller.rb
index 797cbc4..d56cdc3 100644
--- a/app/controllers/orders_controller.rb
+++ b/app/controllers/orders_controller.rb
@@ -107,7 +107,7 @@ class OrdersController < ApplicationController
       session[:cart] = {}
       redirect_to order_path(@order), notice: 'Order was successfully created.'
     else
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
     end
   end
 
diff --git a/app/controllers/products_controller.rb b/app/controllers/products_controller.rb
index 94492dd..ff7b578 100644
--- a/app/controllers/products_controller.rb
+++ b/app/controllers/products_controller.rb
@@ -1,5 +1,6 @@
 class ProductsController < ApplicationController
-  before_action :set_tenant, if: -> { request.subdomain.present? && request.subdomain != 'www' }
+  # Use ApplicationController's tenant setup for all host types (subdomain, custom domain, main domain)
+  # before_action :set_tenant is already defined globally, so no need to redefine it here.
   include BusinessAccessProtection
   skip_before_action :authenticate_user!
 
diff --git a/app/controllers/public/booking_controller.rb b/app/controllers/public/booking_controller.rb
index a25c5c3..310d04e 100644
--- a/app/controllers/public/booking_controller.rb
+++ b/app/controllers/public/booking_controller.rb
@@ -60,7 +60,7 @@ module Public
       # Validate service presence
       unless @service
         flash[:alert] = "Invalid service selected."
-        redirect_to new_tenant_booking_path(service_id: booking_params[:service_id]), status: :unprocessable_entity and return
+        redirect_to new_tenant_booking_path(service_id: booking_params[:service_id]), status: :unprocessable_content and return
       end
 
       # Determine customer based on user state
@@ -194,7 +194,7 @@ module Public
       # Early validation for account creation errors
       if @booking.errors.any?
         flash.now[:alert] = @booking.errors.full_messages.to_sentence
-        render :new, status: :unprocessable_entity and return
+        render :new, status: :unprocessable_content and return
       end
 
       # Check if current user is business staff/manager making booking for client
@@ -230,7 +230,7 @@ module Public
           redirect_to tenant_booking_confirmation_path(@booking)
         else
           flash.now[:alert] = @booking.errors.full_messages.to_sentence
-          render :new, status: :unprocessable_entity
+          render :new, status: :unprocessable_content
         end
       else
         # Client and guest users - validate booking but don't save yet for experience services
@@ -342,7 +342,7 @@ module Public
             redirect_to tenant_booking_confirmation_path(@booking)
           else
             flash.now[:alert] = @booking.errors.full_messages.to_sentence
-            render :new, status: :unprocessable_entity
+            render :new, status: :unprocessable_content
           end
         end
       end
diff --git a/app/controllers/public/orders_controller.rb b/app/controllers/public/orders_controller.rb
index 2317d15..e4a29b5 100644
--- a/app/controllers/public/orders_controller.rb
+++ b/app/controllers/public/orders_controller.rb
@@ -170,7 +170,7 @@ module Public
         @order ||= OrderCreator.build_from_cart(@cart) # Build order for re-render if not already done
         @order.tenant_customer = customer # Assign the invalid customer to the order for form population
         flash.now[:alert] = @order.errors.full_messages.to_sentence
-        render :new, status: :unprocessable_entity and return
+        render :new, status: :unprocessable_content and return
       end # End of customer.save if/else
 
     end # End of guest user else block
@@ -208,7 +208,7 @@ module Public
         else
           @order.errors.add(:promo_code, promo_result[:error])
           flash.now[:alert] = @order.errors.full_messages.to_sentence
-          render :new, status: :unprocessable_entity and return
+          render :new, status: :unprocessable_content and return
         end
       end
       
@@ -274,7 +274,7 @@ module Public
       @order.build_tenant_customer unless @order.tenant_customer.present?
       @order.tenant_customer ||= customer if customer.present? # Ensure customer is assigned back to the order for re-render
 
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
     end
   end
 
diff --git a/app/controllers/public/pages_controller.rb b/app/controllers/public/pages_controller.rb
index cdb9741..ab7335f 100644
--- a/app/controllers/public/pages_controller.rb
+++ b/app/controllers/public/pages_controller.rb
@@ -10,6 +10,7 @@ module Public
     # or move the tenant setting logic here.
     before_action :set_tenant 
     before_action :ensure_html_format, only: [:show]
+    after_action :no_store_cache_headers, only: [:show]
 
     # Skip user authentication for public pages
     skip_before_action :authenticate_user!
@@ -124,6 +125,12 @@ module Public
       render file: Rails.root.join('public/404.html'), layout: false, status: :not_found
     end
     
+    def no_store_cache_headers
+      response.headers["Cache-Control"] = "no-store, no-cache, must-revalidate, max-age=0"
+      response.headers["Pragma"]        = "no-cache"
+      response.headers["Expires"]       = "0"
+    end
+    
     # Re-define set_tenant here IF it's private in ApplicationController
     # def set_tenant
     #   # Copy logic from ApplicationController#set_tenant
diff --git a/app/controllers/public/payments_controller.rb b/app/controllers/public/payments_controller.rb
index 8873cd8..cea497d 100644
--- a/app/controllers/public/payments_controller.rb
+++ b/app/controllers/public/payments_controller.rb
@@ -32,8 +32,8 @@ module Public
           cancel_url = tenant_invoice_url(@invoice, cancel_params)
         else
           # For authenticated users, redirect to transactions view
-          success_url = tenant_transaction_url(@invoice, url_params)
-          cancel_url = tenant_transaction_url(@invoice, cancel_params)
+          success_url = transaction_url(@invoice, url_params)
+          cancel_url = transaction_url(@invoice, cancel_params)
         end
         
         result = StripeService.create_payment_checkout_session(
@@ -105,7 +105,7 @@ module Public
 
     def redirect_to_invoice_with_token(flash_options = {})
       if current_user
-        redirect_to tenant_transaction_path(@invoice, type: 'invoice'), flash_options
+        redirect_to transaction_path(@invoice, type: 'invoice'), flash_options
       else
         redirect_to tenant_invoice_path(@invoice, token: @invoice.guest_access_token), flash_options
       end
diff --git a/app/controllers/public/policy_acceptances_controller.rb b/app/controllers/public/policy_acceptances_controller.rb
new file mode 100644
index 0000000..2d27997
--- /dev/null
+++ b/app/controllers/public/policy_acceptances_controller.rb
@@ -0,0 +1,4 @@
+module Public
+  class PolicyAcceptancesController < ::PolicyAcceptancesController
+  end
+end
diff --git a/app/controllers/public/subdomains_controller.rb b/app/controllers/public/subdomains_controller.rb
new file mode 100644
index 0000000..762292d
--- /dev/null
+++ b/app/controllers/public/subdomains_controller.rb
@@ -0,0 +1,26 @@
+# frozen_string_literal: true
+
+module Public
+  class SubdomainsController < BaseController
+    protect_from_forgery with: :null_session
+    skip_before_action :authenticate_user!, only: :check
+    before_action :ensure_json_request
+
+    # POST /subdomains/check
+    def check
+      result = SubdomainAvailabilityService.call(params[:subdomain])
+      render json: result.to_h
+    rescue StandardError => e
+      Rails.logger.error "[PUBLIC_SUBDOMAIN_CHECK] #{e.class}: #{e.message}"
+      render json: { available: false, message: 'Unable to check availability. Please try again.' }
+    end
+
+    private
+
+    def ensure_json_request
+      return if request.format.json?
+
+      head :unsupported_media_type
+    end
+  end
+end
diff --git a/app/controllers/public/subscriptions_controller.rb b/app/controllers/public/subscriptions_controller.rb
index 62cd8f3..97ad159 100644
--- a/app/controllers/public/subscriptions_controller.rb
+++ b/app/controllers/public/subscriptions_controller.rb
@@ -49,7 +49,7 @@ class Public::SubscriptionsController < Public::BaseController
       @customer_subscription = current_business.customer_subscriptions.build
       initialize_pricing_variables
       populate_form_data
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
       return
     end
     
@@ -86,7 +86,7 @@ class Public::SubscriptionsController < Public::BaseController
         initialize_pricing_variables
         
         populate_form_data
-        render :new, status: :unprocessable_entity
+        render :new, status: :unprocessable_content
       end
       
     rescue => e
@@ -99,7 +99,7 @@ class Public::SubscriptionsController < Public::BaseController
       initialize_pricing_variables
       
       populate_form_data
-      render :new, status: :unprocessable_entity
+      render :new, status: :unprocessable_content
     end
   end
 
diff --git a/app/controllers/qr_payments_controller.rb b/app/controllers/qr_payments_controller.rb
index cab3386..c04aa04 100644
--- a/app/controllers/qr_payments_controller.rb
+++ b/app/controllers/qr_payments_controller.rb
@@ -20,8 +20,8 @@ class QrPaymentsController < ApplicationController
       Rails.logger.error "[QR_PAYMENT] Error generating QR code: #{e.message}"
       
       respond_to do |format|
-        format.json { render json: { error: "Failed to generate QR code" }, status: :unprocessable_entity }
-        format.html { render plain: "Error: Failed to generate QR code", status: :unprocessable_entity }
+        format.json { render json: { error: "Failed to generate QR code" }, status: :unprocessable_content }
+        format.html { render plain: "Error: Failed to generate QR code", status: :unprocessable_content }
       end
     end
   end
diff --git a/app/controllers/staff_controller.rb b/app/controllers/staff_controller.rb
index 90cd91e..974fc44 100644
--- a/app/controllers/staff_controller.rb
+++ b/app/controllers/staff_controller.rb
@@ -153,7 +153,7 @@ class StaffController < ApplicationController
       
       respond_to do |format|
         format.html { render :availability }
-        format.json { render json: { success: false, errors: @staff_member.errors.full_messages }, status: :unprocessable_entity }
+        format.json { render json: { success: false, errors: @staff_member.errors.full_messages }, status: :unprocessable_content }
       end
     end
   end
diff --git a/app/controllers/staff_members_controller.rb b/app/controllers/staff_members_controller.rb
index 440c7e8..d42405d 100644
--- a/app/controllers/staff_members_controller.rb
+++ b/app/controllers/staff_members_controller.rb
@@ -62,7 +62,7 @@ class StaffMembersController < ApplicationController
     else
       respond_to do |format|
         format.html { render :manage_availability }
-        format.json { render json: { success: false, errors: @staff_member.errors.full_messages }, status: :unprocessable_entity }
+        format.json { render json: { success: false, errors: @staff_member.errors.full_messages }, status: :unprocessable_content }
       end
     end
   end
diff --git a/app/controllers/tenant_redirect_controller.rb b/app/controllers/tenant_redirect_controller.rb
new file mode 100644
index 0000000..e733a57
--- /dev/null
+++ b/app/controllers/tenant_redirect_controller.rb
@@ -0,0 +1,26 @@
+class TenantRedirectController < ApplicationController
+  skip_before_action :authenticate_user!
+  skip_before_action :redirect_custom_domain_management_paths, raise: false
+  skip_before_action :verify_authenticity_token, raise: false
+
+  # Redirect /manage or /admin requests that arrive on a custom domain back to the canonical sub-domain.
+  # Example:
+  #   https://www.custom.com/manage/dashboard → https://biztest.bizblasts.com/manage/dashboard
+  def manage
+    business = ActsAsTenant.current_tenant
+
+    # Only custom-domain tenants need redirect.
+    if business&.host_type_custom_domain? && business.subdomain.present?
+      subdomain_stub = business.dup
+      subdomain_stub.host_type = 'subdomain'
+
+      # Use the original fullpath (includes leading /manage and query string) to avoid losing params
+      target_url = TenantHost.url_for(subdomain_stub, request, request.fullpath)
+      Rails.logger.info "[TenantRedirectController] Redirecting management path #{request.fullpath} from #{request.host} to #{target_url}"
+      return redirect_to target_url, status: :moved_permanently, allow_other_host: true
+    end
+
+    # Fallback – show 404 so bots don’t index wrong host.
+    render plain: 'Not Found', status: :not_found
+  end
+end
diff --git a/app/controllers/users/registrations_controller.rb b/app/controllers/users/registrations_controller.rb
index 3091108..98b0acc 100644
--- a/app/controllers/users/registrations_controller.rb
+++ b/app/controllers/users/registrations_controller.rb
@@ -2,6 +2,9 @@
 
 # Base controller for user registrations (both client and business owners)
 class Users::RegistrationsController < Devise::RegistrationsController
+  # Ensure that all sign-up pages are served from the platform’s base domain
+  # to avoid cross-domain authentication issues.
+  before_action :redirect_registration_from_subdomain, only: [:new, :create]
   # before_action :configure_sign_up_params, only: [:create]
   # before_action :configure_account_update_params, only: [:update]
 
@@ -39,4 +42,16 @@ class Users::RegistrationsController < Devise::RegistrationsController
 
     root_path
   end
+
+  private
+
+  # Redirect registration attempts made on a tenant (subdomain/custom) host back
+  # to the main application domain, preserving the requested path.
+  def redirect_registration_from_subdomain
+    return if TenantHost.main_domain?(request.host)
+
+    target_url = TenantHost.main_domain_url_for(request, request.fullpath)
+    Rails.logger.info "[Redirect Registration] Sign-up attempted from tenant host; redirecting to #{target_url}"
+    redirect_to target_url, status: :moved_permanently, allow_other_host: true and return
+  end
 end 
\ No newline at end of file
diff --git a/app/controllers/users/sessions_controller.rb b/app/controllers/users/sessions_controller.rb
index c986757..9eeac0f 100644
--- a/app/controllers/users/sessions_controller.rb
+++ b/app/controllers/users/sessions_controller.rb
@@ -8,6 +8,12 @@ module Users
   # 3. Dynamic domain support (subdomains and custom domains)
   # 4. Environment-aware URL generation (development vs production)
   class SessionsController < Devise::SessionsController
+    # Redirect any new or create (sign-in) request that occurs on a tenant
+    # subdomain or custom domain back to the platform’s main domain. All
+    # authentication should be performed on the base domain to avoid cross-
+    # domain cookie issues and for a consistent user experience.
+    before_action :redirect_auth_from_subdomain, only: [:new, :create]
+    
     # Skip tenant verification for sign out to allow proper cleanup
     # skip_before_action :set_tenant, only: :destroy # REMOVED: Global filter was removed
     
@@ -133,6 +139,17 @@ module Users
 
     private
 
+    # Redirect sign-in requests that occur on a tenant host (subdomain or custom
+    # domain) back to the platform’s base domain. This avoids cross-domain
+    # cookie issues and keeps authentication UX consistent.
+    def redirect_auth_from_subdomain
+      return if TenantHost.main_domain?(request.host)
+
+      target_url = TenantHost.main_domain_url_for(request, request.fullpath)
+      Rails.logger.info "[Redirect Auth] Sign-in requested from tenant host; redirecting to #{target_url}"
+      redirect_to target_url, status: :moved_permanently, allow_other_host: true and return
+    end
+
     # Find the current business based on the request's hostname
     # This method handles both subdomain and custom domain scenarios
     # @return [Business, nil] The business associated with the current request
diff --git a/app/helpers/application_helper.rb b/app/helpers/application_helper.rb
index e30bdff..5f7c599 100644
--- a/app/helpers/application_helper.rb
+++ b/app/helpers/application_helper.rb
@@ -118,6 +118,8 @@ module ApplicationHelper
       render partial: 'docs/content/legal-setup-arizona'
     when 'business-growth-strategies'
       render partial: 'docs/content/business-growth-strategies'
+    when 'custom-domain-faq'
+      render partial: 'docs/content/custom-domain-faq'
     else
       content_tag :div, class: 'text-center py-12' do
         content_tag :p, 'Documentation not available.', class: 'text-gray-500'
diff --git a/app/helpers/sidebar_items.rb b/app/helpers/sidebar_items.rb
index c22901d..9f07f48 100644
--- a/app/helpers/sidebar_items.rb
+++ b/app/helpers/sidebar_items.rb
@@ -12,7 +12,7 @@ module SidebarItems
     dashboard:              { path: -> { business_manager_dashboard_path }, icon: '<svg class="w-5 h-5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"/></svg>' },
     bookings:               { path: -> { business_manager_bookings_path }, icon: '<svg class="w-5 h-5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/></svg>' },
 
-    website:                { path: -> { current_business&.full_url || '#' }, icon: '<svg class="w-5 h-5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9" /></svg>', label: 'Website', extra_svg: '<svg class="w-4 h-4 ml-auto flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" /></svg>', new_tab: true },
+    website:                { path: -> { TenantHost.url_for(current_business, request) rescue '#' }, icon: '<svg class="w-5 h-5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9" /></svg>', label: 'Website', extra_svg: '<svg class="w-4 h-4 ml-auto flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" /></svg>', new_tab: true },
 
     website_builder:        { path: -> { business_manager_website_pages_path }, icon: '<svg class="w-5 h-5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" /></svg>', condition: -> { current_business&.standard_tier? || current_business&.premium_tier? } },
 
diff --git a/app/helpers/tenant_host.rb b/app/helpers/tenant_host.rb
index 77dfe56..6e261f9 100644
--- a/app/helpers/tenant_host.rb
+++ b/app/helpers/tenant_host.rb
@@ -37,10 +37,25 @@ module TenantHost
       
       "#{subdomain_part}.#{main_domain}"
     else
-      # For custom-domain tenants, the hostname column already contains the full
-      # domain (e.g. "customdomain.com") so we can return it verbatim.
-      # Return nil if hostname is blank to prevent invalid URLs
-      business.hostname.presence
+      # For custom-domain tenants, only use the custom domain if it's fully working
+      # Otherwise fall back to subdomain to prevent broken redirects
+      if business.custom_domain_allow?
+        # Custom domain is working (DNS + SSL + health verified)
+        business.hostname.presence
+      else
+        # Custom domain not ready, fall back to subdomain
+        Rails.logger.info "[TenantHost] Custom domain #{business.hostname} not ready, using subdomain fallback"
+        main_domain = if Rails.env.production?
+                       'bizblasts.com'
+                     else
+                       Rails.application.config.main_domain.split(':').first
+                     end
+        
+        subdomain_part = business.subdomain.presence || business.hostname.presence
+        return unless subdomain_part
+        
+        "#{subdomain_part}.#{main_domain}"
+      end
     end
   end
 
@@ -97,6 +112,25 @@ module TenantHost
   # @see #url_for
   alias_method :full_url, :url_for
 
+  # Returns true if the given host corresponds to the platform’s main domain in
+  # the current environment. This helps controllers avoid duplicating the
+  # environment-specific host lists.
+  #
+  # @param host [String] The hostname to evaluate (e.g. "biztest.bizblasts.com")
+  # @return [Boolean] Whether the host is considered the main application
+  #   domain (no tenant context)
+  def main_domain?(host)
+    host = host.to_s.downcase
+
+    if Rails.env.development? || Rails.env.test?
+      %w[lvh.me www.lvh.me example.com www.example.com test.host].include?(host)
+    else
+      %w[bizblasts.com www.bizblasts.com bizblasts.onrender.com].include?(host)
+    end
+  end
+
+  module_function :main_domain?
+
   # Generates a URL for the main application domain (no subdomain/tenant).
   #
   # @param request [ActionDispatch::Request] The current request object
diff --git a/app/javascript/application.js b/app/javascript/application.js
index 8cf2f27..b92b923 100644
--- a/app/javascript/application.js
+++ b/app/javascript/application.js
@@ -208,6 +208,7 @@ import "./modules/category_showcase";
 import "./modules/copy_link";
 import "./modules/website_hover";
 import "./modules/promo_code_handler";
+import "./domain_status_checker";
 import "./cart";
 import "trix"
 import "@rails/actiontext"
diff --git a/app/javascript/domain_status_checker.js b/app/javascript/domain_status_checker.js
new file mode 100644
index 0000000..f53e033
--- /dev/null
+++ b/app/javascript/domain_status_checker.js
@@ -0,0 +1,302 @@
+// Domain Status Checker for Business Settings
+// Provides real-time domain configuration status checking with throttling
+
+class DomainStatusChecker {
+  constructor() {
+    this.lastCheckTime = 0;
+    this.minCheckInterval = 10000; // 10 seconds minimum between checks
+    this.checkInProgress = false;
+    this.autoInitDone = false;
+    
+    this.initializeElements();
+    this.bindEvents();
+  }
+
+  initializeElements() {
+    this.button = document.getElementById('check-domain-btn');
+    this.statusText = document.getElementById('domain-status-text');
+    this.statusDetails = document.getElementById('domain-status-details');
+    this.statusIndicator = document.getElementById('domain-status-indicator')?.querySelector('div');
+    this.detailsExpanded = document.getElementById('domain-status-details-expanded');
+    this.domainStatusContainer = document.getElementById('domain-status-container');
+  }
+
+  bindEvents() {
+    if (this.button) {
+      this.button.addEventListener('click', (e) => {
+        e.preventDefault();
+        this.checkDomainStatus();
+      });
+    }
+  }
+
+  async checkDomainStatus() {
+    // Throttling: prevent rapid-fire clicks
+    const now = Date.now();
+    if (now - this.lastCheckTime < this.minCheckInterval) {
+      const remainingTime = Math.ceil((this.minCheckInterval - (now - this.lastCheckTime)) / 1000);
+      this.showThrottleMessage(remainingTime);
+      return;
+    }
+
+    // Prevent multiple simultaneous checks
+    if (this.checkInProgress) {
+      return;
+    }
+
+    this.checkInProgress = true;
+    this.lastCheckTime = now;
+    
+    try {
+      this.updateUIToCheckingState();
+      
+      const response = await fetch(this.getCheckDomainStatusUrl(), {
+        method: 'GET',
+        headers: {
+          'Accept': 'application/json',
+          'X-Requested-With': 'XMLHttpRequest'
+        }
+      });
+      
+      const data = await response.json();
+      
+      if (response.ok) {
+        this.updateDomainStatusUI(data);
+        this.showDetailedStatus(data);
+
+        // If backend reports full success, finalize activation via POST (idempotent)
+        if (data.overall_status && !data.business_status?.custom_domain_allow) {
+          try {
+            await fetch(this.getFinalizeActivationUrl(), {
+              method: 'POST',
+              headers: {
+                'Accept': 'application/json',
+                'X-Requested-With': 'XMLHttpRequest',
+                'X-CSRF-Token': this.getCsrfToken()
+              }
+            });
+          } catch (e) {
+            // Non-blocking; UI already shows success and the background job will complete
+            console.warn('Finalize activation failed (non-blocking):', e);
+          }
+        }
+      } else {
+        this.showDomainStatusError(data.error || 'Failed to check domain status');
+      }
+    } catch (error) {
+      console.error('Domain status check failed:', error);
+      this.showDomainStatusError('Network error occurred while checking domain status');
+    } finally {
+      this.resetButton();
+      this.checkInProgress = false;
+    }
+  }
+
+  showThrottleMessage(remainingSeconds) {
+    if (this.statusDetails) {
+      this.statusDetails.textContent = `Please wait ${remainingSeconds} more seconds before checking again`;
+      this.statusDetails.className = 'text-xs text-yellow-600 mt-1';
+    }
+  }
+
+  updateUIToCheckingState() {
+    if (this.button) {
+      this.button.disabled = true;
+      this.button.innerHTML = `
+        <svg class="animate-spin w-3 h-3 mr-1.5" fill="none" viewBox="0 0 24 24">
+          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
+          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
+        </svg>
+        Checking...
+      `;
+    }
+    
+    if (this.statusText) {
+      this.statusText.textContent = 'Checking status...';
+    }
+    
+    if (this.statusDetails) {
+      this.statusDetails.textContent = 'Please wait while we verify your domain configuration';
+      this.statusDetails.className = 'text-xs text-gray-500 mt-1';
+    }
+    
+    if (this.statusIndicator) {
+      this.statusIndicator.className = 'w-3 h-3 bg-yellow-400 rounded-full mr-2';
+    }
+  }
+
+  resetButton() {
+    if (this.button) {
+      this.button.disabled = false;
+      this.button.innerHTML = `
+        <svg class="w-3 h-3 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
+        </svg>
+        Check Now
+      `;
+    }
+  }
+
+  updateDomainStatusUI(data) {
+    if (this.statusText) {
+      this.statusText.textContent = data.status_message;
+    }
+    
+    if (this.statusIndicator) {
+      if (data.overall_status) {
+        this.statusIndicator.className = 'w-3 h-3 bg-green-500 rounded-full mr-2';
+        if (this.statusDetails) {
+          this.statusDetails.textContent = 'Your domain is fully configured and working correctly';
+          this.statusDetails.className = 'text-xs text-green-600 mt-1';
+        }
+      } else if (data.business_status.custom_domain_allow) {
+        this.statusIndicator.className = 'w-3 h-3 bg-green-500 rounded-full mr-2';
+        if (this.statusDetails) {
+          this.statusDetails.textContent = 'Your domain is active and accepting traffic';
+          this.statusDetails.className = 'text-xs text-green-600 mt-1';
+        }
+      } else if (data.dns_check.verified || data.render_check.verified || data.health_check.healthy) {
+        this.statusIndicator.className = 'w-3 h-3 bg-yellow-500 rounded-full mr-2';
+        if (this.statusDetails) {
+          this.statusDetails.textContent = 'Domain configuration is in progress';
+          this.statusDetails.className = 'text-xs text-yellow-600 mt-1';
+        }
+      } else {
+        this.statusIndicator.className = 'w-3 h-3 bg-red-500 rounded-full mr-2';
+        if (this.statusDetails) {
+          this.statusDetails.textContent = 'Domain configuration needs attention';
+          this.statusDetails.className = 'text-xs text-red-600 mt-1';
+        }
+      }
+    }
+  }
+
+  showDetailedStatus(data) {
+    if (!this.detailsExpanded) return;
+    
+    // Update DNS status
+    this.updateCheckStatus('dns', data.dns_check.verified, 
+      data.dns_check.verified ? `CNAME points to ${data.dns_check.target}` : (data.dns_check.error || 'CNAME record not found')
+    );
+    
+    // Update Render status
+    this.updateCheckStatus('render', data.render_check.verified,
+      data.render_check.verified ? 'Domain verified in Render' : (data.render_check.error || 'Domain not found in Render')
+    );
+    
+    // Update Health status
+    this.updateCheckStatus('health', data.health_check.healthy,
+      data.health_check.healthy ? `HTTP ${data.health_check.status_code} (${data.health_check.response_time}s)` : (data.health_check.error || 'Health check failed')
+    );
+    
+    // Show detailed status
+    this.detailsExpanded.classList.remove('hidden');
+  }
+
+  updateCheckStatus(checkType, isSuccess, message) {
+    const indicator = document.getElementById(`${checkType}-check-indicator`);
+    const text = document.getElementById(`${checkType}-check-text`);
+    
+    if (!indicator || !text) return;
+    
+    if (isSuccess) {
+      indicator.className = 'w-2 h-2 bg-green-500 rounded-full mr-2';
+      text.textContent = message;
+      text.className = 'text-green-600 mt-1';
+    } else {
+      indicator.className = 'w-2 h-2 bg-red-500 rounded-full mr-2';
+      text.textContent = message;
+      text.className = 'text-red-600 mt-1';
+    }
+  }
+
+  showDomainStatusError(message) {
+    if (this.statusText) {
+      this.statusText.textContent = 'Status check failed';
+    }
+    
+    if (this.statusDetails) {
+      this.statusDetails.textContent = message;
+      this.statusDetails.className = 'text-xs text-red-600 mt-1';
+    }
+    
+    if (this.statusIndicator) {
+      this.statusIndicator.className = 'w-3 h-3 bg-red-500 rounded-full mr-2';
+    }
+  }
+
+  // Auto-check domain status on page load for custom domains
+  initializeDomainStatusChecker(isActive) {
+    if (this.autoInitDone) return;
+    this.autoInitDone = true;
+    if (!this.domainStatusContainer) return;
+    
+    if (!isActive) {
+      // Delay slightly to ensure page is fully loaded
+      setTimeout(() => this.checkDomainStatus(), 1000);
+    } else {
+      // If domain is already active, show good status immediately
+      this.updateDomainStatusUI({
+        overall_status: true,
+        status_message: 'Domain is active and healthy',
+        business_status: { custom_domain_allow: true }
+      });
+    }
+  }
+
+  getCheckDomainStatusUrl() {
+    // This should be set by the Rails view
+    return window.domainStatusCheckUrl || '/manage/settings/business/check_domain_status';
+  }
+
+  getFinalizeActivationUrl() {
+    return window.finalizeDomainActivationUrl || '/manage/settings/business/finalize_domain_activation';
+  }
+
+  getCsrfToken() {
+    const meta = document.querySelector('meta[name="csrf-token"]');
+    return meta ? meta.getAttribute('content') : '';
+  }
+}
+
+// Global functions for backward compatibility and initialization
+let domainStatusChecker;
+
+function checkDomainStatus() {
+  if (!domainStatusChecker) {
+    domainStatusChecker = new DomainStatusChecker();
+  }
+  domainStatusChecker.checkDomainStatus();
+}
+
+function initializeDomainStatusChecker(isActive = false) {
+  if (!domainStatusChecker) {
+    domainStatusChecker = new DomainStatusChecker();
+  }
+  domainStatusChecker.initializeDomainStatusChecker(isActive);
+}
+
+// Auto-initialize on DOM ready
+document.addEventListener('DOMContentLoaded', () => {
+  if (document.getElementById('domain-status-container')) {
+    if (!domainStatusChecker) {
+      domainStatusChecker = new DomainStatusChecker();
+    }
+    domainStatusChecker.initializeDomainStatusChecker(!!window.domainIsActive);
+  }
+});
+
+// Turbo compatibility
+document.addEventListener('turbo:load', () => {
+  if (document.getElementById('domain-status-container')) {
+    if (!domainStatusChecker) {
+      domainStatusChecker = new DomainStatusChecker();
+    }
+    domainStatusChecker.initializeDomainStatusChecker(!!window.domainIsActive);
+  }
+});
+
+// Export for module systems
+if (typeof module !== 'undefined' && module.exports) {
+  module.exports = DomainStatusChecker;
+}
diff --git a/app/jobs/custom_domain_setup_job.rb b/app/jobs/custom_domain_setup_job.rb
new file mode 100644
index 0000000..d4e2e2c
--- /dev/null
+++ b/app/jobs/custom_domain_setup_job.rb
@@ -0,0 +1,75 @@
+# frozen_string_literal: true
+
+# Background job for custom domain setup to prevent 502 crashes during user requests
+# This job is triggered when a business switches from subdomain to custom domain
+class CustomDomainSetupJob < ApplicationJob
+  queue_as :default
+
+  # Retry with exponential backoff for transient failures
+  retry_on StandardError, wait: :exponentially_longer, attempts: 3
+
+  def perform(business_id)
+    business = Business.find(business_id)
+    
+    Rails.logger.info "[CustomDomainSetupJob] Starting domain setup for business #{business_id} (#{business.hostname})"
+    
+    # Re-validate eligibility checks since business state may have changed after queuing
+    unless eligible_for_domain_setup?(business)
+      Rails.logger.info "[CustomDomainSetupJob] Business #{business_id} no longer eligible for domain setup, skipping"
+      return
+    end
+    
+    # Run the domain setup service
+    result = CnameSetupService.new(business).start_setup!
+    
+    # Handle result safely - it should be a hash but may not be
+    if result.is_a?(Hash)
+      if result[:success]
+        Rails.logger.info "[CustomDomainSetupJob] Domain setup completed successfully for business #{business_id}"
+      else
+        Rails.logger.error "[CustomDomainSetupJob] Domain setup failed for business #{business_id}: #{result[:error]}"
+      end
+    else
+      # If result is not a hash, log it and assume failure
+      Rails.logger.error "[CustomDomainSetupJob] Domain setup returned unexpected result for business #{business_id}: #{result.inspect}"
+    end
+    
+  rescue ActiveRecord::RecordNotFound => e
+    Rails.logger.error "[CustomDomainSetupJob] Business #{business_id} not found: #{e.message}"
+  rescue => e
+    Rails.logger.error "[CustomDomainSetupJob] Unexpected error for business #{business_id}: #{e.message}"
+    raise # Re-raise to trigger retry logic
+  end
+
+  private
+
+  # Re-validate all eligibility checks that were in the original callback
+  # This ensures business state hasn't changed since the job was queued
+  def eligible_for_domain_setup?(business)
+    # Check premium tier requirement
+    unless business.premium_tier?
+      Rails.logger.info "[CustomDomainSetupJob] Business #{business.id} is not premium tier (#{business.tier})"
+      return false
+    end
+
+    # Check host type requirement
+    unless business.host_type_custom_domain?
+      Rails.logger.info "[CustomDomainSetupJob] Business #{business.id} is not custom domain type (#{business.host_type})"
+      return false
+    end
+
+    # Check hostname is present
+    unless business.hostname.present?
+      Rails.logger.info "[CustomDomainSetupJob] Business #{business.id} has no hostname configured"
+      return false
+    end
+
+    # Skip if setup already in progress or completed
+    if business.cname_pending? || business.cname_monitoring? || business.cname_active?
+      Rails.logger.info "[CustomDomainSetupJob] Business #{business.id} domain setup already in progress or completed (#{business.status})"
+      return false
+    end
+
+    true
+  end
+end
diff --git a/app/jobs/domain_monitoring_job.rb b/app/jobs/domain_monitoring_job.rb
new file mode 100644
index 0000000..3aed66f
--- /dev/null
+++ b/app/jobs/domain_monitoring_job.rb
@@ -0,0 +1,122 @@
+# frozen_string_literal: true
+
+# Background job for monitoring CNAME DNS setup progress
+# Runs every 5 minutes to check if custom domain DNS is properly configured
+class DomainMonitoringJob < ApplicationJob
+  queue_as :default
+
+  # Maximum number of retry attempts if the job fails
+  retry_on StandardError, wait: 2.minutes, attempts: 3
+
+  # Discard job after max attempts to prevent infinite retries
+  discard_on DomainMonitoringService::MonitoringError
+
+  def perform(business_id)
+    Rails.logger.info "[DomainMonitoringJob] Starting monitoring check for business #{business_id}"
+
+    # Use `find` instead of `find_by` so an exception is raised when the record
+    # is missing, allowing the dedicated rescue block below to handle the
+    # situation uniformly.
+    business = Business.find(business_id)
+    
+    # Skip if monitoring is no longer needed
+    unless should_continue_monitoring?(business)
+      Rails.logger.info "[DomainMonitoringJob] Monitoring no longer needed for business #{business_id}"
+      return
+    end
+
+    # Skip if not due for check yet
+    unless business.cname_due_for_check?
+      Rails.logger.debug "[DomainMonitoringJob] Check not due yet for business #{business_id}"
+      schedule_next_check(business)
+      return
+    end
+
+    # Perform the monitoring check
+    monitoring_service = DomainMonitoringService.new(business)
+    result = monitoring_service.perform_check!
+
+    Rails.logger.info "[DomainMonitoringJob] Check completed for business #{business_id}: verified=#{result[:verified]}, continue=#{result[:should_continue]}"
+
+    # Schedule next check if monitoring should continue
+    if result[:should_continue]
+      schedule_next_check(business)
+    else
+      Rails.logger.info "[DomainMonitoringJob] Monitoring completed for business #{business_id}"
+    end
+
+  rescue ActiveRecord::RecordNotFound => e
+    Rails.logger.error "[DomainMonitoringJob] Business #{business_id} not found: #{e.message}"
+  rescue => e
+    Rails.logger.error "[DomainMonitoringJob] Error monitoring business #{business_id}: #{e.message}"
+    Rails.logger.error e.backtrace.join("\n") if Rails.env.development?
+    
+    # Don't schedule next check on error to prevent runaway jobs
+    raise e
+  end
+
+  # Class method to start monitoring for a business
+  def self.start_monitoring(business_id)
+    Rails.logger.info "[DomainMonitoringJob] Starting monitoring for business #{business_id}"
+    perform_later(business_id)
+  end
+
+  # Class method to stop monitoring for a business
+  def self.stop_monitoring(business_id)
+    Rails.logger.info "[DomainMonitoringJob] Stopping monitoring for business #{business_id}"
+    
+    business = Business.find_by(id: business_id)
+    return unless business
+
+    business.stop_cname_monitoring!
+  end
+
+  # Process all businesses that need monitoring
+  def self.monitor_all_pending
+    Rails.logger.info "[DomainMonitoringJob] Processing all pending monitoring checks"
+    
+    businesses_needing_monitoring = Business.monitoring_needed.where(
+      'cname_check_attempts < ? AND (updated_at IS NULL OR updated_at <= ?)', 
+      12, 
+      5.minutes.ago
+    )
+
+    Rails.logger.info "[DomainMonitoringJob] Found #{businesses_needing_monitoring.count} businesses needing monitoring"
+
+    businesses_needing_monitoring.each do |business|
+      begin
+        perform_later(business.id)
+      rescue => e
+        Rails.logger.error "[DomainMonitoringJob] Failed to queue monitoring for business #{business.id}: #{e.message}"
+      end
+    end
+  end
+
+  private
+
+  def should_continue_monitoring?(business)
+    # Must be in monitoring status
+    return false unless business.cname_monitoring?
+
+    # Must have monitoring flag enabled
+    return false unless business.cname_monitoring_active?
+
+    # Must not have exceeded max attempts
+    return false if business.cname_check_attempts >= 12
+
+    # Must be premium tier
+    return false unless business.premium_tier?
+
+    # Must be custom domain type
+    return false unless business.host_type_custom_domain?
+
+    true
+  end
+
+  def schedule_next_check(business)
+    # Schedule next check in 5 minutes
+    Rails.logger.debug "[DomainMonitoringJob] Scheduling next check for business #{business.id} in 5 minutes"
+    
+    DomainMonitoringJob.set(wait: 5.minutes).perform_later(business.id)
+  end
+end
\ No newline at end of file
diff --git a/app/mailers/application_mailer.rb b/app/mailers/application_mailer.rb
index b5496fa..4bfb9cc 100644
--- a/app/mailers/application_mailer.rb
+++ b/app/mailers/application_mailer.rb
@@ -5,7 +5,7 @@ require 'ostruct'
 # Base mailer class for all application mailers
 # Sets default from address and layout
 class ApplicationMailer < ActionMailer::Base
-  default from: ENV['MAILER_EMAIL']
+  default from: ENV['MAILER_EMAIL'], reply_to: ENV['SUPPORT_EMAIL']
   layout "mailer"
   # Include all helpers so that mailer views can access view helpers such as
   # service_with_variant, service_duration, etc.
diff --git a/app/mailers/blog_mailer.rb b/app/mailers/blog_mailer.rb
index be2b9b6..e4a0906 100644
--- a/app/mailers/blog_mailer.rb
+++ b/app/mailers/blog_mailer.rb
@@ -9,10 +9,12 @@ class BlogMailer < ApplicationMailer
     @blog_post = blog_post
     # For manager or staff recipients, capture their business to build tenant-specific URLs in templates
     @business = user.business if user.manager? || user.staff?
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     mail(
       to: user.email,
-      subject: "New Blog Post: #{blog_post.title} - BizBlasts"
+      subject: "New Blog Post: #{blog_post.title} - BizBlasts",
+      reply_to: @support_email
     )
   end
   
@@ -26,10 +28,12 @@ class BlogMailer < ApplicationMailer
     @week_end = Date.current.end_of_week
     # Provide business context for manager or staff recipients so views can generate correct subdomain links
     @business = user.business if user.manager? || user.staff?
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     mail(
       to: user.email,
-      subject: "BizBlasts Weekly Update - #{@week_start.strftime('%B %d')} to #{@week_end.strftime('%B %d, %Y')}"
+      subject: "BizBlasts Weekly Update - #{@week_start.strftime('%B %d')} to #{@week_end.strftime('%B %d, %Y')}",
+      reply_to: @support_email
     )
   end
 end 
\ No newline at end of file
diff --git a/app/mailers/booking_mailer.rb b/app/mailers/booking_mailer.rb
index d083c6b..8567254 100644
--- a/app/mailers/booking_mailer.rb
+++ b/app/mailers/booking_mailer.rb
@@ -25,7 +25,8 @@ class BookingMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: "Booking Status Update - #{@business.name}"
+      subject: "Booking Status Update - #{@business.name}",
+      reply_to: @business.email
     )
   end
   
@@ -38,7 +39,8 @@ class BookingMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: "Booking Cancelled - #{@business.name}"
+      subject: "Booking Cancelled - #{@business.name}",
+      reply_to: @business.email
     )
   end
   
@@ -51,7 +53,8 @@ class BookingMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: "Reminder: Your Upcoming Booking - #{@business.name}"
+      subject: "Reminder: Your Upcoming Booking - #{@business.name}",
+      reply_to: @business.email
     )
   end
 
@@ -81,7 +84,8 @@ class BookingMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: subject
+      subject: subject,
+      reply_to: @business.email
     )
   end
 
@@ -97,7 +101,8 @@ class BookingMailer < ApplicationMailer
     mail(
       to: @customer.email,
       subject: "Subscription Booking Scheduled - #{@service.name}",
-      from: @business.email
+      from: @business.email,
+      reply_to: @business.email
     )
   end
 
diff --git a/app/mailers/business_mailer.rb b/app/mailers/business_mailer.rb
index 496141c..33a5492 100644
--- a/app/mailers/business_mailer.rb
+++ b/app/mailers/business_mailer.rb
@@ -13,13 +13,17 @@ class BusinessMailer < ApplicationMailer
     return unless @business.present?
     
     @domain_requested = @business.hostname if @business.host_type_custom_domain?
+    @subdomain_requested = @business.subdomain
+    @custom_domain_owned = @business.custom_domain_owned || false
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     # Set unsubscribe token for the user
     set_unsubscribe_token(user)
     
     mail(
       to: @user.email,
-      subject: "Custom Domain Request Received - #{@business.name}"
+      subject: "Custom Domain Request Received - #{@business.name}",
+      reply_to: @support_email
     )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for domain request notification: #{e.message}"
@@ -40,6 +44,7 @@ class BusinessMailer < ApplicationMailer
     @customer = booking.tenant_customer
     @service = booking.service
     @staff_member = booking.staff_member
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     # Check if business user has this notification enabled (fixed role reference)
     business_user = @business.users.where(role: [:manager]).first
@@ -63,7 +68,8 @@ class BusinessMailer < ApplicationMailer
     
     mail(
       to: business_user.email,
-      subject: "New Booking: #{@customer.full_name} - #{@service.name}"
+      subject: "New Booking: #{@customer.full_name} - #{@service.name}",
+      reply_to: @support_email
     )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for booking notification: #{e.message}"
@@ -79,6 +85,7 @@ class BusinessMailer < ApplicationMailer
     return unless @business.present?
     
     @customer = order.tenant_customer
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     # Get business manager
     business_user = @business.users.where(role: [:manager]).first
@@ -95,7 +102,8 @@ class BusinessMailer < ApplicationMailer
     
     mail(
       to: business_user.email,
-      subject: "New Order: #{@customer.full_name} - Order ##{@order.id}"
+      subject: "New Order: #{@customer.full_name} - Order ##{@order.id}",
+      reply_to: @support_email
     )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for order notification: #{e.message}"
@@ -110,6 +118,8 @@ class BusinessMailer < ApplicationMailer
     # Handle case where business might be nil or deleted
     return unless @business.present?
     
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    
     # Set tenant context properly for secure scoping
     ActsAsTenant.with_tenant(@business) do
       @customer_user_account = nil
@@ -135,7 +145,8 @@ class BusinessMailer < ApplicationMailer
     
     mail(
       to: business_user.email,
-      subject: "New Customer: #{@customer.full_name}"
+      subject: "New Customer: #{@customer.full_name}",
+      reply_to: @support_email
     )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for customer notification: #{e.message}"
@@ -154,6 +165,7 @@ class BusinessMailer < ApplicationMailer
     @invoice = payment.invoice
     @booking = @invoice&.booking
     @order = @invoice&.order
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     # Get business manager
     business_user = @business.users.where(role: [:manager]).first
@@ -178,7 +190,8 @@ class BusinessMailer < ApplicationMailer
     
     mail(
       to: business_user.email,
-      subject: subject
+      subject: subject,
+      reply_to: @support_email
     )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for payment notification: #{e.message}"
@@ -195,6 +208,7 @@ class BusinessMailer < ApplicationMailer
     
     @customer = customer_subscription.tenant_customer
     @item = customer_subscription.product || customer_subscription.service
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     # Get business manager
     business_user = @business.users.where(role: [:manager]).first
@@ -208,7 +222,8 @@ class BusinessMailer < ApplicationMailer
     
     mail(
       to: business_user.email,
-      subject: "New Subscription: #{@customer.full_name} - #{@item.name}"
+      subject: "New Subscription: #{@customer.full_name} - #{@item.name}",
+      reply_to: @support_email
     )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for subscription notification: #{e.message}"
@@ -235,6 +250,8 @@ class BusinessMailer < ApplicationMailer
     # Handle case where business might be nil or deleted
     return unless @business.present?
     
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    
     # Get business manager
     business_user = @business.users.where(role: [:manager]).first
     return unless business_user.present?
@@ -247,7 +264,8 @@ class BusinessMailer < ApplicationMailer
     
     mail(
       to: business_user.email,
-      subject: "Subscription Order: #{@customer.full_name} - Order ##{@order.id}"
+      subject: "Subscription Order: #{@customer.full_name} - Order ##{@order.id}",
+      reply_to: @support_email
     )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for subscription order notification: #{e.message}"
@@ -278,6 +296,8 @@ class BusinessMailer < ApplicationMailer
     # Handle case where business might be nil or deleted
     return unless @business.present?
     
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    
     # Get business manager
     business_user = @business.users.where(role: [:manager]).first
     return unless business_user.present?
@@ -290,7 +310,8 @@ class BusinessMailer < ApplicationMailer
     
     mail(
       to: business_user.email,
-      subject: "Subscription Booking: #{@customer.full_name} - #{@service.name}"
+      subject: "Subscription Booking: #{@customer.full_name} - #{@service.name}",
+      reply_to: @support_email
     )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for subscription booking notification: #{e.message}"
@@ -307,6 +328,7 @@ class BusinessMailer < ApplicationMailer
     
     @customer = customer_subscription.tenant_customer
     @item = customer_subscription.product || customer_subscription.service
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     # Get business manager
     business_user = @business.users.where(role: [:manager]).first
@@ -320,7 +342,8 @@ class BusinessMailer < ApplicationMailer
     
     mail(
       to: business_user.email,
-      subject: "Subscription Payment Failed: #{@customer.full_name} - #{@item.name}"
+      subject: "Subscription Payment Failed: #{@customer.full_name} - #{@item.name}",
+      reply_to: @support_email
     )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for payment failed notification: #{e.message}"
@@ -337,6 +360,7 @@ class BusinessMailer < ApplicationMailer
     
     @customer = customer_subscription.tenant_customer
     @item = customer_subscription.product || customer_subscription.service
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     # Get business manager
     business_user = @business.users.where(role: [:manager]).first
@@ -350,8 +374,9 @@ class BusinessMailer < ApplicationMailer
     
     mail(
       to: business_user.email,
-      subject: "Subscription Cancelled: #{@customer.full_name} - #{@item.name}"
-    )
+      subject: "Subscription Cancelled: #{@customer.full_name} - #{@item.name}",
+      reply_to: @support_email
+      )
   rescue ActiveRecord::RecordNotFound => e
     Rails.logger.error "[BusinessMailer] Business not found for subscription cancelled notification: #{e.message}"
     return nil
diff --git a/app/mailers/contact_mailer.rb b/app/mailers/contact_mailer.rb
index 8012ca7..8090fa4 100644
--- a/app/mailers/contact_mailer.rb
+++ b/app/mailers/contact_mailer.rb
@@ -7,9 +7,11 @@ class ContactMailer < ApplicationMailer
     @business_name = business_name
     @subject = subject
     @message = message
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
 
     mail(to: ENV['SUPPORT_EMAIL'],
          from: email, # Set reply-to to the sender's email
-         subject: "New Contact Form Message: #{subject}")
+         subject: "New Contact Form Message: #{subject}",
+         reply_to: @support_email)
   end
 end 
\ No newline at end of file
diff --git a/app/mailers/domain_mailer.rb b/app/mailers/domain_mailer.rb
new file mode 100644
index 0000000..af8fe25
--- /dev/null
+++ b/app/mailers/domain_mailer.rb
@@ -0,0 +1,88 @@
+# frozen_string_literal: true
+
+# Mailer for custom domain setup notifications
+# Handles setup instructions, success notifications, and timeout help
+class DomainMailer < ApplicationMailer
+  # Use the same verified sender as other mailers, but with BizBlasts Support name
+  #default from: "BizBlasts Support <#{ENV.fetch('MAILER_EMAIL', 'team@bizblasts.com')}>"
+
+  # Send CNAME setup instructions to business owner
+  def setup_instructions(business, user)
+    @business = business
+    @user = user
+    @domain = business.hostname
+    # Guard: a BizBlasts sub-domain is mandatory. Abort if missing to avoid
+    # sending incorrect DNS instructions.
+    unless business.subdomain.present?
+      Rails.logger.error("[DomainMailer] Cannot send setup instructions – business ##{business.id} has no subdomain")
+      raise ArgumentError, 'Business subdomain is blank'
+    end
+
+    @render_target = Rails.env.production? ? 'bizblasts.onrender.com' : 'localhost'
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+
+    # Always instruct users to point the 'www' host at BizBlasts
+    @cname_name = 'www'
+
+    mail(
+      to: @user.email,
+      subject: "Custom Domain Setup Instructions for #{@business.name}",
+      reply_to: @support_email
+    )
+  end
+
+  # Notify when domain activation is successful
+  def activation_success(business, user)
+    @business = business
+    @user = user
+    @domain = business.hostname
+    @domain_url = "https://#{@domain}"
+
+    mail(
+      to: @user.email,
+      subject: "🎉 Your custom domain #{@domain} is now active!",
+      reply_to: ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    )
+  end
+
+  # Send help when domain setup times out
+  def timeout_help(business, user)
+    @business = business
+    @user = user
+    @domain = business.hostname
+    unless business.subdomain.present?
+      Rails.logger.error("[DomainMailer] Cannot send timeout help – business ##{business.id} has no subdomain")
+      raise ArgumentError, 'Business subdomain is blank'
+    end
+
+    @render_target = Rails.env.production? ? 'bizblasts.onrender.com' : 'localhost'
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+
+    mail(
+      to: @user.email,
+      subject: "Help needed: Custom domain setup for #{@domain}",
+      reply_to: @support_email
+    )
+  end
+
+  # Notify when monitoring is manually restarted
+  def monitoring_restarted(business, user)
+    @business = business
+    @user = user
+    @domain = business.hostname
+    # Guard: a BizBlasts sub-domain is mandatory. Abort if missing to avoid
+    # sending incorrect DNS instructions.
+    unless business.subdomain.present?
+      Rails.logger.error("[DomainMailer] Cannot send monitoring restart notification – business ##{business.id} has no subdomain")
+      raise ArgumentError, 'Business subdomain is blank'
+    end
+
+    @render_target = Rails.env.production? ? 'bizblasts.onrender.com' : 'localhost'
+
+    mail(
+      to: @user.email,
+      subject: "Domain monitoring restarted for #{@domain}",
+      reply_to: ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    )
+  end
+end
\ No newline at end of file
diff --git a/app/mailers/invoice_mailer.rb b/app/mailers/invoice_mailer.rb
index 583c0c0..4459118 100644
--- a/app/mailers/invoice_mailer.rb
+++ b/app/mailers/invoice_mailer.rb
@@ -13,7 +13,8 @@ class InvoiceMailer < ApplicationMailer
     
     result = mail(
       to: @customer.email,
-      subject: "Invoice ##{@invoice.invoice_number} - #{@business.name}"
+      subject: "Invoice ##{@invoice.invoice_number} - #{@business.name}",
+      reply_to: @business.email
     )
     
     Rails.logger.info "[EMAIL] InvoiceMailer.invoice_created mail object created successfully for: #{@customer.email}"
@@ -37,7 +38,8 @@ class InvoiceMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: "Payment Received - Invoice ##{@invoice.invoice_number} - #{@business.name}"
+      subject: "Payment Received - Invoice ##{@invoice.invoice_number} - #{@business.name}",
+      reply_to: @business.email
     )
   end
 
@@ -57,7 +59,8 @@ class InvoiceMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: "Payment Reminder - Invoice ##{@invoice.invoice_number} - #{@business.name}"
+      subject: "Payment Reminder - Invoice ##{@invoice.invoice_number} - #{@business.name}",
+      reply_to: @business.email
     )
   end
 
@@ -77,7 +80,8 @@ class InvoiceMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: "Payment Failed - Invoice ##{@invoice.invoice_number} - #{@business.name}"
+      subject: "Payment Failed - Invoice ##{@invoice.invoice_number} - #{@business.name}",
+      reply_to: @business.email
     )
   end
 
diff --git a/app/mailers/marketing_mailer.rb b/app/mailers/marketing_mailer.rb
index 170fb14..351d034 100644
--- a/app/mailers/marketing_mailer.rb
+++ b/app/mailers/marketing_mailer.rb
@@ -3,20 +3,23 @@ class MarketingMailer < ApplicationMailer
     return unless recipient.can_receive_email?(:marketing)
     @recipient = recipient
     @campaign = campaign
-    mail(to: recipient.email, subject: campaign.subject)
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    mail(to: recipient.email, subject: campaign.subject, reply_to: @support_email)
   end
 
   def newsletter(recipient, newsletter)
     return unless recipient.can_receive_email?(:marketing)
     @recipient = recipient
     @newsletter = newsletter
-    mail(to: recipient.email, subject: newsletter.subject)
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    mail(to: recipient.email, subject: newsletter.subject, reply_to: @support_email)
   end
 
   def promotion(recipient, promotion)
     return unless recipient.can_receive_email?(:marketing)
     @recipient = recipient
     @promotion = promotion
-    mail(to: recipient.email, subject: promotion.subject)
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    mail(to: recipient.email, subject: promotion.subject, reply_to: @support_email)
   end
 end
diff --git a/app/mailers/order_mailer.rb b/app/mailers/order_mailer.rb
index 0104f18..71dddb0 100644
--- a/app/mailers/order_mailer.rb
+++ b/app/mailers/order_mailer.rb
@@ -12,7 +12,8 @@ class OrderMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: "Order Confirmation ##{@order.order_number} - #{@business.name}"
+      subject: "Order Confirmation ##{@order.order_number} - #{@business.name}",
+      reply_to: @business.email
     )
   end
   
@@ -39,7 +40,8 @@ class OrderMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: "#{subject_text} - Order ##{@order.order_number} - #{@business.name}"
+      subject: "#{subject_text} - Order ##{@order.order_number} - #{@business.name}",
+      reply_to: @business.email
     )
   end
   
@@ -58,7 +60,8 @@ class OrderMailer < ApplicationMailer
     
     mail(
       to: @customer.email,
-      subject: "Refund Processed - Order ##{@order.order_number} - #{@business.name}"
+      subject: "Refund Processed - Order ##{@order.order_number} - #{@business.name}",
+      reply_to: @business.email
     )
   end
 
@@ -72,7 +75,8 @@ class OrderMailer < ApplicationMailer
     mail(
       to: @customer.email,
       subject: "Subscription Order Created - #{@business.name}",
-      from: @business.email
+      from: @business.email,
+      reply_to: @business.email
     )
   end
 end 
\ No newline at end of file
diff --git a/app/mailers/policy_mailer.rb b/app/mailers/policy_mailer.rb
index cca92df..2f9daf5 100644
--- a/app/mailers/policy_mailer.rb
+++ b/app/mailers/policy_mailer.rb
@@ -4,10 +4,12 @@ class PolicyMailer < ApplicationMailer
   def policy_update_notification(user, updated_policies)
     @user = user
     @updated_policies = updated_policies
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     mail(
       to: user.email,
-      subject: "Important: BizBlasts Policy Updates - Action Required"
+      subject: "Important: BizBlasts Policy Updates - Action Required",
+      reply_to: @support_email
     )
   end
 end 
\ No newline at end of file
diff --git a/app/mailers/reminder_mailer.rb b/app/mailers/reminder_mailer.rb
index eadd57b..b69922f 100644
--- a/app/mailers/reminder_mailer.rb
+++ b/app/mailers/reminder_mailer.rb
@@ -2,20 +2,23 @@ class ReminderMailer < ApplicationMailer
   def booking_reminder(booking)
     # Placeholder for booking reminder email
     @booking = booking
-    mail(to: booking.email, subject: 'Reminder: Your upcoming booking')
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    mail(to: booking.email, subject: 'Reminder: Your upcoming booking', reply_to: @support_email)
   end
 
   def follow_up(customer, service)
     # Placeholder for follow-up email
     @customer = customer
     @service = service
-    mail(to: customer.email, subject: 'How was your recent service?')
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    mail(to: customer.email, subject: 'How was your recent service?', reply_to: @support_email)
   end
 
   def document_expiration(customer, document)
     # Placeholder for document expiration reminder
     @customer = customer
     @document = document
-    mail(to: customer.email, subject: 'Document expiration reminder')
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
+    mail(to: customer.email, subject: 'Document expiration reminder', reply_to: @support_email)
   end
 end
diff --git a/app/mailers/review_request_mailer.rb b/app/mailers/review_request_mailer.rb
index 80d6ea6..f87f604 100644
--- a/app/mailers/review_request_mailer.rb
+++ b/app/mailers/review_request_mailer.rb
@@ -60,7 +60,8 @@ class ReviewRequestMailer < ApplicationMailer
       to: @customer.email,
       subject: subject_line,
       template_path: 'review_request_mailer',
-      template_name: 'review_request_email'
+      template_name: 'review_request_email',
+      reply_to: @business.email
     )
     
   rescue => e
diff --git a/app/mailers/security_mailer.rb b/app/mailers/security_mailer.rb
index 228bfd8..9c07edc 100644
--- a/app/mailers/security_mailer.rb
+++ b/app/mailers/security_mailer.rb
@@ -5,6 +5,7 @@ class SecurityMailer < ApplicationMailer
     @event_type = event_type
     @message = message
     @timestamp = timestamp
+    @support_email = ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com')
     
     admin_email = ENV['ADMIN_EMAIL']
     return unless admin_email.present?
@@ -12,7 +13,8 @@ class SecurityMailer < ApplicationMailer
     mail(
       to: admin_email,
       subject: "[SECURITY ALERT] #{event_type.to_s.humanize} - BizBlasts",
-      from: 'security@bizblasts.com'
+      from: 'team@bizblasts.com',
+      reply_to: @support_email
     )
   end
 end
\ No newline at end of file
diff --git a/app/models/business.rb b/app/models/business.rb
index f3c1e51..48c7998 100644
--- a/app/models/business.rb
+++ b/app/models/business.rb
@@ -112,6 +112,16 @@ class Business < ApplicationRecord
   enum :tier, { free: 'free', standard: 'standard', premium: 'premium' }, suffix: true
   enum :industry, SHOWCASE_INDUSTRY_MAPPINGS
   enum :host_type, { subdomain: 'subdomain', custom_domain: 'custom_domain' }, prefix: true
+  enum :canonical_preference, { www: 'www', apex: 'apex' }, suffix: true
+  enum :status, { 
+    active: 'active', 
+    inactive: 'inactive', 
+    suspended: 'suspended',
+    cname_pending: 'cname_pending',
+    cname_monitoring: 'cname_monitoring',
+    cname_active: 'cname_active',
+    cname_timeout: 'cname_timeout'
+  }, default: 'active'
   
   belongs_to :service_template, optional: true
   
@@ -206,30 +216,39 @@ class Business < ApplicationRecord
   validates :hostname, presence: true, uniqueness: { case_sensitive: false }
   validates :host_type, presence: true, inclusion: { in: host_types.keys }
 
-  # Subdomain format
-  validates :hostname, 
-            format: { 
-              with: /\A[a-z0-9]+(?:-[a-z0-9]+)*\z/, 
-              message: "can only contain lowercase letters, numbers, and single hyphens" 
-            }, 
-            exclusion: { 
-              in: %w(www admin mail api help support status blog), 
-              message: "'%{value}' is reserved." 
-            }, 
-            if: :host_type_subdomain?
+  # Subdomain format validation – only run if the hostname itself is being modified.
+  # This prevents tier/host_type changes from failing validations when the hostname
+  # hasn't been altered (e.g. in tests that toggle host_type only).
+  validates :hostname,
+            format: {
+              with: /\A[a-z0-9]+(?:-[a-z0-9]+)*\z/,
+              message: "can only contain lowercase letters, numbers, and single hyphens"
+            },
+            exclusion: {
+              in: %w(www admin mail api help support status blog),
+              message: "'%{value}' is reserved."
+            },
+            if: -> { host_type_subdomain? && (new_record? || will_save_change_to_hostname?) }
             
-  # Custom domain format
-  validates :hostname, 
-            format: { 
-              with: /\A(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]\z/, 
-              message: "is not a valid domain name" 
-            }, 
-            if: :host_type_custom_domain?
+  # Custom domain format validation – likewise only when hostname is changing.
+  validates :hostname,
+            format: {
+              with: /\A(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]\z/,
+              message: "is not a valid domain name"
+            },
+            if: -> { host_type_custom_domain? && (new_record? || will_save_change_to_hostname?) }
             
-  # Free tier must use subdomain
-  validate :free_tier_requires_subdomain_host_type, if: :free_tier?
+  # Apply subdomain-only rule **only when creating** a Free or Standard business;
+  # allows later downgrades from Premium to proceed so DomainRemovalService can run.
+  validate :non_premium_requires_subdomain_host_type, if: -> { (free_tier? || standard_tier?) && new_record? }
+  
+  # Ensure that only Premium tier businesses can have custom domains.
+  validate :custom_domain_requires_premium_tier
   
   scope :active, -> { where(active: true) }
+  scope :cname_pending, -> { where(status: 'cname_pending') }
+  scope :cname_monitoring, -> { where(status: 'cname_monitoring') }
+  scope :monitoring_needed, -> { where(cname_monitoring_active: true, status: 'cname_monitoring') }
   
   before_validation :normalize_hostname
   before_validation :ensure_hours_is_hash
@@ -237,6 +256,8 @@ class Business < ApplicationRecord
   before_destroy :orphan_all_bookings, prepend: true
   after_save :sync_hours_with_default_location, if: :saved_change_to_hours?
   after_update :handle_loyalty_program_disabled, if: :saved_change_to_loyalty_program_enabled?
+  after_update :handle_tier_downgrade, if: :saved_change_to_tier?
+  after_update :handle_canonical_preference_change, if: :saved_change_to_canonical_preference?
   after_validation :set_time_zone_from_address, if: :address_components_changed?
   
   # Find the current tenant
@@ -250,7 +271,7 @@ class Business < ApplicationRecord
   end
   
   def to_param
-    hostname
+    id.to_s
   end
   
   def active_services
@@ -448,7 +469,7 @@ class Business < ApplicationRecord
   
   # Define which attributes are allowed to be searched with Ransack
   def self.ransackable_attributes(auth_object = nil)
-    %w[id name hostname host_type tier industry time_zone active created_at updated_at stripe_customer_id stripe_status payment_reminders_enabled domain_coverage_applied domain_cost_covered domain_renewal_date stock_management_enabled]
+    %w[id name hostname host_type tier industry time_zone active created_at updated_at status cname_monitoring_active domain_coverage_applied domain_cost_covered domain_renewal_date stripe_customer_id stripe_status payment_reminders_enabled stock_management_enabled]
   end
   
   # Define which associations are allowed to be searched with Ransack
@@ -520,7 +541,95 @@ class Business < ApplicationRecord
     return 0 if domain_coverage_expired?
     (domain_coverage_expires_at - Date.current).to_i
   end
-  
+
+  # CNAME Domain Setup Methods
+  def start_cname_monitoring!
+    return false unless premium_tier? && host_type_custom_domain?
+    
+    update!(
+      status: 'cname_monitoring',
+      cname_monitoring_active: true,
+      cname_check_attempts: 0
+    )
+  end
+
+  def stop_cname_monitoring!
+    update!(
+      cname_monitoring_active: false,
+      status: cname_active? ? 'cname_active' : 'active'
+    )
+  end
+
+  def cname_due_for_check?
+    return false unless cname_monitoring_active?
+    return true if cname_check_attempts == 0
+    
+    # Check every 5 minutes, max 12 attempts (1 hour)
+    return false if cname_check_attempts >= 12
+    
+    last_check = updated_at || Time.current
+    Time.current >= last_check + 5.minutes
+  end
+
+  def increment_cname_check!
+    increment!(:cname_check_attempts)
+  end
+
+  def cname_timeout!
+    update!(
+      status: 'cname_timeout',
+      cname_monitoring_active: false
+    )
+  end
+
+  def cname_success!
+    update!(
+      status: 'cname_active',
+      cname_monitoring_active: false
+    )
+  end
+
+  # Check if domain health verification is stale and needs rechecking
+  def domain_health_stale?(threshold = 1.hour)
+    domain_health_checked_at.nil? || domain_health_checked_at < threshold.ago
+  end
+
+  def can_setup_custom_domain?
+    premium_tier? && host_type_custom_domain? && !cname_active?
+  end
+
+  # ---------------------------------------------------------------------------
+  # Convenience flag
+  # ---------------------------------------------------------------------------
+  # Returns true when the business *should* be served from its custom domain –
+  # i.e., the tenant *is* a custom-domain host *and* the CNAME/DNS has been
+  # validated *and* Render reports the domain attached (SSL issued) *and* 
+  # the domain is returning HTTP 200 status.
+  def custom_domain_allow?
+    premium_tier? && host_type_custom_domain? && cname_active? && render_domain_added? && domain_health_verified?
+  end
+
+  # Set domain health status with optimistic locking protection
+  # @param verified_status [Boolean] true for verified, false for unverified
+  def mark_domain_health_status!(verified_status, retry_count = 0)
+    with_lock do
+      update!(
+        domain_health_verified: verified_status,
+        domain_health_checked_at: Time.current
+      )
+    end
+  rescue ActiveRecord::StaleObjectError => e
+    Rails.logger.warn "[Business] Optimistic lock conflict when marking domain health #{verified_status ? 'verified' : 'unverified'} for business #{id}: #{e.message}"
+    
+    if retry_count < 1
+      # Reload and retry once
+      reload
+      mark_domain_health_status!(verified_status, retry_count + 1)
+    else
+      raise e
+    end
+  end
+
   # Method to get the full URL for this business
   def full_url(path = nil)
     # Determine host based on environment and host_type
@@ -545,28 +654,12 @@ class Business < ApplicationRecord
       port = ":#{default_opts[:port]}" if default_opts[:port].present?
     end
 
-    # Build URL
-    url = "#{protocol}#{host}#{port}"
-    url += path.to_s if path.present?
-    url
+    # Construct full URL
+    full_url = "#{protocol}#{host}#{port}"
+    full_url += "/#{path.to_s.gsub(/^\//, '')}" if path.present?
+    full_url
   end
 
-  
-  # Active Storage attachment for business logo with variants
-  has_one_attached :logo do |attachable|
-    attachable.variant :thumb, resize_to_limit: [120, 120], quality: 80
-    attachable.variant :medium, resize_to_limit: [300, 300], quality: 85
-    attachable.variant :large, resize_to_limit: [600, 600], quality: 90
-  end
-  
-  # Logo validations
-  validates :logo, content_type: { in: %w[image/png image/jpeg image/gif image/webp], 
-                                   message: 'must be PNG, JPEG, GIF, or WebP' },
-                   size: { less_than: 15.megabytes, message: 'must be less than 15MB' }
-  
-  # Background processing for logo
-  after_commit :process_logo, if: -> { logo.attached? }
-  
   def has_visible_products?
     products.active.where(product_type: [:standard, :mixed]).any?(&:visible_to_customers?)
   end
@@ -646,9 +739,135 @@ class Business < ApplicationRecord
     save(validate: false) if time_zone_changed? && persisted?
     time_zone
   end
+
+  # Active Storage attachment for business logo with variants
+  has_one_attached :logo do |attachable|
+    attachable.variant :thumb, resize_to_limit: [120, 120], quality: 80
+    attachable.variant :medium, resize_to_limit: [300, 300], quality: 85
+    attachable.variant :large, resize_to_limit: [600, 600], quality: 90
+  end
+  
+  # Logo validations
+  validates :logo, content_type: { in: %w[image/png image/jpeg image/gif image/webp], 
+                                   message: 'must be PNG, JPEG, GIF, or WebP' },
+                   size: { less_than: 15.megabytes, message: 'must be less than 15MB' }
   
+  # Background processing for logo
+  after_commit :process_logo, if: -> { logo.attached? }
+
+  # Ensure hostname is populated for subdomain host_type
+  before_validation :sync_hostname_with_subdomain, if: :host_type_subdomain?
+
+  # Get the canonical domain based on the business's canonical preference
+  # This is the domain that should be used for links, health checks, etc.
+  def canonical_domain
+    return nil unless hostname.present? && host_type_custom_domain?
+    
+    apex_domain = hostname.sub(/^www\./, '')
+    
+    case canonical_preference
+    when 'www'
+      "www.#{apex_domain}"
+    when 'apex'
+      apex_domain
+    else
+      # Fallback to stored hostname if preference is unknown
+      hostname
+    end
+  end
+
   private
+
+  # Returns the most reliable host for critical mailer URLs (payments, invoices)
+  # Always defaults to subdomain for maximum reliability unless explicitly overridden
+  def mailer_host(prefer_custom_domain: false)
+    # For critical links (payments/invoices), default to reliable subdomain
+    # Only use custom domain if explicitly requested AND fully verified
+    if prefer_custom_domain && custom_domain_fully_functional?
+      hostname
+    else
+      # Always fall back to reliable subdomain for critical links
+      "#{subdomain}.bizblasts.com"
+    end
+  end
+
+  # Checks if custom domain is not just allowed, but actually functional
+  def custom_domain_fully_functional?
+    custom_domain_allow? && 
+    status == 'cname_active' && 
+    render_domain_added? &&
+    domain_health_verified? &&
+    hostname.present? &&
+    # Additional safety: ensure hostname doesn't contain any suspicious patterns
+    hostname.match?(/\A[a-zA-Z0-9.-]+\z/)
+  end
   
+  # ---------------------------------------------------------------------------
+  # Automatic custom-domain setup triggers
+  # ---------------------------------------------------------------------------
+
+  # 1. Newly-registered businesses that signed up for the Premium tier **and**
+  #    provided a custom domain should have the CNAME setup sequence started
+  #    automatically right after creation.
+  after_commit :trigger_custom_domain_setup_after_create, on: :create
+
+  # 2. Existing businesses that upgrade to the Premium tier (tier change
+  #    detected) and already have a custom-domain host type should also kick
+  #    off the setup sequence automatically – but only if the setup hasn’t
+  #    already been started/completed.
+  after_commit :trigger_custom_domain_setup_after_premium_upgrade, on: :update
+  after_commit :trigger_custom_domain_setup_after_host_type_change, on: :update
+
+  # ---------------------------------------------------------------------------
+  # Callback helpers (private)
+  # ---------------------------------------------------------------------------
+  private
+
+  # Triggered after *create* for eligible businesses.
+  def trigger_custom_domain_setup_after_create
+    return unless premium_tier? && host_type_custom_domain? && hostname.present?
+    return if Rails.env.test? # avoid interfering with specs
+
+    # Run domain setup in background to prevent 502 crashes from external API calls
+    Rails.logger.info "[BUSINESS CALLBACK] Queueing custom-domain setup for newly created Business ##{id} (#{hostname})"
+    CustomDomainSetupJob.perform_later(id)
+  end
+
+  # Triggered after *update* when a non-premium business upgrades to Premium.
+  def trigger_custom_domain_setup_after_premium_upgrade
+    return if Rails.env.test?
+    return unless saved_change_to_tier? && tier == 'premium'
+
+    # Only act when moving *to* premium, not any other tier change.
+    old_tier, new_tier = saved_change_to_tier
+    return unless old_tier != 'premium' && new_tier == 'premium'
+
+    return unless host_type_custom_domain? && hostname.present?
+
+    # Skip if setup already in progress or completed.
+    return if cname_pending? || cname_monitoring? || cname_active?
+
+    # Run domain setup in background to prevent 502 crashes from external API calls
+    Rails.logger.info "[BUSINESS CALLBACK] Queueing custom-domain setup for Business ##{id} after tier upgrade (#{old_tier} -> premium)"
+    CustomDomainSetupJob.perform_later(id)
+  end
+
+  # Triggered after *update* when host_type changes from subdomain -> custom_domain on a premium business.
+  def trigger_custom_domain_setup_after_host_type_change
+    return if Rails.env.test?
+    return unless saved_change_to_host_type? && host_type_custom_domain?
+    return unless premium_tier? && hostname.present?
+    # Skip if setup already running or completed
+    return if cname_pending? || cname_monitoring? || cname_active?
+    
+    # Run domain setup in background to prevent 502 crashes from external API calls
+    Rails.logger.info "[BUSINESS CALLBACK] Queueing custom-domain setup for Business ##{id} after host_type change (subdomain -> custom_domain)"
+    CustomDomainSetupJob.perform_later(id)
+  end
+
+  # ---------------------------------------------------------------------------
+  # Existing private methods continue below
+  # ---------------------------------------------------------------------------
   def process_logo
     return unless logo.attached?
     
@@ -665,10 +884,20 @@ class Business < ApplicationRecord
   
   def normalize_hostname
     return if hostname.blank?
-    self.hostname = hostname.downcase.strip
+    self.hostname = hostname.to_s.downcase.strip
     # No longer perform aggressive gsub cleaning for subdomains here,
     # let the format validator handle invalid characters/structures.
   end
+  # Keeps hostname in sync with subdomain for subdomain-based tenants.
+  # • Runs when the record is new OR the subdomain itself is being changed.
+  # • Normalises the value for consistency.
+  def sync_hostname_with_subdomain
+    return if subdomain.blank?
+
+    if new_record? || will_save_change_to_subdomain? || hostname.blank?
+      self.hostname = subdomain.to_s.downcase.strip
+    end
+  end
 
   def normalize_stripe_customer_id
     # Convert empty strings to nil to avoid unique constraint violations
@@ -676,12 +905,48 @@ class Business < ApplicationRecord
     self.stripe_customer_id = nil if stripe_customer_id.blank?
   end
   
-  def free_tier_requires_subdomain_host_type
-    unless host_type_subdomain?
-      errors.add(:host_type, "must be 'subdomain' for the Free tier")
+  # Validation helper: Free **and Standard** tiers can only use BizBlasts sub-domains.
+  # Runs only when creating or updating a non-premium business.
+  def non_premium_requires_subdomain_host_type
+    return if host_type_subdomain?
+    errors.add(:host_type, "must be 'subdomain' for Free and Standard tiers")
+  end
+
+  # Keep old method name as alias for backwards compatibility (e.g., specs).
+  alias_method :free_tier_requires_subdomain_host_type, :non_premium_requires_subdomain_host_type
+  
+  # Validation helper: prevent non-premium businesses from using custom domains.
+  def custom_domain_requires_premium_tier
+    return unless host_type_custom_domain?
+ 
+    # --- Allow downgrades ----------------------------------------------------
+    # If the business is *downgrading* from premium, let the record save so that
+    # the `handle_tier_downgrade` callback can subsequently remove the custom
+    # domain.  A downgrade is detected when the tier is changing **from**
+    # 'premium' **to** a different value.
+    if will_save_change_to_tier? && tier_was == 'premium' && tier != 'premium'
+      return # skip validation – downgrade will be handled after save
+    end
+
+    # For all other cases (creates, upgrades, edits) enforce the rule.
+    final_tier = if will_save_change_to_tier? && tier.present?
+                   tier                           # new value about to be saved
+                 else
+                   tier_was || tier              # previous persisted value (or current)
+                 end
+
+    unless final_tier == 'premium'
+      errors.add(:tier, 'must be premium to use a custom domain')
     end
   end
   
+  # Returns true if the tier *before the current change* was premium.  Works
+  # in validations (before save) because `tier_was` contains the previously
+  # persisted value.
+  def premium_tier_was?
+    tier_was == 'premium'
+  end
+  
   # Sync business hours with the default location
   def sync_hours_with_default_location
     return unless default_location.present?
@@ -752,4 +1017,62 @@ class Business < ApplicationRecord
       )
     end
   end
+
+  def handle_tier_downgrade
+    # Only act if tier changed and business has custom domain
+    return unless saved_change_to_tier? && host_type_custom_domain?
+    
+    old_tier, new_tier = saved_change_to_tier
+    
+    # Remove custom domain if downgrading from premium
+    if old_tier == 'premium' && new_tier != 'premium'
+      Rails.logger.info "[TIER DOWNGRADE] Removing custom domain due to tier change from #{old_tier} to #{new_tier} for business #{id}"
+      
+      begin
+        removal_service = DomainRemovalService.new(self)
+        result = removal_service.handle_tier_downgrade!(new_tier)
+        
+        Rails.logger.info "[TIER DOWNGRADE] Domain removal result: #{result[:success] ? 'success' : 'failed'}"
+      rescue => e
+        Rails.logger.error "[TIER DOWNGRADE] Failed to remove domain: #{e.message}"
+      end
+    end
+  end
+
+  def handle_canonical_preference_change
+    # Only act if business has active custom domain
+    return unless host_type_custom_domain? && cname_active? && render_domain_added?
+    
+    old_preference, new_preference = saved_change_to_canonical_preference
+    
+    Rails.logger.info "[CANONICAL PREFERENCE CHANGE] Updating Render domains from #{old_preference} to #{new_preference} for business #{id}"
+    
+    begin
+      # Remove and re-add domain with new canonical preference
+      setup_service = CnameSetupService.new(self)
+      
+      # First remove existing domains
+      render_service = RenderDomainService.new
+      apex_domain = hostname.sub(/^www\./, '')
+      
+      [apex_domain, "www.#{apex_domain}"].each do |domain_name|
+        domain = render_service.find_domain_by_name(domain_name)
+        if domain
+          Rails.logger.info "[CANONICAL PREFERENCE CHANGE] Removing domain: #{domain_name}"
+          render_service.remove_domain(domain['id'])
+        end
+      end
+      
+      # Re-add with new canonical preference
+      setup_service.send(:add_domain_to_render!)
+      # Auto-trigger verification of both variants in Render
+      setup_service.send(:verify_render_domains!)
+      
+      Rails.logger.info "[CANONICAL PREFERENCE CHANGE] Successfully updated canonical preference"
+      
+    rescue => e
+      Rails.logger.error "[CANONICAL PREFERENCE CHANGE] Failed to update domains: #{e.message}"
+      # Don't raise - this is a background operation
+    end
+  end
 end 
\ No newline at end of file
diff --git a/app/policies/admin/business_policy.rb b/app/policies/admin/business_policy.rb
index a85b2a7..268e30d 100644
--- a/app/policies/admin/business_policy.rb
+++ b/app/policies/admin/business_policy.rb
@@ -41,6 +41,27 @@ module Admin
       admin?
     end
 
+    # Custom domain management member actions
+    def start_domain_setup?
+      admin?
+    end
+
+    def restart_domain_monitoring?
+      admin?
+    end
+
+    def force_activate_domain?
+      admin?
+    end
+
+    def disable_custom_domain?
+      admin?
+    end
+
+    def domain_status?
+      admin?
+    end
+
     private
 
     # Helper method to check if the user is an admin.
diff --git a/app/services/cname_dns_checker.rb b/app/services/cname_dns_checker.rb
new file mode 100644
index 0000000..6e9114a
--- /dev/null
+++ b/app/services/cname_dns_checker.rb
@@ -0,0 +1,210 @@
+# frozen_string_literal: true
+
+require 'resolv'
+
+# Service for verifying CNAME DNS configuration
+# Checks if a custom domain properly points to Render's infrastructure
+class CnameDnsChecker
+  class DnsResolutionError < StandardError; end
+
+  # Targets that indicate correct routing to Render
+  RENDER_CNAME_TARGET = Rails.env.production? ? 'bizblasts.onrender.com' : 'localhost'
+  RENDER_APEX_IP       = '216.24.57.1' # Render documented anycast IP for apex A records
+
+  def initialize(domain_name)
+    @domain_name = domain_name.to_s.strip.downcase
+    @resolver = Resolv::DNS.new
+  end
+
+  # Check if the domain's CNAME points to the correct target
+  # @return [Hash] Result with verification status and details
+  def verify_cname
+    Rails.logger.info "[CnameDnsChecker] Checking CNAME for: #{@domain_name}"
+
+    begin
+      result = {
+        domain: @domain_name,
+        verified: false,
+        target: nil,
+        expected_target: RENDER_CNAME_TARGET,
+        error: nil,
+        checked_at: Time.current
+      }
+
+      # First, try to resolve CNAME for the exact domain
+      cname_target = resolve_cname(@domain_name)
+      
+      if cname_target.present?
+        result[:target] = cname_target
+        result[:verified] = cname_matches_target?(cname_target)
+        
+        Rails.logger.info "[CnameDnsChecker] CNAME found: #{@domain_name} -> #{cname_target}"
+        Rails.logger.info "[CnameDnsChecker] Verification: #{result[:verified] ? 'PASSED' : 'FAILED'}"
+      else
+        # If no CNAME exists, allow apex verification via A/ALIAS pointing to Render IP
+        if apex_a_matches_render?(@domain_name)
+          result[:target] = RENDER_APEX_IP
+          result[:verified] = true
+          result[:error] = nil
+          Rails.logger.info "[CnameDnsChecker] Apex A-record matches Render IP for #{@domain_name}"
+        else
+          result[:error] = 'No CNAME record found'
+          Rails.logger.warn "[CnameDnsChecker] No CNAME record (and apex A mismatch) for: #{@domain_name}"
+        end
+      end
+
+      result
+    rescue => e
+      Rails.logger.error "[CnameDnsChecker] DNS resolution failed: #{e.message}"
+      {
+        domain: @domain_name,
+        verified: false,
+        target: nil,
+        expected_target: RENDER_CNAME_TARGET,
+        error: e.message,
+        checked_at: Time.current
+      }
+    ensure
+      @resolver&.close
+    end
+  end
+
+  # Check multiple DNS servers for more reliable results
+  # @return [Hash] Aggregated results from multiple DNS servers
+  def verify_cname_multiple_dns
+    dns_servers = [
+      '8.8.8.8',        # Google DNS
+      '1.1.1.1',        # Cloudflare DNS  
+      '208.67.222.222'  # OpenDNS
+    ]
+
+    results = []
+    
+    dns_servers.each do |dns_server|
+      begin
+        resolver = Resolv::DNS.new(nameserver: [dns_server])
+        checker = self.class.new(@domain_name)
+        checker.instance_variable_set(:@resolver, resolver)
+        
+        result = checker.verify_cname
+        result[:dns_server] = dns_server
+        results << result
+        
+        resolver.close
+      rescue => e
+        Rails.logger.warn "[CnameDnsChecker] Failed to check DNS server #{dns_server}: #{e.message}"
+        results << {
+          domain: @domain_name,
+          verified: false,
+          dns_server: dns_server,
+          error: e.message,
+          checked_at: Time.current
+        }
+      end
+    end
+
+    # Aggregate results
+    verified_count = results.count { |r| r[:verified] }
+    total_count = results.length
+
+    {
+      domain: @domain_name,
+      verified: verified_count > 0,
+      verification_ratio: "#{verified_count}/#{total_count}",
+      all_verified: verified_count == total_count,
+      results: results,
+      checked_at: Time.current
+    }
+  end
+
+  # Get detailed DNS information for debugging
+  # @return [Hash] Comprehensive DNS information
+  def dns_debug_info
+    info = {
+      domain: @domain_name,
+      checked_at: Time.current,
+      records: {}
+    }
+
+    # Check different record types
+    record_types = ['A', 'CNAME', 'AAAA', 'MX']
+    
+    record_types.each do |type|
+      begin
+        records = @resolver.getresources(@domain_name, Resolv::DNS::Resource::IN.const_get(type))
+        info[:records][type] = records.map(&:to_s)
+      rescue => e
+        info[:records][type] = ["Error: #{e.message}"]
+      end
+    end
+
+    # Also check without www prefix
+    if @domain_name.start_with?('www.')
+      root_domain = @domain_name.sub('www.', '')
+      info[:root_domain_check] = self.class.new(root_domain).verify_cname
+    end
+
+    info
+  end
+
+  # Check if domain resolves to any IP (basic connectivity test)
+  # @return [Boolean] True if domain resolves to an IP
+  def domain_resolves?
+    begin
+      addresses = @resolver.getaddresses(@domain_name)
+      addresses.any?
+    rescue
+      false
+    end
+  end
+
+  private
+
+  # Resolve CNAME record for the domain
+  # @param domain [String] Domain to resolve
+  # @return [String, nil] CNAME target or nil if not found
+  def resolve_cname(domain)
+    cname_records = @resolver.getresources(domain, Resolv::DNS::Resource::IN::CNAME)
+    return nil if cname_records.empty?
+
+    # Return the first CNAME target
+    cname_records.first.name.to_s.chomp('.')
+  end
+
+  # Check if CNAME target matches expected target
+  # @param target [String] The resolved CNAME target
+  # @return [Boolean] True if target matches expected
+  def cname_matches_target?(target)
+    return false if target.blank?
+
+    # Normalize targets for comparison
+    normalized_target = target.downcase.chomp('.')
+    normalized_expected = RENDER_CNAME_TARGET.downcase.chomp('.')
+
+    # Direct match
+    return true if normalized_target == normalized_expected
+
+    # In development/test, be more lenient
+    unless Rails.env.production?
+      return true if normalized_target.include?('localhost') || 
+                     normalized_target.include?('127.0.0.1') ||
+                     normalized_target.include?('render') ||
+                     normalized_target.include?('bizblasts')
+    end
+
+    false
+  end
+
+  # Determine whether the domain (or its root form) has an A-record that
+  # points to Render's apex IP. This is used when an apex cannot use CNAME.
+  def apex_a_matches_render?(domain)
+    begin
+      root = domain.start_with?('www.') ? domain.sub('www.', '') : domain
+      a_records = @resolver.getresources(root, Resolv::DNS::Resource::IN::A)
+      a_records.map(&:address).map(&:to_s).include?(RENDER_APEX_IP)
+    rescue => e
+      Rails.logger.warn "[CnameDnsChecker] A-record lookup failed for #{domain}: #{e.message}"
+      false
+    end
+  end
+end
\ No newline at end of file
diff --git a/app/services/cname_setup_service.rb b/app/services/cname_setup_service.rb
new file mode 100644
index 0000000..594fdee
--- /dev/null
+++ b/app/services/cname_setup_service.rb
@@ -0,0 +1,394 @@
+# frozen_string_literal: true
+
+# Main orchestration service for CNAME custom domain setup
+# Coordinates between Render API, DNS checking, and email notifications
+class CnameSetupService
+  class SetupError < StandardError; end
+  class InvalidBusinessError < SetupError; end
+  class DomainAlreadyExistsError < SetupError; end
+
+  # Initialize the service
+  #
+  # We avoid eagerly instantiating RenderDomainService because many code paths
+  # (e.g. querying the current status) do **not** require hitting the Render API
+  # and therefore should not fail when the Render credentials are not present
+  # (such as in test environments).
+  #
+  # Instead we accept an optional `render_service` dependency that can be
+  # supplied by callers/tests.  When it is first needed we lazily create a
+  # concrete RenderDomainService instance, which will still raise an
+  # InvalidCredentialsError if the credentials are missing *and* we actually
+  # need to talk to the API.
+  def initialize(business, render_service: nil)
+    @business = business
+    @render_service = render_service # may be nil – we will lazily build when required
+    @errors = []
+  end
+
+  # Lazily build or return the RenderDomainService instance.  Use this helper
+  # everywhere instead of referring to `@render_service` directly.
+  def render_service
+    @render_service ||= RenderDomainService.new
+  end
+
+  # Start the complete CNAME setup process
+  # @return [Hash] Result with success status and details
+  def start_setup!
+    Rails.logger.info "[CnameSetupService] Starting setup for business #{@business.id} (#{@business.hostname})"
+
+    begin
+      # Validate business can setup custom domain
+      validate_business_eligibility!
+
+      # Step 1: Add domain to Render
+      add_domain_to_render!
+
+      # Step 1.5: Trigger verification for both apex and www domains
+      verify_render_domains!
+
+      # Step 2: Update business status and start monitoring
+      update_business_status!
+
+      # Step 3: Send setup instructions email
+      send_setup_instructions!
+
+      # Step 4: Start DNS monitoring
+      start_monitoring!
+
+      Rails.logger.info "[CnameSetupService] Setup initiated successfully for #{@business.hostname}"
+
+      {
+        success: true,
+        message: 'Custom domain setup initiated successfully',
+        business_id: @business.id,
+        domain: @business.hostname,
+        status: @business.status,
+        next_steps: [
+          'Check your email for CNAME setup instructions',
+          'Add the CNAME record with your domain registrar',
+          'We will monitor DNS propagation and notify you when complete'
+        ]
+      }
+
+    rescue => e
+      Rails.logger.error "[CnameSetupService] Setup failed: #{e.message}"
+      
+      # Rollback any partial changes
+      rollback_changes!
+
+      {
+        success: false,
+        error: e.message,
+        business_id: @business.id,
+        domain: @business.hostname
+      }
+    end
+  end
+
+  # Restart monitoring for a business (manual retry)
+  # @return [Hash] Result with success status
+  def restart_monitoring!
+    Rails.logger.info "[CnameSetupService] Restarting monitoring for #{@business.hostname}"
+
+    begin
+      validate_business_for_restart!
+
+      # Reset monitoring state
+      @business.update!(
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 0
+      )
+
+      # Send restart notification email
+      send_monitoring_restarted_email!
+
+      # Start monitoring job
+      DomainMonitoringJob.perform_later(@business.id)
+
+      Rails.logger.info "[CnameSetupService] Monitoring restarted for #{@business.hostname}"
+
+      {
+        success: true,
+        message: 'Domain monitoring restarted successfully',
+        business_id: @business.id,
+        domain: @business.hostname
+      }
+
+    rescue => e
+      Rails.logger.error "[CnameSetupService] Failed to restart monitoring: #{e.message}"
+      
+      {
+        success: false,
+        error: e.message,
+        business_id: @business.id,
+        domain: @business.hostname
+      }
+    end
+  end
+
+  # Force activate domain (admin override)
+  # @return [Hash] Result with success status
+  def force_activate!
+    Rails.logger.info "[CnameSetupService] Force activating domain for #{@business.hostname}"
+
+    begin
+      validate_business_exists!
+
+      @business.update!(
+        status: 'cname_active',
+        cname_monitoring_active: false
+      )
+
+      # Send activation success email
+      send_activation_success_email!
+
+      Rails.logger.info "[CnameSetupService] Domain force activated for #{@business.hostname}"
+
+      {
+        success: true,
+        message: 'Domain activated successfully',
+        business_id: @business.id,
+        domain: @business.hostname,
+        status: @business.status
+      }
+
+    rescue => e
+      Rails.logger.error "[CnameSetupService] Failed to force activate: #{e.message}"
+      
+      {
+        success: false,
+        error: e.message,
+        business_id: @business.id,
+        domain: @business.hostname
+      }
+    end
+  end
+
+  # Get current setup status for a business
+  # @return [Hash] Detailed status information
+  def status
+    {
+      business_id: @business.id,
+      domain: @business.hostname,
+      status: @business.status,
+      monitoring_active: @business.cname_monitoring_active?,
+      check_attempts: @business.cname_check_attempts,
+      setup_email_sent: @business.cname_setup_email_sent_at.present?,
+      render_domain_added: @business.render_domain_added?,
+      can_setup: @business.can_setup_custom_domain?,
+      can_restart: can_restart_monitoring?,
+      created_at: @business.created_at,
+      updated_at: @business.updated_at
+    }
+  end
+
+  private
+
+  def validate_business_eligibility!
+    validate_business_exists!
+
+    unless @business.premium_tier?
+      raise InvalidBusinessError, 'Custom domains are only available for Premium tier businesses'
+    end
+
+    unless @business.host_type_custom_domain?
+      raise InvalidBusinessError, 'Business must be configured for custom domain hosting'
+    end
+
+    if @business.cname_active?
+      raise DomainAlreadyExistsError, 'Custom domain is already active'
+    end
+
+    if @business.hostname.blank?
+      raise InvalidBusinessError, 'Business hostname is not configured'
+    end
+  end
+
+  def validate_business_for_restart!
+    validate_business_exists!
+
+    unless @business.premium_tier?
+      raise InvalidBusinessError, 'Custom domains are only available for Premium tier businesses'
+    end
+
+    unless ['cname_pending', 'cname_monitoring', 'cname_timeout'].include?(@business.status)
+      raise InvalidBusinessError, 'Domain monitoring can only be restarted from pending, monitoring, or timeout status'
+    end
+  end
+
+  def validate_business_exists!
+    raise InvalidBusinessError, 'Business not found' if @business.nil?
+  end
+
+  # Determine which domain to add to Render based on canonical preference
+  # Render will automatically handle redirects from the non-canonical version
+  def determine_domains_to_add
+    apex_domain = @business.hostname.sub(/^www\./, '')
+    www_domain = "www.#{apex_domain}"
+    
+    case @business.canonical_preference
+    when 'www'
+      # Add www domain as primary - Render will redirect apex → www
+      Rails.logger.info "[CnameSetupService] WWW canonical: adding www domain as primary"
+      [www_domain]
+    when 'apex'  
+      # Add apex domain as primary - Render will redirect www → apex
+      Rails.logger.info "[CnameSetupService] Apex canonical: adding apex domain as primary"
+      [apex_domain]
+    else
+      # Fallback: add stored hostname as-is
+      Rails.logger.warn "[CnameSetupService] Unknown canonical preference: #{@business.canonical_preference}, using stored hostname"
+      [@business.hostname]
+    end
+  end
+
+  def add_domain_to_render!
+    Rails.logger.info "[CnameSetupService] Adding domain to Render: #{@business.hostname}"
+    Rails.logger.info "[CnameSetupService] Canonical preference: #{@business.canonical_preference}"
+
+    # Determine which domains to add based on canonical preference
+    domains_to_add = determine_domains_to_add
+    
+    domains_to_add.each do |domain_name|
+      # Check if domain already exists
+      existing_domain = render_service.find_domain_by_name(domain_name)
+      if existing_domain
+        Rails.logger.info "[CnameSetupService] Domain already exists in Render: #{domain_name}"
+        next
+      end
+
+      # Add new domain
+      Rails.logger.info "[CnameSetupService] Adding domain to Render: #{domain_name}"
+      domain_data = render_service.add_domain(domain_name)
+      Rails.logger.info "[CnameSetupService] Domain added to Render successfully: #{domain_name} (#{domain_data['id']})"
+    end
+    
+    @business.update!(render_domain_added: true)
+  end
+
+  def verify_render_domains!
+    Rails.logger.info "[CnameSetupService] Triggering verification for domains added to Render"
+
+    begin
+      # Verify both canonical and sibling domains (apex + www). Render may have
+      # created the sibling automatically and it will remain in "Needs
+      # Verification" until verified once. Verifying both avoids manual steps in
+      # the Render dashboard when switching canonical preference.
+      apex_domain = @business.hostname.sub(/^www\./, '')
+      domains_to_verify = [apex_domain, "www.#{apex_domain}"]
+      
+      domains_to_verify.each_with_index do |domain_name, index|
+        # Add delay for www domain to allow SSL certificate provisioning
+        if domain_name.start_with?('www.') && index > 0
+          Rails.logger.info "[CnameSetupService] Waiting 30 seconds for SSL provisioning before verifying: #{domain_name}"
+          sleep(30)
+        end
+
+        domain = render_service.find_domain_by_name(domain_name)
+        if domain
+          Rails.logger.info "[CnameSetupService] Verifying domain: #{domain_name} (ID: #{domain['id']})"
+          
+          begin
+            result = render_service.verify_domain(domain['id'])
+            if result['verified']
+              Rails.logger.info "[CnameSetupService] ✅ Domain verified successfully: #{domain_name}"
+            else
+              Rails.logger.warn "[CnameSetupService] ⚠️ Domain verification pending: #{domain_name}"
+            end
+          rescue => e
+            # Don't fail the entire setup if verification fails - DNS might not be ready yet
+            Rails.logger.warn "[CnameSetupService] Domain verification failed for #{domain_name}: #{e.message}"
+          end
+        else
+          Rails.logger.warn "[CnameSetupService] Domain not found in Render: #{domain_name}"
+        end
+      end
+    rescue => e
+      # Don't fail the entire setup process if verification fails
+      Rails.logger.error "[CnameSetupService] Error during domain verification: #{e.message}"
+    end
+  end
+
+  def update_business_status!
+    @business.update!(
+      status: 'cname_pending',
+      cname_monitoring_active: false,
+      cname_check_attempts: 0
+    )
+  end
+
+  def send_setup_instructions!
+    Rails.logger.info "[CnameSetupService] Sending setup instructions email"
+
+    # Find business owner/admin user
+    owner = @business.users.where(role: 'manager').first
+    
+    if owner
+      DomainMailer.setup_instructions(@business, owner).deliver_now
+      @business.update!(cname_setup_email_sent_at: Time.current)
+    else
+      Rails.logger.warn "[CnameSetupService] No owner found for business #{@business.id}, skipping email"
+    end
+  end
+
+  def send_monitoring_restarted_email!
+    owner = @business.users.where(role: 'manager').first
+    
+    if owner
+      DomainMailer.monitoring_restarted(@business, owner).deliver_now
+    end
+  end
+
+  def send_activation_success_email!
+    owner = @business.users.where(role: 'manager').first
+    
+    if owner
+      DomainMailer.activation_success(@business, owner).deliver_now
+    end
+  end
+
+  def start_monitoring!
+    Rails.logger.info "[CnameSetupService] Starting DNS monitoring"
+    
+    @business.start_cname_monitoring!
+    
+    # Queue the monitoring job to start in 1 minute (give time for email to be read)
+    DomainMonitoringJob.set(wait: 1.minute).perform_later(@business.id)
+  end
+
+  def can_restart_monitoring?
+    ['cname_pending', 'cname_monitoring', 'cname_timeout'].include?(@business.status) &&
+    @business.premium_tier? &&
+    @business.host_type_custom_domain?
+  end
+
+  def rollback_changes!
+    Rails.logger.info "[CnameSetupService] Rolling back changes"
+    
+    # Check if domain was added to Render before updating the flag
+    domain_was_added = @business.render_domain_added?
+    
+    # Reset business status
+    @business.update!(
+      status: 'active',
+      cname_monitoring_active: false,
+      cname_check_attempts: 0,
+      render_domain_added: false
+    )
+
+    # Try to remove domain from Render if it was added
+    if domain_was_added
+      begin
+        existing_domain = render_service.find_domain_by_name(@business.hostname)
+        if existing_domain
+          render_service.remove_domain(existing_domain['id'])
+        end
+      rescue => e
+        Rails.logger.warn "[CnameSetupService] Failed to remove domain during rollback: #{e.message}"
+      end
+    end
+  rescue => e
+    Rails.logger.error "[CnameSetupService] Rollback failed: #{e.message}"
+  end
+end
\ No newline at end of file
diff --git a/app/services/domain_health_checker.rb b/app/services/domain_health_checker.rb
new file mode 100644
index 0000000..c1c91a5
--- /dev/null
+++ b/app/services/domain_health_checker.rb
@@ -0,0 +1,247 @@
+# frozen_string_literal: true
+
+require 'net/http'
+require 'uri'
+
+# Service for checking if a custom domain is properly responding with HTTP 200
+# This ensures domains are not activated until they're actually serving content
+class DomainHealthChecker
+  class HealthCheckError < StandardError; end
+
+  # Timeout for HTTP requests (in seconds) - shorter for faster feedback
+  REQUEST_TIMEOUT = 3
+  
+  # Follow up to 3 redirects
+  MAX_REDIRECTS = 3
+
+  def initialize(domain_name)
+    @domain_name = domain_name.to_s.strip.downcase
+    @memoized_results = {}
+  end
+
+  # Check if domain responds with HTTP 200, with SSL-aware fallback
+  # @return [Hash] Result with health status and details
+  def check_health
+    # Return memoized result if available (within same request)
+    cache_key = "health_#{@domain_name}"
+    return @memoized_results[cache_key] if @memoized_results[cache_key]
+    
+    Rails.logger.info "[DomainHealthChecker] Checking health for: #{@domain_name}"
+
+    begin
+      result = {
+        domain: @domain_name,
+        healthy: false,
+        status_code: nil,
+        response_time: nil,
+        final_url: nil,
+        redirect_count: 0,
+        protocol_used: nil,
+        ssl_ready: false,
+        error: nil,
+        checked_at: Time.current
+      }
+
+      # Try HTTPS first, but fallback to HTTP if SSL isn't ready
+      start_time = Time.current
+      https_response = perform_request(build_url(@domain_name, 'https'))
+      
+      if https_response[:success] && https_response[:status_code] == 200
+        # HTTPS works - SSL is ready!
+        result.merge!(https_response.except(:success))
+        result[:healthy] = true
+        result[:protocol_used] = 'https'
+        result[:ssl_ready] = true
+        result[:response_time] = (Time.current - start_time).round(3)
+        Rails.logger.info "[DomainHealthChecker] Domain healthy via HTTPS: #{@domain_name} (#{result[:status_code]} in #{result[:response_time]}s)"
+      elsif https_response[:error]&.include?('SSL') || https_response[:error]&.include?('handshake')
+        # SSL error - certificate likely not ready yet, try HTTP
+        Rails.logger.info "[DomainHealthChecker] SSL not ready for #{@domain_name}, trying HTTP fallback: #{https_response[:error]}"
+        
+        http_response = perform_request(build_url(@domain_name, 'http'))
+        if http_response[:success] && http_response[:status_code] == 200
+          # HTTP works - domain is functional but SSL not ready
+          result.merge!(http_response.except(:success))
+          result[:healthy] = true
+          result[:protocol_used] = 'http'
+          result[:ssl_ready] = false
+          result[:response_time] = (Time.current - start_time).round(3)
+          Rails.logger.info "[DomainHealthChecker] Domain healthy via HTTP (SSL pending): #{@domain_name} (#{result[:status_code]} in #{result[:response_time]}s)"
+        else
+          # Both HTTPS and HTTP failed
+          result[:error] = "HTTPS failed (SSL): #{https_response[:error]}; HTTP failed: #{http_response[:error]}"
+          result[:response_time] = (Time.current - start_time).round(3)
+          Rails.logger.warn "[DomainHealthChecker] Both HTTPS and HTTP failed for #{@domain_name}: #{result[:error]}"
+        end
+      else
+        # HTTPS failed for non-SSL reasons
+        result.merge!(https_response.except(:success))
+        result[:protocol_used] = 'https'
+        result[:response_time] = (Time.current - start_time).round(3)
+        Rails.logger.warn "[DomainHealthChecker] HTTPS failed for #{@domain_name}: #{https_response[:error]}"
+      end
+
+      # Cache and return result
+      @memoized_results[cache_key] = result
+      result
+    rescue => e
+      Rails.logger.error "[DomainHealthChecker] Health check exception for #{@domain_name}: #{e.message}"
+      result = {
+        domain: @domain_name,
+        healthy: false,
+        status_code: nil,
+        response_time: nil,
+        final_url: nil,
+        redirect_count: 0,
+        protocol_used: nil,
+        ssl_ready: false,
+        error: "Health check exception: #{e.message}",
+        checked_at: Time.current
+      }
+      # Cache error result too to avoid repeated failures
+      @memoized_results[cache_key] = result
+      result
+    end
+  end
+
+  # Check both HTTP and HTTPS versions of the domain
+  # @return [Hash] Combined results for both protocols
+  def check_health_both_protocols
+    https_result = check_health_for_protocol('https')
+    http_result = check_health_for_protocol('http')
+
+    # Prefer HTTPS result, but accept HTTP if HTTPS fails
+    primary_result = https_result[:healthy] ? https_result : http_result
+    
+    {
+      domain: @domain_name,
+      healthy: https_result[:healthy] || http_result[:healthy],
+      primary_protocol: primary_result[:protocol],
+      https_result: https_result,
+      http_result: http_result,
+      checked_at: Time.current
+    }
+  end
+
+  # Get detailed health information for debugging
+  # @return [Hash] Comprehensive health information
+  def health_debug_info
+    info = {
+      domain: @domain_name,
+      checked_at: Time.current,
+      protocols: {}
+    }
+
+    ['https', 'http'].each do |protocol|
+      begin
+        result = check_health_for_protocol(protocol)
+        info[:protocols][protocol] = result
+      rescue => e
+        info[:protocols][protocol] = {
+          protocol: protocol,
+          healthy: false,
+          error: e.message
+        }
+      end
+    end
+
+    # Also include DNS resolution info
+    begin
+      addresses = Resolv.getaddresses(@domain_name)
+      info[:dns_resolution] = {
+        resolved: addresses.any?,
+        addresses: addresses
+      }
+    rescue => e
+      info[:dns_resolution] = {
+        resolved: false,
+        error: e.message
+      }
+    end
+
+    info
+  end
+
+  private
+
+  # Check health for a specific protocol
+  def check_health_for_protocol(protocol)
+    original_domain = @domain_name
+    @domain_name = original_domain # Reset in case it was modified
+    
+    url = "#{protocol}://#{@domain_name}"
+    result = perform_request(url)
+    result[:protocol] = protocol
+    result
+  ensure
+    @domain_name = original_domain # Ensure domain is reset
+  end
+
+  # Build URL with HTTPS as default
+  def build_url(domain, protocol = 'https')
+    "#{protocol}://#{domain}"
+  end
+
+  # Perform HTTP request with redirect following
+  def perform_request(url, redirect_count = 0)
+    return { success: false, error: 'Too many redirects' } if redirect_count > MAX_REDIRECTS
+
+    uri = URI(url)
+    
+    # Create HTTP client
+    http = Net::HTTP.new(uri.host, uri.port)
+    http.use_ssl = uri.scheme == 'https'
+    
+    # Set timeouts
+    http.open_timeout = REQUEST_TIMEOUT
+    http.read_timeout = REQUEST_TIMEOUT
+    
+    # Always use SSL verification for security
+    # If there are SSL issues, we'll catch them and return appropriate error messages
+    http.verify_mode = OpenSSL::SSL::VERIFY_PEER
+
+    # Create request
+    request = Net::HTTP::Get.new(uri)
+    
+    # Set User-Agent to identify our health check
+    request['User-Agent'] = 'BizBlasts-HealthChecker/1.0'
+    
+    # Set timeout-friendly headers
+    request['Accept'] = 'text/html,*/*'
+    request['Connection'] = 'close'
+
+    # Perform the request
+    response = http.request(request)
+
+    # Handle redirects
+    if response.is_a?(Net::HTTPRedirection)
+      location = response['Location']
+      if location.present?
+        # Handle relative redirects
+        redirect_uri = location.start_with?('http') ? location : URI.join(url, location).to_s
+        Rails.logger.debug "[DomainHealthChecker] Following redirect: #{url} -> #{redirect_uri}"
+        return perform_request(redirect_uri, redirect_count + 1)
+      end
+    end
+
+    {
+      success: true,
+      status_code: response.code.to_i,
+      final_url: url,
+      redirect_count: redirect_count,
+      headers: response.to_hash,
+      error: nil
+    }
+
+  rescue Net::ReadTimeout, Net::OpenTimeout => e
+    { success: false, error: "Request timeout: #{e.message}" }
+  rescue Net::HTTPError => e
+    { success: false, error: "HTTP error: #{e.message}" }
+  rescue SocketError => e
+    { success: false, error: "DNS/Socket error: #{e.message}" }
+  rescue OpenSSL::SSL::SSLError => e
+    { success: false, error: "SSL error: #{e.message}" }
+  rescue => e
+    { success: false, error: "Unexpected error: #{e.message}" }
+  end
+end
\ No newline at end of file
diff --git a/app/services/domain_monitoring_service.rb b/app/services/domain_monitoring_service.rb
new file mode 100644
index 0000000..3d2dfae
--- /dev/null
+++ b/app/services/domain_monitoring_service.rb
@@ -0,0 +1,319 @@
+# frozen_string_literal: true
+
+# Service for coordinating DNS monitoring and state transitions
+# Handles the periodic checking and status updates during CNAME setup
+class DomainMonitoringService
+  class MonitoringError < StandardError; end
+
+  def initialize(business)
+    @business = business
+    @dns_checker = CnameDnsChecker.new(@business.hostname)
+    @dual_verifier = DualDomainVerifier.new(@business.hostname)
+    @render_service = RenderDomainService.new
+    # Use the canonical domain for health checks based on business preference
+    @health_checker = DomainHealthChecker.new(canonical_domain_for_health_check)
+    @verification_strategy = DomainVerificationStrategy.new(@business)
+  end
+
+  # Perform a single monitoring check
+  # @return [Hash] Check result with next actions
+  def perform_check!
+    Rails.logger.info "[DomainMonitoringService] Checking domain: #{@business.hostname}"
+
+    begin
+      # Validate business is eligible for monitoring
+      validate_monitoring_state!
+
+      # Perform DNS verification (legacy single check)
+      dns_result = @dns_checker.verify_cname
+
+      # Perform comprehensive dual domain verification
+      dual_result = @dual_verifier.verify_both_domains
+
+      # Check Render API verification status
+      render_result = check_render_verification
+
+      # Trigger verification for any unverified domains
+      trigger_render_verification_if_needed
+
+      # Perform domain health check
+      health_result = check_domain_health
+
+      # Determine overall verification status using strategy pattern
+      verification_result = @verification_strategy.determine_status(dns_result, render_result, health_result)
+
+      # Update business state based on results
+      update_business_state!(verification_result)
+
+      # Return result for job scheduling decisions
+      {
+        success: true,
+        verified: verification_result[:verified],
+        should_continue: verification_result[:should_continue],
+        attempts: @business.cname_check_attempts,
+        max_attempts: 12,
+        dns_result: dns_result,
+        dual_verification: dual_result,
+        render_result: render_result,
+        health_result: health_result,
+        next_check_in: verification_result[:should_continue] ? '5 minutes' : 'stopped'
+      }
+
+    rescue => e
+      Rails.logger.error "[DomainMonitoringService] Monitoring check failed: #{e.message}"
+      
+      {
+        success: false,
+        error: e.message,
+        attempts: @business.cname_check_attempts,
+        should_continue: false
+      }
+    end
+  end
+
+  # Stop monitoring and update business status
+  # @param reason [String] Reason for stopping monitoring
+  def stop_monitoring!(reason = 'Manual stop')
+    Rails.logger.info "[DomainMonitoringService] Stopping monitoring for #{@business.hostname}: #{reason}"
+
+    @business.stop_cname_monitoring!
+  end
+
+  # Get detailed monitoring status
+  # @return [Hash] Comprehensive monitoring information
+  def monitoring_status
+    {
+      business_id: @business.id,
+      domain: @business.hostname,
+      status: @business.status,
+      monitoring_active: @business.cname_monitoring_active?,
+      attempts: @business.cname_check_attempts,
+      max_attempts: 12,
+      time_remaining: time_remaining_estimate,
+      can_check: @business.cname_due_for_check?,
+      last_updated: @business.updated_at
+    }
+  end
+
+  private
+
+  def validate_monitoring_state!
+    unless @business.cname_monitoring_active?
+      raise MonitoringError, 'Business monitoring is not active'
+    end
+
+    unless @business.cname_monitoring?
+      raise MonitoringError, 'Business is not in monitoring status'
+    end
+
+    if @business.cname_check_attempts >= 12
+      raise MonitoringError, 'Maximum monitoring attempts exceeded'
+    end
+  end
+
+  def check_render_verification
+    Rails.logger.debug "[DomainMonitoringService] Checking Render verification status"
+
+    begin
+      # Find the canonical domain that was actually added to Render
+      canonical_domain = canonical_domain_for_health_check
+      domain = @render_service.find_domain_by_name(canonical_domain)
+      
+      if domain.nil?
+        return {
+          found: false,
+          verified: false,
+          error: 'Domain not found in Render service'
+        }
+      end
+
+      # Try to verify domain
+      verification_result = @render_service.verify_domain(domain['id'])
+      
+      {
+        found: true,
+        verified: verification_result['verified'] == true,
+        domain_id: domain['id'],
+        verification_data: verification_result
+      }
+
+    rescue => e
+      Rails.logger.warn "[DomainMonitoringService] Render verification check failed: #{e.message}"
+      
+      {
+        found: false,
+        verified: false,
+        error: e.message
+      }
+    end
+  end
+
+  def check_domain_health
+    canonical_domain = canonical_domain_for_health_check
+    Rails.logger.debug "[DomainMonitoringService] Checking domain health status for canonical domain: #{canonical_domain}"
+
+    begin
+      # Perform health check
+      health_result = @health_checker.check_health
+
+      Rails.logger.info "[DomainMonitoringService] Health check result for #{canonical_domain}: healthy=#{health_result[:healthy]}, status=#{health_result[:status_code]}"
+      
+      health_result
+    rescue => e
+      Rails.logger.warn "[DomainMonitoringService] Domain health check failed for #{canonical_domain}: #{e.message}"
+      
+      {
+        healthy: false,
+        error: e.message,
+        checked_at: Time.current
+      }
+    end
+  end
+
+
+  def update_business_state!(verification_result)
+    @business.increment_cname_check!
+
+    # Update health status regardless of overall verification result
+    if verification_result[:health_verified]
+      @business.mark_domain_health_status!(true)
+    else
+      @business.mark_domain_health_status!(false)
+    end
+
+    if verification_result[:verified]
+      # Success - activate domain (health is already verified above)
+      Rails.logger.info "[DomainMonitoringService] Domain fully verified and healthy: #{@business.hostname}"
+      
+      @business.cname_success!
+      send_activation_success_email!
+      
+    elsif !verification_result[:should_continue]
+      # Timeout - stop monitoring and notify
+      Rails.logger.warn "[DomainMonitoringService] Domain verification timed out: #{@business.hostname}"
+      
+      @business.cname_timeout!
+      send_timeout_help_email!
+      
+    else
+      # Continue monitoring - just update the attempts counter
+      Rails.logger.debug "[DomainMonitoringService] Continuing monitoring: #{@business.hostname} (attempt #{@business.cname_check_attempts}/12) - Health: #{verification_result[:health_verified]}"
+    end
+  end
+
+  def send_activation_success_email!
+    owner = @business.users.where(role: 'manager').first
+    
+    if owner
+      DomainMailer.activation_success(@business, owner).deliver_now
+    else
+      Rails.logger.warn "[DomainMonitoringService] No owner found for success email"
+    end
+  end
+
+  def send_timeout_help_email!
+    owner = @business.users.where(role: 'manager').first
+    
+    if owner
+      DomainMailer.timeout_help(@business, owner).deliver_now
+    else
+      Rails.logger.warn "[DomainMonitoringService] No owner found for timeout email"
+    end
+  end
+
+  def time_remaining_estimate
+    return 'Complete' unless @business.cname_monitoring_active?
+    
+    attempts_left = 12 - @business.cname_check_attempts
+    minutes_left = attempts_left * 5
+    
+    if minutes_left <= 0
+      'Timeout'
+    elsif minutes_left < 60
+      "~#{minutes_left} minutes"
+    else
+      hours = minutes_left / 60
+      remaining_minutes = minutes_left % 60
+      "~#{hours}h #{remaining_minutes}m"
+    end
+  end
+
+  def trigger_render_verification_if_needed
+    Rails.logger.info "[DomainMonitoringService] Checking if Render verification needed"
+
+    begin
+      # Only check domains that were actually added to Render based on canonical preference
+      domains_to_check = determine_domains_added_to_render
+      
+      domains_to_check.each_with_index do |domain_name, index|
+        domain = @render_service.find_domain_by_name(domain_name)
+        if domain
+          # Check if domain needs verification
+          unless domain['verificationStatus'] == 'verified'
+            # Add delay for www domain to allow SSL provisioning
+            if domain_name.start_with?('www.') && index > 0
+              Rails.logger.info "[DomainMonitoringService] Waiting 15 seconds before verifying www domain: #{domain_name}"
+              sleep(15)
+            end
+
+            Rails.logger.info "[DomainMonitoringService] Triggering verification for unverified domain: #{domain_name}"
+            
+            begin
+              result = @render_service.verify_domain(domain['id'])
+              if result['verified']
+                Rails.logger.info "[DomainMonitoringService] ✅ Domain verified successfully: #{domain_name}"
+              else
+                Rails.logger.info "[DomainMonitoringService] ⚠️ Domain verification still pending: #{domain_name}"
+              end
+            rescue => e
+              Rails.logger.warn "[DomainMonitoringService] Domain verification failed for #{domain_name}: #{e.message}"
+            end
+          else
+            Rails.logger.debug "[DomainMonitoringService] Domain already verified: #{domain_name}"
+          end
+        end
+      end
+    rescue => e
+      Rails.logger.error "[DomainMonitoringService] Error during verification check: #{e.message}"
+    end
+  end
+
+  private
+
+  # Determine which domain should be used for health checks based on canonical preference
+  def canonical_domain_for_health_check
+    apex_domain = @business.hostname.sub(/^www\./, '')
+    
+    case @business.canonical_preference
+    when 'www'
+      # Health check the www version since that's the canonical domain
+      "www.#{apex_domain}"
+    when 'apex'
+      # Health check the apex version since that's the canonical domain  
+      apex_domain
+    else
+      # Fallback to stored hostname
+      Rails.logger.warn "[DomainMonitoringService] Unknown canonical preference: #{@business.canonical_preference}"
+      @business.hostname
+    end
+  end
+
+  # Determine which domains were actually added to Render based on canonical preference
+  # This should match the same logic as CnameSetupService#determine_domains_to_add
+  def determine_domains_added_to_render
+    apex_domain = @business.hostname.sub(/^www\./, '')
+    www_domain = "www.#{apex_domain}"
+    
+    # Render automatically creates a sibling redirect domain (e.g. adding
+    # `www.example.com` also creates `example.com` and vice-versa).  If we only
+    # verify the canonical domain, the sibling remains stuck in a *Needs
+    # Verification* state until someone presses the *Verify* button manually in
+    # the Render dashboard.  That manual step is what the user reported.
+
+    # To avoid the manual step we always attempt to verify **both** the apex and
+    # www variants.  If one of them was not actually created Render will return
+    # 404, which we gracefully handle (find_domain_by_name returns nil → we skip).
+
+    [apex_domain, www_domain]
+  end
+end
\ No newline at end of file
diff --git a/app/services/domain_removal_service.rb b/app/services/domain_removal_service.rb
new file mode 100644
index 0000000..69ba46a
--- /dev/null
+++ b/app/services/domain_removal_service.rb
@@ -0,0 +1,227 @@
+# frozen_string_literal: true
+
+# Service for handling custom domain removal and downgrade scenarios
+# Handles cleanup when businesses downgrade from Premium or disable custom domains
+class DomainRemovalService
+  class RemovalError < StandardError; end
+
+  def initialize(business)
+    @business = business
+    @render_service = RenderDomainService.new
+  end
+
+  # Complete domain removal - revert to subdomain hosting
+  # @return [Hash] Result with success status and details
+  def remove_domain!
+    Rails.logger.info "[DomainRemovalService] Starting domain removal for business #{@business.id}"
+
+    begin
+      # Step 1: Stop any active monitoring
+      stop_monitoring_if_active
+
+      # Step 2: Remove domain from Render
+      remove_from_render
+
+      # Step 3: Update business configuration
+      revert_to_subdomain
+
+      # Step 4: Send confirmation email
+      send_removal_confirmation
+
+      Rails.logger.info "[DomainRemovalService] Domain removal completed for #{@business.id}"
+
+      {
+        success: true,
+        message: 'Custom domain removed successfully',
+        business_id: @business.id,
+        reverted_to: subdomain_url,
+        actions_taken: [
+          'Stopped DNS monitoring',
+          'Removed domain from Render service',
+          'Reverted to subdomain hosting',
+          'Sent confirmation email'
+        ]
+      }
+
+    rescue => e
+      Rails.logger.error "[DomainRemovalService] Domain removal failed: #{e.message}"
+      
+      {
+        success: false,
+        error: e.message,
+        business_id: @business.id
+      }
+    end
+  end
+
+  # Handle tier downgrade - only remove if going from Premium to lower tier
+  # @param new_tier [String] The new tier being assigned
+  # @return [Hash] Result with success status
+  def handle_tier_downgrade!(new_tier)
+    Rails.logger.info "[DomainRemovalService] Handling tier downgrade to #{new_tier} for business #{@business.id}"
+
+    # Only remove custom domain if downgrading from premium and currently has custom domain
+    # Note: Business model already ensures this is only called for appropriate tier downgrades
+    if @business.host_type_custom_domain? && new_tier != 'premium'
+      Rails.logger.info "[DomainRemovalService] Removing custom domain due to tier downgrade"
+      remove_domain!
+    else
+      Rails.logger.info "[DomainRemovalService] No domain removal needed for tier change"
+      {
+        success: true,
+        message: 'No domain changes needed for this tier change',
+        business_id: @business.id
+      }
+    end
+  end
+
+  # Disable custom domain temporarily (keep domain in Render but stop serving)
+  # @return [Hash] Result with success status
+  def disable_domain!
+    Rails.logger.info "[DomainRemovalService] Disabling domain for business #{@business.id}"
+
+    begin
+      # Stop monitoring but keep domain configuration
+      stop_monitoring_if_active
+
+      # Update status but keep hostname and domain data
+      @business.update!(
+        status: 'inactive',
+        cname_monitoring_active: false
+      )
+
+      {
+        success: true,
+        message: 'Custom domain disabled successfully',
+        business_id: @business.id,
+        note: 'Domain configuration preserved for re-enabling'
+      }
+
+    rescue => e
+      Rails.logger.error "[DomainRemovalService] Domain disable failed: #{e.message}"
+      
+      {
+        success: false,
+        error: e.message,
+        business_id: @business.id
+      }
+    end
+  end
+
+  # Get removal status and impact preview
+  # @return [Hash] Information about what removal would affect
+  def removal_preview
+    {
+      business_id: @business.id,
+      current_domain: @business.hostname,
+      current_status: @business.status,
+      will_revert_to: subdomain_url,
+      monitoring_active: @business.cname_monitoring_active?,
+      render_domain_exists: check_render_domain_exists,
+      impact: {
+        domain_access: "#{@business.hostname} will no longer work",
+        new_access: "Site will be accessible at #{subdomain_url}",
+        redirects: "Automatic redirects will be removed",
+        ssl: "SSL certificate for custom domain will be removed",
+        email_links: "All email links will use subdomain"
+      }
+    }
+  end
+
+  private
+
+  def stop_monitoring_if_active
+    if @business.cname_monitoring_active?
+      Rails.logger.info "[DomainRemovalService] Stopping active monitoring"
+      @business.stop_cname_monitoring!
+    end
+  end
+
+  def remove_from_render
+    return unless @business.render_domain_added?
+    
+    if @business.hostname.blank?
+      Rails.logger.info "[DomainRemovalService] Skipping domain removal - hostname is blank for business #{@business.id}"
+      return
+    end
+
+    Rails.logger.info "[DomainRemovalService] Removing domains from Render service (apex + www)"
+
+    apex_domain = @business.hostname.sub(/^www\./, '')
+    www_domain  = "www.#{apex_domain}"
+
+    [apex_domain, www_domain].uniq.each do |domain_name|
+      begin
+        domain = @render_service.find_domain_by_name(domain_name)
+
+        if domain
+          @render_service.remove_domain(domain['id'])
+          Rails.logger.info "[DomainRemovalService] Removed domain from Render: #{domain_name}"
+        else
+          Rails.logger.info "[DomainRemovalService] Domain not present in Render (skipped): #{domain_name}"
+        end
+      rescue => e
+        Rails.logger.warn "[DomainRemovalService] Failed to remove #{domain_name}: #{e.message}"
+      end
+    end
+  end
+
+  def revert_to_subdomain
+    Rails.logger.info "[DomainRemovalService] Reverting business to subdomain hosting"
+
+    # Ensure subdomain field is populated
+    subdomain_value = @business.subdomain.presence || @business.hostname.presence || "business-#{@business.id}"
+
+    @business.update!(
+      host_type: 'subdomain',
+      status: 'active',
+      hostname: subdomain_value, # Keep hostname field populated with subdomain for compatibility
+      subdomain: subdomain_value, # Ensure subdomain field is also set for consistency
+      cname_monitoring_active: false,
+      cname_check_attempts: 0,
+      cname_setup_email_sent_at: nil,
+      render_domain_added: false
+    )
+
+    Rails.logger.info "[DomainRemovalService] Business reverted to subdomain: #{subdomain_value}"
+  end
+
+  def send_removal_confirmation
+    owner = @business.users.where(role: 'manager').first
+    
+    if owner
+      # Would create DomainMailer.domain_removed email template
+      Rails.logger.info "[DomainRemovalService] Would send domain removal confirmation to #{owner.email}"
+      # DomainMailer.domain_removed(@business, owner).deliver_now
+    else
+      Rails.logger.warn "[DomainRemovalService] No owner found for removal confirmation email"
+    end
+  end
+
+  def subdomain_url
+    if @business.subdomain.present?
+      subdomain = @business.subdomain
+    elsif @business.hostname.present?
+      subdomain = @business.hostname
+    else
+      subdomain = "business-#{@business.id}"
+    end
+
+    if Rails.env.production?
+      "https://#{subdomain}.bizblasts.com"
+    else
+      "http://#{subdomain}.lvh.me:3000"
+    end
+  end
+
+  def check_render_domain_exists
+    return false unless @business.hostname.present?
+
+    begin
+      domain = @render_service.find_domain_by_name(@business.hostname)
+      domain.present?
+    rescue
+      false
+    end
+  end
+end
\ No newline at end of file
diff --git a/app/services/domain_verification_strategy.rb b/app/services/domain_verification_strategy.rb
new file mode 100644
index 0000000..a4b5f4c
--- /dev/null
+++ b/app/services/domain_verification_strategy.rb
@@ -0,0 +1,224 @@
+# frozen_string_literal: true
+
+# Strategy pattern for domain verification status determination
+# Encapsulates the complex logic for determining overall verification status
+# based on DNS, Render, and health check results
+class DomainVerificationStrategy
+  def initialize(business)
+    @business = business
+  end
+
+  # Determine verification status based on all check results
+  # @param dns_result [Hash] DNS verification result
+  # @param render_result [Hash] Render verification result  
+  # @param health_result [Hash] Health check result
+  # @return [Hash] Verification status with next actions
+  def determine_status(dns_result, render_result, health_result)
+    # Extract verification flags
+    dns_verified = dns_result[:verified] == true
+    render_verified = render_result[:verified] == true
+    health_verified = health_result[:healthy] == true
+    ssl_ready = health_result[:ssl_ready] == true
+
+    # For full verification, we need DNS + Render + Health with SSL ready
+    fully_verified = dns_verified && render_verified && health_verified && ssl_ready
+
+    # Determine overall status using policy rules
+    verification_policy = create_verification_policy(dns_verified, render_verified, health_verified, ssl_ready)
+    
+    {
+      verified: verification_policy.verified?,
+      should_continue: verification_policy.should_continue?,
+      dns_verified: dns_verified,
+      render_verified: render_verified,
+      health_verified: health_verified,
+      ssl_ready: ssl_ready,
+      status_reason: verification_policy.status_reason
+    }
+  end
+
+  private
+
+  def create_verification_policy(dns_verified, render_verified, health_verified, ssl_ready)
+    # Check for full success condition (all verified including SSL)
+    if dns_verified && render_verified && health_verified && ssl_ready
+      return SuccessVerificationPolicy.new
+    end
+
+    # Check for SSL-pending condition (everything works but SSL not ready yet)
+    if dns_verified && render_verified && health_verified && !ssl_ready
+      return SslPendingVerificationPolicy.new
+    end
+
+    # Check for timeout condition
+    if @business.cname_check_attempts >= 11  # Next increment will be 12
+      return TimeoutVerificationPolicy.new
+    end
+
+    # Return appropriate in-progress policy based on current state
+    InProgressVerificationPolicy.new(dns_verified, render_verified, health_verified, ssl_ready)
+  end
+end
+
+# Base class for verification policies
+class VerificationPolicy
+  def verified?
+    false
+  end
+
+  def should_continue?
+    true
+  end
+
+  def status_reason
+    'Checking domain verification'
+  end
+end
+
+# Policy for successful verification (all checks passed)
+class SuccessVerificationPolicy < VerificationPolicy
+  def verified?
+    true
+  end
+
+  def should_continue?
+    false
+  end
+
+  def status_reason
+    'Domain fully verified and responding with HTTPS (SSL ready)'
+  end
+end
+
+# Policy for SSL pending (domain works but SSL certificate not ready)
+class SslPendingVerificationPolicy < VerificationPolicy
+  def verified?
+    false  # Don't activate until SSL is ready
+  end
+
+  def should_continue?
+    true   # Keep monitoring for SSL readiness
+  end
+
+  def status_reason
+    'Domain responding via HTTP - waiting for SSL certificate provisioning to complete'
+  end
+end
+
+# Policy for timeout (maximum attempts reached)
+class TimeoutVerificationPolicy < VerificationPolicy
+  def verified?
+    false
+  end
+
+  def should_continue?
+    false
+  end
+
+  def status_reason
+    'Maximum verification attempts reached'
+  end
+end
+
+# Policy for in-progress verification (continue monitoring)
+class InProgressVerificationPolicy < VerificationPolicy
+  def initialize(dns_verified, render_verified, health_verified, ssl_ready = false)
+    @dns_verified = dns_verified
+    @render_verified = render_verified
+    @health_verified = health_verified
+    @ssl_ready = ssl_ready
+  end
+
+  def verified?
+    false
+  end
+
+  def should_continue?
+    true
+  end
+
+  def status_reason
+    # Generate specific status message based on which checks have passed
+    case verification_state
+    # SSL not ready cases
+    when :all_pending
+      'Waiting for CNAME record, Render verification, and health check'
+    when :dns_only
+      'DNS configured, waiting for Render verification and health check'
+    when :render_only
+      'Render verified, waiting for DNS and health check'
+    when :health_only
+      'Health verified, waiting for DNS and Render verification'
+    when :dns_render
+      'DNS and Render verified, waiting for domain to return HTTP 200'
+    when :dns_health
+      'DNS and health verified, waiting for Render verification'
+    when :render_health
+      'Render and health verified, waiting for DNS propagation'
+    when :dns_render_http
+      'Domain working via HTTP - SSL certificate provisioning in progress'
+    
+    # SSL ready cases
+    when :ssl_only
+      'HTTPS working, waiting for DNS and Render verification'
+    when :dns_ssl
+      'DNS and HTTPS configured, waiting for Render verification'
+    when :render_ssl
+      'Render and HTTPS verified, waiting for DNS propagation'
+    when :health_ssl
+      'HTTPS working, waiting for DNS and Render verification'
+    when :dns_render_ssl
+      'DNS and Render verified, HTTPS working - finalizing activation'
+    when :dns_health_ssl
+      'DNS and HTTPS working, waiting for Render verification'
+    when :render_health_ssl
+      'Render and HTTPS verified, waiting for DNS propagation'
+    else
+      'Domain configuration is in progress'
+    end
+  end
+
+  private
+
+  def verification_state
+    case [@dns_verified, @render_verified, @health_verified, @ssl_ready]
+    # SSL not ready cases
+    when [false, false, false, false]
+      :all_pending
+    when [true, false, false, false]
+      :dns_only
+    when [false, true, false, false]
+      :render_only
+    when [false, false, true, false]
+      :health_only
+    when [true, true, false, false]
+      :dns_render
+    when [true, false, true, false]
+      :dns_health
+    when [false, true, true, false]
+      :render_health
+    when [true, true, true, false]
+      :dns_render_http  # Everything works but SSL pending
+    
+    # SSL ready cases (health check passed with HTTPS)
+    when [false, false, false, true]
+      :ssl_only
+    when [true, false, false, true]
+      :dns_ssl
+    when [false, true, false, true]
+      :render_ssl
+    when [false, false, true, true]
+      :health_ssl
+    when [true, true, false, true]
+      :dns_render_ssl
+    when [true, false, true, true]
+      :dns_health_ssl
+    when [false, true, true, true]
+      :render_health_ssl
+    # Note: [true, true, true, true] is handled by SuccessVerificationPolicy
+    
+    else
+      :unknown
+    end
+  end
+end
diff --git a/app/services/dual_domain_verifier.rb b/app/services/dual_domain_verifier.rb
new file mode 100644
index 0000000..aa5b802
--- /dev/null
+++ b/app/services/dual_domain_verifier.rb
@@ -0,0 +1,188 @@
+# frozen_string_literal: true
+
+# Service for verifying both apex domain (A record) and www subdomain (CNAME record)
+# This provides comprehensive domain ownership verification for custom domains
+class DualDomainVerifier
+  def initialize(domain_name)
+    @domain_name = domain_name.to_s.strip.downcase
+    @apex_domain = @domain_name.start_with?('www.') ? @domain_name.sub('www.', '') : @domain_name
+    @www_domain = "www.#{@apex_domain}"
+    @dns_checker = CnameDnsChecker.new(@domain_name)
+  end
+
+  # Verify both apex (A record) and www (CNAME record) configurations
+  # @return [Hash] Comprehensive verification results
+  def verify_both_domains
+    Rails.logger.info "[DualDomainVerifier] Verifying both apex and www for: #{@domain_name}"
+
+    begin
+      # Check apex domain A record
+      apex_result = verify_apex_domain
+
+      # Check www domain CNAME record  
+      www_result = verify_www_domain
+
+      # Determine overall verification status
+      overall_verified = apex_result[:verified] && www_result[:verified]
+      
+      result = {
+        domain: @domain_name,
+        overall_verified: overall_verified,
+        apex_domain: {
+          domain: @apex_domain,
+          verified: apex_result[:verified],
+          record_type: 'A',
+          target: apex_result[:target],
+          expected_target: apex_result[:expected_target],
+          error: apex_result[:error]
+        },
+        www_domain: {
+          domain: @www_domain,
+          verified: www_result[:verified],
+          record_type: 'CNAME',
+          target: www_result[:target],
+          expected_target: www_result[:expected_target],
+          error: www_result[:error]
+        },
+        checked_at: Time.current
+      }
+
+      if overall_verified
+        Rails.logger.info "[DualDomainVerifier] ✅ Both domains verified successfully"
+      else
+        missing = []
+        missing << "apex A record" unless apex_result[:verified]
+        missing << "www CNAME record" unless www_result[:verified]
+        Rails.logger.warn "[DualDomainVerifier] ❌ Missing: #{missing.join(', ')}"
+      end
+
+      result
+
+    rescue => e
+      Rails.logger.error "[DualDomainVerifier] Verification failed: #{e.message}"
+      {
+        domain: @domain_name,
+        overall_verified: false,
+        apex_domain: { verified: false, error: e.message },
+        www_domain: { verified: false, error: e.message },
+        error: e.message,
+        checked_at: Time.current
+      }
+    end
+  end
+
+  # Get detailed status for UI display
+  # @return [Hash] User-friendly status information
+  def status_summary
+    result = verify_both_domains
+    
+    {
+      overall_status: result[:overall_verified] ? 'verified' : 'incomplete',
+      message: generate_status_message(result),
+      apex_status: result[:apex_domain][:verified] ? 'verified' : 'missing',
+      www_status: result[:www_domain][:verified] ? 'verified' : 'missing',
+      next_steps: generate_next_steps(result)
+    }
+  end
+
+  private
+
+  # Verify apex domain A record points to Render IP
+  def verify_apex_domain
+    Rails.logger.info "[DualDomainVerifier] Checking A record for: #{@apex_domain}"
+    
+    resolver = Resolv::DNS.new
+    
+    begin
+      a_records = resolver.getresources(@apex_domain, Resolv::DNS::Resource::IN::A)
+      a_ips = a_records.map(&:address).map(&:to_s)
+      
+      render_ip = CnameDnsChecker::RENDER_APEX_IP
+      verified = a_ips.include?(render_ip)
+      
+      {
+        verified: verified,
+        target: a_ips.first,
+        expected_target: render_ip,
+        error: verified ? nil : "A record should point to #{render_ip}"
+      }
+    rescue => e
+      {
+        verified: false,
+        target: nil,
+        expected_target: CnameDnsChecker::RENDER_APEX_IP,
+        error: "DNS lookup failed: #{e.message}"
+      }
+    ensure
+      resolver&.close
+    end
+  end
+
+  # Verify www subdomain CNAME record points to Render target
+  def verify_www_domain
+    Rails.logger.info "[DualDomainVerifier] Checking CNAME record for: #{@www_domain}"
+    
+    resolver = Resolv::DNS.new
+    
+    begin
+      cname_records = resolver.getresources(@www_domain, Resolv::DNS::Resource::IN::CNAME)
+      
+      if cname_records.empty?
+        return {
+          verified: false,
+          target: nil,
+          expected_target: CnameDnsChecker::RENDER_CNAME_TARGET,
+          error: "No CNAME record found"
+        }
+      end
+      
+      cname_target = cname_records.first.name.to_s.chomp('.')
+      render_target = CnameDnsChecker::RENDER_CNAME_TARGET
+      verified = cname_target.downcase == render_target.downcase
+      
+      {
+        verified: verified,
+        target: cname_target,
+        expected_target: render_target,
+        error: verified ? nil : "CNAME should point to #{render_target}"
+      }
+    rescue => e
+      {
+        verified: false,
+        target: nil,
+        expected_target: CnameDnsChecker::RENDER_CNAME_TARGET,
+        error: "DNS lookup failed: #{e.message}"
+      }
+    ensure
+      resolver&.close
+    end
+  end
+
+  # Generate user-friendly status message
+  def generate_status_message(result)
+    if result[:overall_verified]
+      "Both apex domain and www subdomain are correctly configured"
+    elsif result[:apex_domain][:verified] && !result[:www_domain][:verified]
+      "Apex domain (A record) verified, www subdomain (CNAME) needs configuration"
+    elsif !result[:apex_domain][:verified] && result[:www_domain][:verified]
+      "www subdomain (CNAME) verified, apex domain (A record) needs configuration"
+    else
+      "Both A record and CNAME record need configuration"
+    end
+  end
+
+  # Generate next steps for incomplete configurations
+  def generate_next_steps(result)
+    steps = []
+    
+    unless result[:apex_domain][:verified]
+      steps << "Add A record: @ → #{result[:apex_domain][:expected_target]}"
+    end
+    
+    unless result[:www_domain][:verified]
+      steps << "Add CNAME record: www → #{result[:www_domain][:expected_target]}"
+    end
+    
+    steps.empty? ? ["Domain configuration is complete!"] : steps
+  end
+end
diff --git a/app/services/render_domain_service.rb b/app/services/render_domain_service.rb
new file mode 100644
index 0000000..846e41c
--- /dev/null
+++ b/app/services/render_domain_service.rb
@@ -0,0 +1,321 @@
+# frozen_string_literal: true
+
+require 'net/http'
+require 'json'
+
+# Service for interacting with Render.com Custom Domain API
+# Provides methods to add, verify, list, and remove custom domains
+class RenderDomainService
+  class RenderApiError < StandardError; end
+  class DomainNotFoundError < RenderApiError; end
+  class InvalidCredentialsError < RenderApiError; end
+  class RateLimitError < RenderApiError; end
+
+  API_BASE_URL = 'https://api.render.com/v1'
+  
+  # Retry configuration for rate limiting (429 responses)
+  MAX_RETRIES = 3
+  BASE_DELAY = 2 # seconds
+  MAX_DELAY = 60 # seconds
+
+  def initialize
+    @api_key = ENV['RENDER_API_KEY']
+    @service_id = ENV['RENDER_SERVICE_ID']
+    
+    raise InvalidCredentialsError, 'RENDER_API_KEY not configured' if @api_key.blank?
+    raise InvalidCredentialsError, 'RENDER_SERVICE_ID not configured' if @service_id.blank?
+  end
+
+  # Add a custom domain to the Render service
+  # @param domain_name [String] The domain name to add (e.g., 'example.com')
+  # @return [Hash] Response from Render API with domain details
+  def add_domain(domain_name)
+    Rails.logger.info "[RenderDomainService] Adding domain: #{domain_name}"
+    
+    url = URI("#{API_BASE_URL}/services/#{@service_id}/custom-domains")
+    
+    response = make_request(url, :post, { name: domain_name })
+    
+    if response.code.start_with?('2')
+      begin
+        domain_data = JSON.parse(response.body)
+      rescue JSON::ParserError
+        raise RenderApiError, "Unexpected Render response format: #{response.body.inspect}"
+      end
+
+      # Render sometimes returns an Array of domain objects (apex + www). Handle both.
+      if domain_data.is_a?(Array)
+        names = domain_data.map { |d| d.is_a?(Hash) ? d['name'] : d }.compact
+        domain_data = domain_data.find { |d| d.is_a?(Hash) && d['name'] == domain_name }
+        unless domain_data
+          raise RenderApiError, "Render returned domains that do not match requested '#{domain_name}': #{names.inspect}"
+        end
+      end
+
+      unless domain_data.is_a?(Hash) && domain_data['id']
+        raise RenderApiError, "Missing domain id in Render response: #{domain_data.inspect}"
+      end
+
+      Rails.logger.info "[RenderDomainService] Domain added successfully: #{domain_data['id']}"
+      domain_data
+    else
+      error_msg = extract_error_message(response)
+      Rails.logger.error "[RenderDomainService] Failed to add domain: #{error_msg}"
+      raise RenderApiError, "Failed to add domain: #{error_msg}"
+    end
+  end
+
+  # Verify domain DNS configuration
+  # @param domain_id [String] The Render domain ID
+  # @return [Hash] Verification status and details
+  def verify_domain(domain_id)
+    Rails.logger.info "[RenderDomainService] Verifying domain: #{domain_id}"
+    
+    url = URI("#{API_BASE_URL}/services/#{@service_id}/custom-domains/#{domain_id}/verify")
+    
+    response = make_request(url, :post, {})
+    
+    if response.code.start_with?('2')
+      body = response.body.to_s
+      if body.strip.empty?
+        # Render responds with 204/empty when the verification job was *queued*.
+        # We must re-fetch the domain object to know the real status; otherwise we
+        # incorrectly assume it is verified and skip further checks.
+
+        domain_raw = find_domain_by_id(domain_id)
+        domain      = normalize_domain_data(domain_raw)
+        verified = domain && (domain['verificationStatus'] == 'verified' || domain['verified'] == true)
+        queued_response = {
+          'verified' => verified,
+          'queued'    => true,
+          'domain'    => domain_raw
+        }
+        Rails.logger.info "[RenderDomainService] Domain verification queued – verified=#{queued_response['verified']}"
+        queued_response
+      else
+        verification_data = JSON.parse(body)
+        Rails.logger.info "[RenderDomainService] Domain verification result: #{verification_data['verified']}"
+        verification_data
+      end
+    else
+      error_msg = extract_error_message(response)
+      Rails.logger.error "[RenderDomainService] Failed to verify domain: #{error_msg}"
+      raise RenderApiError, "Failed to verify domain: #{error_msg}"
+    end
+  end
+
+  # List all custom domains for the service
+  # @return [Array<Hash>] Array of domain objects
+  def list_domains
+    Rails.logger.info "[RenderDomainService] Listing domains"
+    
+    url = URI("#{API_BASE_URL}/services/#{@service_id}/custom-domains")
+    
+    response = make_request(url, :get)
+    
+    if response.code.start_with?('2')
+      raw = JSON.parse(response.body)
+      # Newer Render responses return an array of objects with a `customDomain`
+      # payload plus a `cursor`. Normalize to an array of plain domain hashes.
+      domains = if raw.is_a?(Array) && raw.first.is_a?(Hash) && raw.first.key?('customDomain')
+                  raw.map { |item| item['customDomain'] }.compact
+                else
+                  raw
+                end
+      Rails.logger.info "[RenderDomainService] Found #{domains.length} domains"
+      domains
+    else
+      error_msg = extract_error_message(response)
+      Rails.logger.error "[RenderDomainService] Failed to list domains: #{error_msg}"
+      raise RenderApiError, "Failed to list domains: #{error_msg}"
+    end
+  end
+
+  # Remove a custom domain from the service
+  # @param domain_id [String] The Render domain ID
+  # @return [Boolean] True if successful
+  def remove_domain(domain_id)
+    Rails.logger.info "[RenderDomainService] Removing domain: #{domain_id}"
+    
+    url = URI("#{API_BASE_URL}/services/#{@service_id}/custom-domains/#{domain_id}")
+    
+    response = make_request(url, :delete)
+    
+    if response.code.start_with?('2')
+      Rails.logger.info "[RenderDomainService] Domain removed successfully"
+      true
+    else
+      error_msg = extract_error_message(response)
+      Rails.logger.error "[RenderDomainService] Failed to remove domain: #{error_msg}"
+      raise RenderApiError, "Failed to remove domain: #{error_msg}"
+    end
+  end
+
+  # Find domain by name in the service's custom domains
+  # @param domain_name [String] The domain name to find
+  # @return [Hash, nil] Domain object if found, nil otherwise
+  def find_domain_by_name(domain_name)
+    domains = list_domains
+    # Handle either plain domain hashes or nested structures just in case
+    domains.find do |domain|
+      if domain.is_a?(Hash) && domain.key?('name')
+        domain['name'] == domain_name
+      elsif domain.is_a?(Hash) && domain.key?('customDomain')
+        domain['customDomain'].is_a?(Hash) && domain['customDomain']['name'] == domain_name
+      else
+        false
+      end
+    end
+  end
+
+  # Fetch a domain by its Render ID
+  # @param domain_id [String]
+  # @return [Hash, nil]
+  def find_domain_by_id(domain_id)
+    domains = list_domains
+    domains.find { |d| d.is_a?(Hash) && (d['id'] == domain_id || (d['customDomain'].is_a?(Hash) && d['customDomain']['id'] == domain_id)) }
+  end
+
+  # Normalize Render domain payloads (new API wraps data under `customDomain`)
+  # @param domain [Hash]
+  # @return [Hash,nil] flat hash with id/name/verificationStatus etc. or nil
+  def normalize_domain_data(domain)
+    return nil unless domain.is_a?(Hash)
+
+    if domain.key?('name')
+      domain
+    elsif domain.key?('customDomain') && domain['customDomain'].is_a?(Hash)
+      domain['customDomain']
+    else
+      domain
+    end
+  end
+
+  # Check if domain exists and is verified
+  # @param domain_name [String] The domain name to check
+  # @return [Hash] Status information
+  def domain_status(domain_name)
+    domain = find_domain_by_name(domain_name)
+    
+    if domain.nil?
+      { exists: false, verified: false, domain_id: nil }
+    else
+      data = domain.is_a?(Hash) && domain.key?('name') ? domain : domain['customDomain']
+      {
+        exists: true,
+        verified: data['verificationStatus'] ? data['verificationStatus'] == 'verified' : (data['verified'] == true),
+        domain_id: data['id'],
+        domain_data: data
+      }
+    end
+  end
+
+  private
+
+  # Make HTTP request to Render API with retry logic for rate limiting
+  # @param url [URI] The request URL
+  # @param method [Symbol] HTTP method (:get, :post, :delete)
+  # @param body [Hash, nil] Request body for POST requests
+  # @return [Net::HTTPResponse] HTTP response
+  def make_request(url, method, body = nil)
+    retry_count = 0
+    
+    loop do
+      begin
+        response = execute_request(url, method, body)
+        
+        # Handle rate limiting (429) with exponential backoff
+        if response.code == '429'
+          if retry_count < MAX_RETRIES
+            delay = calculate_retry_delay(retry_count, response)
+            Rails.logger.warn "[RenderDomainService] Rate limited (429), retrying in #{delay}s (attempt #{retry_count + 1}/#{MAX_RETRIES + 1})"
+            sleep(delay)
+            retry_count += 1
+            next
+          else
+            Rails.logger.error "[RenderDomainService] Max retries exceeded for rate limit"
+            raise RateLimitError, "Rate limit exceeded after #{MAX_RETRIES} retries"
+          end
+        end
+        
+        # Log response status
+        Rails.logger.debug "[RenderDomainService] Response: #{response.code}"
+        return response
+        
+      rescue RateLimitError
+        # Re-raise rate limit errors without wrapping them
+        raise
+      rescue => e
+        Rails.logger.error "[RenderDomainService] Request failed: #{e.message}"
+        raise RenderApiError, "Request failed: #{e.message}"
+      end
+    end
+  end
+
+  # Execute a single HTTP request
+  # @param url [URI] The request URL
+  # @param method [Symbol] HTTP method (:get, :post, :delete)
+  # @param body [Hash, nil] Request body for POST requests
+  # @return [Net::HTTPResponse] HTTP response
+  def execute_request(url, method, body = nil)
+    http = Net::HTTP.new(url.host, url.port)
+    http.use_ssl = true
+
+    case method
+    when :get
+      request = Net::HTTP::Get.new(url)
+    when :post
+      request = Net::HTTP::Post.new(url)
+      if body
+        request.body = body.to_json
+        request['Content-Type'] = 'application/json'
+      end
+    when :delete
+      request = Net::HTTP::Delete.new(url)
+    else
+      raise ArgumentError, "Unsupported HTTP method: #{method}"
+    end
+
+    # Add authentication header
+    request['Accept'] = 'application/json'
+    request['Authorization'] = "Bearer #{@api_key}"
+
+    # Log request (without sensitive data)
+    Rails.logger.debug "[RenderDomainService] #{method.upcase} #{url.path}"
+
+    http.request(request)
+  end
+
+  # Calculate retry delay using exponential backoff with jitter
+  # @param retry_count [Integer] Current retry attempt (0-based)
+  # @param response [Net::HTTPResponse] The 429 response (may contain Retry-After header)
+  # @return [Float] Delay in seconds
+  def calculate_retry_delay(retry_count, response)
+    # Check for Retry-After header first
+    if response['Retry-After']
+      retry_after = response['Retry-After'].to_i
+      return [retry_after, MAX_DELAY].min if retry_after > 0
+    end
+    
+    # Use exponential backoff with jitter
+    base_delay = BASE_DELAY * (2 ** retry_count)
+    jitter = rand * base_delay * 0.1 # Add up to 10% jitter
+    delay = base_delay + jitter
+    
+    [delay, MAX_DELAY].min
+  end
+
+  # Extract error message from API response
+  # @param response [Net::HTTPResponse] HTTP response
+  # @return [String] Error message
+  def extract_error_message(response)
+    return "HTTP #{response.code}" if response.body.blank?
+
+    begin
+      error_data = JSON.parse(response.body)
+      error_data['message'] || error_data['error'] || "HTTP #{response.code}"
+    rescue JSON::ParserError
+      "HTTP #{response.code}: #{response.body.truncate(100)}"
+    end
+  end
+end
\ No newline at end of file
diff --git a/app/services/subdomain_availability_service.rb b/app/services/subdomain_availability_service.rb
new file mode 100644
index 0000000..3476bd6
--- /dev/null
+++ b/app/services/subdomain_availability_service.rb
@@ -0,0 +1,67 @@
+# frozen_string_literal: true
+
+# Service object to validate and check availability of a desired subdomain.
+# Usage:
+#   result = SubdomainAvailabilityService.call("mybiz", exclude_business: current_business)
+#   result => { available: true/false, message: "..." }
+class SubdomainAvailabilityService
+  RESERVED_WORDS = %w[www mail ftp admin root api app support help blog shop store manage settings dashboard].freeze
+  FORMAT_REGEX = /\A[a-z0-9]([a-z0-9-]*[a-z0-9])?\z/.freeze
+  LENGTH_RANGE = (3..63).freeze
+
+  Result = Struct.new(:available, :message) do
+    def to_h
+      { available: available, message: message }
+    end
+  end
+
+  # @param subdomain [String] requested subdomain (will be downcased & stripped)
+  # @param exclude_business [Business, nil] business that should be ignored in uniqueness checks
+  # @return [Result]
+  def self.call(subdomain, exclude_business: nil)
+    new(subdomain, exclude_business).call
+  end
+
+  def initialize(subdomain, exclude_business)
+    @subdomain = (subdomain || "").downcase.strip
+    @exclude_id = exclude_business&.id
+  end
+
+  def call
+    return Result.new(false, 'Subdomain cannot be blank') if @subdomain.blank?
+
+    unless valid_format?
+      return Result.new(false, 'Invalid subdomain format')
+    end
+
+    if reserved_word?
+      return Result.new(false, 'This subdomain is reserved')
+    end
+
+    unless unique?
+      return Result.new(false, 'This subdomain is already taken')
+    end
+
+    Result.new(true, 'Subdomain is available')
+  rescue StandardError => e
+    Rails.logger.error("[SUBDOMAIN_AVAILABILITY] #{e.class}: #{e.message}")
+    Result.new(false, 'Unable to check availability. Please try again.')
+  end
+
+  private
+
+  def valid_format?
+    LENGTH_RANGE.cover?(@subdomain.length) && @subdomain.match?(FORMAT_REGEX)
+  end
+
+  def reserved_word?
+    RESERVED_WORDS.include?(@subdomain)
+  end
+
+  def unique?
+    scope = Business.where(subdomain: @subdomain).or(Business.where(hostname: @subdomain))
+    scope = scope.where.not(id: @exclude_id) if @exclude_id.present?
+    !scope.exists?
+  end
+end
+
diff --git a/app/views/booking_mailer/payment_reminder.html.erb b/app/views/booking_mailer/payment_reminder.html.erb
index 1012a5c..dba70f7 100644
--- a/app/views/booking_mailer/payment_reminder.html.erb
+++ b/app/views/booking_mailer/payment_reminder.html.erb
@@ -71,14 +71,14 @@
 
       <div style="text-align: center; margin: 30px 0;">
         <% if @invoice %>
-          <a href="<%= new_tenant_payment_url(@business.subdomain, invoice_id: @invoice.id) %>" class="button">
+          <a href="<%= new_payment_url(invoice_id: @invoice.id, host: @business.mailer_host) %>" class="button">
             <%= @booking.service.experience? ? 'Pay Now to Confirm' : 'Pay Online Now' %>
           </a>
           <p style="font-size: 12px; color: #6c757d; margin-top: 10px;">
             No account required - pay securely as a guest
           </p>
           <p style="font-size: 11px; color: #adb5bd; margin-top: 5px;">
-            <a href="<%= tenant_invoice_url(@business.subdomain, @invoice.id, token: @invoice.guest_access_token) %>" style="color: #6c757d;">View Invoice Details</a>
+            <a href="<%= tenant_invoice_url(@invoice.id, token: @invoice.guest_access_token, host: @business.mailer_host) %>" style="color: #6c757d;">View Invoice Details</a>
           </p>
         <% end %>
       </div>
diff --git a/app/views/booking_mailer/payment_reminder.text.erb b/app/views/booking_mailer/payment_reminder.text.erb
index 45cd29c..6180a49 100644
--- a/app/views/booking_mailer/payment_reminder.text.erb
+++ b/app/views/booking_mailer/payment_reminder.text.erb
@@ -46,9 +46,9 @@ YOUR BUSINESS TIER BENEFITS
 <% end %>
 
 <% if @invoice %>
-To pay online, visit: <%= new_tenant_payment_url(@business.subdomain, invoice_id: @invoice.id) %>
+To pay online, visit: <%= new_payment_url(invoice_id: @invoice.id, host: @business.mailer_host) %>
 
-To view invoice details, visit: <%= tenant_invoice_url(@business.subdomain, @invoice.id, token: @invoice.guest_access_token) %>
+To view invoice details, visit: <%= tenant_invoice_url(@invoice.id, token: @invoice.guest_access_token, host: @business.mailer_host) %>
 
 (No account required - you can pay securely as a guest)
 <% end %>
diff --git a/app/views/business/registrations/new.html.erb b/app/views/business/registrations/new.html.erb
index dbb9503..c73b21e 100644
--- a/app/views/business/registrations/new.html.erb
+++ b/app/views/business/registrations/new.html.erb
@@ -187,7 +187,7 @@
               <div class="subscription-plan bg-white border-2 border-gray-200 rounded-xl p-6 hover:border-primary transition-all cursor-pointer flex flex-col h-full" data-tier="standard">
                 <div class="text-center flex flex-col h-full">
                   <h3 class="text-xl font-bold text-dark mb-2">Standard Plan</h3>
-                  <div class="text-3xl font-bold text-primary mb-4">$49<span class="text-sm text-gray-500">/month</span></div>
+                  <div class="text-3xl font-bold text-primary mb-4">$9.99<span class="text-sm text-gray-500">/month</span></div>
                   <div class="space-y-2 text-left text-sm text-gray-600 mb-6 flex-grow">
                     <p class="flex items-center"><span class="text-primary mr-2">✓</span>Text Reminders</p>
                     <p class="flex items-center"><span class="text-primary mr-2">✓</span>Customizable pages</p>
@@ -204,7 +204,7 @@
               <div class="subscription-plan bg-white border-2 border-gray-200 rounded-xl p-6 hover:border-primary transition-all cursor-pointer flex flex-col h-full" data-tier="premium">
                 <div class="text-center flex flex-col h-full">
                   <h3 class="text-xl font-bold text-dark mb-2">Premium Plan</h3>
-                  <div class="text-3xl font-bold text-primary mb-4">$99<span class="text-sm text-gray-500">/month</span></div>
+                  <div class="text-3xl font-bold text-primary mb-4">$29.99<span class="text-sm text-gray-500">/month</span></div>
                   <div class="space-y-2 text-left text-sm text-gray-600 mb-6 flex-grow">
                     <p class="flex items-center"><span class="text-primary mr-2">✓</span>All features</p>
                     <p class="flex items-center"><span class="text-primary mr-2">✓</span>Lower fees</p>
@@ -243,13 +243,59 @@
             </div>
           </div>
 
-          <!-- Hostname Field -->
-          <div id="hostname-field" class="mt-6" style="display: none;">
-            <%= business_f.label :hostname, class: "block text-sm font-medium text-dark mb-2" %>
-            <%= business_f.text_field :hostname, placeholder: "your-biz.bizblasts.com or www.yourdomain.com",
-                  class: "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors" %>
-            <p id="hostname-help-text" class="text-xs text-gray-500 mt-1"></p>
+          <!-- Host Type Handling -->
+          <%= business_f.hidden_field :host_type, value: 'subdomain', id: 'host_type_input' %>
+
+          <!-- Subdomain field for all tiers -->
+          <div class="mt-6">
+            <%= business_f.label :subdomain, "Subdomain", class: "block text-sm font-medium text-dark mb-1" %>
+            <%= business_f.text_field :subdomain, placeholder: "your-biz", class: "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors", id: "registration_subdomain_field" %>
+            <p class="text-xs text-gray-500 mt-1">Will appear as your-biz.bizblasts.com</p>
+          </div>
+
+          <!-- Premium Domain Options (additional custom domain option) -->
+          <div id="premium-domain-inputs" class="mt-6" style="display:none;">
+            <div id="reg_custom_group">
+              <%= business_f.label :hostname, "Custom Domain (Optional)", class: "block text-sm font-medium text-dark mb-1" %>
+              <%= business_f.text_field :hostname, placeholder: "yourdomain.com", class: "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors" %>
+              <p class="text-xs text-gray-500 mt-1">Leave blank if you don't want a custom domain</p>
+              
+              <!-- Advanced: Canonical Preference -->
+              <div class="mt-4 p-3 bg-gray-50 border border-gray-200 rounded-lg">
+                <div class="flex items-center justify-between mb-2">
+                  <%= business_f.label :canonical_preference, "Canonical URL (Advanced)", class: "text-sm font-medium text-dark" %>
+                  <span class="text-xs text-gray-500">Optional</span>
+                </div>
+                <div class="space-y-2">
+                  <div class="flex items-center">
+                    <%= business_f.radio_button :canonical_preference, 'www', checked: true, class: "h-4 w-4 text-primary border-gray-300 focus:ring-primary cursor-pointer" %>
+                    <label for="user_business_attributes_canonical_preference_www" class="ml-2 text-sm text-gray-700 cursor-pointer">
+                      <code class="bg-white px-1 rounded text-primary">www.yourdomain.com</code> (Recommended)
+                    </label>
+                  </div>
+                  <div class="flex items-center">
+                    <%= business_f.radio_button :canonical_preference, 'apex', class: "h-4 w-4 text-primary border-gray-300 focus:ring-primary cursor-pointer" %>
+                    <label for="user_business_attributes_canonical_preference_apex" class="ml-2 text-sm text-gray-700 cursor-pointer">
+                      <code class="bg-white px-1 rounded text-primary">yourdomain.com</code> (Advanced)
+                    </label>
+                  </div>
+                </div>
+                <p class="text-xs text-gray-500 mt-2">Choose your preferred canonical URL. Both versions will work, but one will redirect to the other for SEO consistency.</p>
+              </div>
+            </div>
+          </div>
+
+          <!-- Custom Domain Ownership Checkbox -->
+          <div id="premium-domain-ownership" class="mt-4" style="display:none;">
+            <div class="flex items-start">
+              <%= business_f.check_box :custom_domain_owned, { class: "mt-1 h-4 w-4 text-primary border-gray-300 rounded focus:ring-primary" }, "1", "0" %>
+              <label for="user_business_attributes_custom_domain_owned" class="ml-3 text-sm text-gray-700">
+                Already have my own domain
+                <br><span class="text-xs text-gray-500">If left unchecked, BizBlasts will help you get a custom domain</span>
+              </label>
+            </div>
           </div>
+
         <% end %>
       </div>
 
@@ -317,7 +363,7 @@
           <!-- Notification Consent Checkbox -->
           <div class="flex items-start border-t border-gray-200 pt-3 mt-3">
             <%= f.check_box :bizblasts_notification_consent, 
-                  { checked: true, class: "mt-1 h-4 w-4 text-primary border-gray-300 rounded focus:ring-primary" }, 
+                  { class: "mt-1 h-4 w-4 text-primary border-gray-300 rounded focus:ring-primary" }, 
                   "1", "0" %>
             <label for="user_bizblasts_notification_consent" class="ml-3 text-sm text-gray-700">
               I would like to receive notifications from BizBlasts (email confirmations, text alerts, system updates, business tips, etc.)
@@ -348,12 +394,12 @@
 <script type="text/javascript">
   function initializeBusinessRegistrationPlanSelection() {
     const selectedTierInput = document.getElementById('selected_tier');
-    const hostnameFieldDiv = document.getElementById('hostname-field');
-    const hostnameInput = hostnameFieldDiv?.querySelector('input[name="user[business_attributes][hostname]"]');
-    const hostnameHelpText = document.getElementById('hostname-help-text');
     const tierDescriptionDiv = document.getElementById('tier-descriptions');
     const planSelectButtons = document.querySelectorAll('.plan-select-btn');
     const subscriptionPlans = document.querySelectorAll('.subscription-plan');
+    const domainInputsWrapper = document.getElementById('premium-domain-inputs');
+    const domainOwnershipDiv = document.getElementById('premium-domain-ownership');
+    const hostTypeHidden = document.getElementById('host_type_input');
 
     function selectPlan(tier) {
       // Update hidden field
@@ -394,37 +440,54 @@
       }
       
       toggleFields(tier);
+
+      // Premium extra ui
+      if (tier === 'premium') {
+        domainInputsWrapper.style.display = 'grid';
+        domainOwnershipDiv.style.display = 'block';
+        hostTypeHidden.value = 'subdomain'; // Default to subdomain
+      } else {
+        domainInputsWrapper.style.display = 'none';
+        domainOwnershipDiv.style.display = 'none';
+        hostTypeHidden.value = 'subdomain';
+      }
     }
 
     function toggleFields(selectedTier) {
-      if (!tierDescriptionDiv || !hostnameFieldDiv || !hostnameInput || !hostnameHelpText) return;
+      if (!tierDescriptionDiv) return;
       
       // Hide all descriptions first
       tierDescriptionDiv.querySelectorAll('[data-tier]').forEach(p => p.style.display = 'none');
-      // Clear help text
-      hostnameHelpText.textContent = '';
-
-      if (selectedTier === 'standard' || selectedTier === 'free') {
-        hostnameFieldDiv.style.display = 'block';
-        hostnameInput.required = true;
-        hostnameInput.placeholder = 'your-biz'; // Just the subdomain part
-        hostnameHelpText.textContent = '.bizblasts.com (Required - lowercase letters, numbers, hyphens only)';
-        const desc = tierDescriptionDiv.querySelector(`[data-tier="${selectedTier}"]`);
-        if (desc) desc.style.display = 'block';
-      } else if (selectedTier === 'premium') {
-        hostnameFieldDiv.style.display = 'block';
-        hostnameInput.required = false; // Optional for paid tiers
-        hostnameInput.placeholder = 'yourdomain';
-        hostnameHelpText.innerHTML = 'Enter your desired custom domain. Our system will automatically add the hostname (yourdomain.bizblasts.com) to our domain. We will contact you to verify ownership of the domain.<br><small class="text-primary font-medium">💡 Domain Coverage: BizBlasts covers up to $20/year for new domains. For domains over $20/year, we\'ll contact you with alternatives.</small>';
-        const desc = tierDescriptionDiv.querySelector(`[data-tier="${selectedTier}"]`);
-        if (desc) desc.style.display = 'block';
+
+      // Show description for selected tier
+      const desc = tierDescriptionDiv.querySelector(`[data-tier="${selectedTier}"]`);
+      if (desc) desc.style.display = 'block';
+
+      // Toggle premium domain inputs
+      if (selectedTier === 'premium') {
+        domainInputsWrapper.style.display = 'grid';
+        domainOwnershipDiv.style.display = 'block';
+        hostTypeHidden.value = 'subdomain'; // Default to subdomain for premium
       } else {
-        hostnameFieldDiv.style.display = 'none';
-        hostnameInput.required = false;
-        hostnameInput.placeholder = ''; // Clear placeholder
+        domainInputsWrapper.style.display = 'none';
+        domainOwnershipDiv.style.display = 'none';
+        hostTypeHidden.value = 'subdomain'; // Ensure it's subdomain for free/standard
       }
     }
 
+    // Handle custom domain field changes to set host_type
+    const customDomainField = document.querySelector('input[name*="[hostname]"]');
+    if (customDomainField) {
+      customDomainField.addEventListener('input', function() {
+        // If custom domain has value, set host_type to custom_domain
+        if (this.value && this.value.trim()) {
+          hostTypeHidden.value = 'custom_domain';
+        } else {
+          hostTypeHidden.value = 'subdomain';
+        }
+      });
+    }
+
     // Add click handlers to plan selection buttons
     planSelectButtons.forEach(button => {
       button.addEventListener('click', function(e) {
@@ -551,4 +614,118 @@
   document.addEventListener('turbo:load', initializeBusinessRegistrationPlanSelection);
   document.addEventListener('DOMContentLoaded', initializeBusinessRegistrationValidation);
   document.addEventListener('turbo:load', initializeBusinessRegistrationValidation);
+</script>
+
+<!-- Subdomain Availability Checker for Registration -->
+<script type="text/javascript">
+  function initializeRegistrationSubdomainChecker() {
+    const subdomainInput = document.getElementById('registration_subdomain_field');
+    
+    if (!subdomainInput) return;
+    
+    let checkTimeout;
+    let lastCheckedValue = '';
+    
+    function showValidationMessage(input, message, type = 'error') {
+      // Remove existing validation messages
+      const existingMessage = input.parentNode.querySelector('.subdomain-validation');
+      if (existingMessage) {
+        existingMessage.remove();
+      }
+      
+      if (!message) return;
+      
+      const messageDiv = document.createElement('div');
+      messageDiv.className = `subdomain-validation text-xs mt-1 ${type === 'success' ? 'text-green-600' : type === 'warning' ? 'text-yellow-600' : 'text-red-600'}`;
+      messageDiv.innerHTML = message;
+      
+      input.parentNode.appendChild(messageDiv);
+    }
+    
+    function validateSubdomainFormat(subdomain) {
+      if (!subdomain) return { valid: false, message: '' };
+      
+      // Check length (3-63 characters)
+      if (subdomain.length < 3) {
+        return { valid: false, message: 'Subdomain must be at least 3 characters long' };
+      }
+      if (subdomain.length > 63) {
+        return { valid: false, message: 'Subdomain must be 63 characters or less' };
+      }
+      
+      // Check format: alphanumeric and hyphens, no hyphens at start/end
+      const validFormat = /^[a-z0-9]([a-z0-9-]*[a-z0-9])?$/.test(subdomain);
+      if (!validFormat) {
+        return { valid: false, message: 'Only lowercase letters, numbers, and hyphens allowed. Cannot start or end with hyphen' };
+      }
+      
+      // Check for reserved words
+      const reserved = ['www', 'mail', 'ftp', 'admin', 'root', 'api', 'app', 'support', 'help', 'blog', 'shop', 'store', 'manage', 'settings', 'dashboard'];
+      if (reserved.includes(subdomain.toLowerCase())) {
+        return { valid: false, message: 'This subdomain is reserved and cannot be used' };
+      }
+      
+      return { valid: true, message: '' };
+    }
+    
+    async function checkSubdomainAvailability(subdomain) {
+      try {
+        const response = await fetch(`/subdomains/check?subdomain=${encodeURIComponent(subdomain)}`, {
+          method: 'GET',
+          headers: { 'Accept': 'application/json' }
+        });
+        
+        const data = await response.json();
+        return data;
+      } catch (error) {
+        console.error('Error checking subdomain availability:', error);
+        return { available: false, message: 'Unable to check availability. Please try again.' };
+      }
+    }
+    
+    function handleSubdomainCheck() {
+      const currentValue = subdomainInput.value.toLowerCase().trim();
+      
+      // Skip if value hasn't changed or is empty
+      if (currentValue === lastCheckedValue || !currentValue) {
+        if (!currentValue) showValidationMessage(subdomainInput, '');
+        return;
+      }
+      
+      lastCheckedValue = currentValue;
+      
+      // Format validation first
+      const formatCheck = validateSubdomainFormat(currentValue);
+      if (!formatCheck.valid) {
+        showValidationMessage(subdomainInput, formatCheck.message, 'error');
+        return;
+      }
+      
+      // Show checking message
+      showValidationMessage(subdomainInput, '⏳ Checking availability...', 'warning');
+      
+      // Check availability
+      checkSubdomainAvailability(currentValue).then(result => {
+        if (result.available) {
+          showValidationMessage(subdomainInput, '✅ Available! Will appear as ' + currentValue + '.bizblasts.com', 'success');
+        } else {
+          showValidationMessage(subdomainInput, '❌ ' + (result.message || 'This subdomain is not available'), 'error');
+        }
+      });
+    }
+    
+    // Add event listeners
+    subdomainInput.addEventListener('input', function() {
+      clearTimeout(checkTimeout);
+      checkTimeout = setTimeout(handleSubdomainCheck, 500); // Debounce 500ms
+    });
+    
+    subdomainInput.addEventListener('blur', function() {
+      clearTimeout(checkTimeout);
+      handleSubdomainCheck();
+    });
+  }
+  
+  document.addEventListener('DOMContentLoaded', initializeRegistrationSubdomainChecker);
+  document.addEventListener('turbo:load', initializeRegistrationSubdomainChecker);
 </script> 
\ No newline at end of file
diff --git a/app/views/business_mailer/domain_request_notification.html.erb b/app/views/business_mailer/domain_request_notification.html.erb
index 2b38f96..9da26c2 100644
--- a/app/views/business_mailer/domain_request_notification.html.erb
+++ b/app/views/business_mailer/domain_request_notification.html.erb
@@ -89,43 +89,81 @@
     <div class="content">
       <p>Hello <%= @user.first_name %>,</p>
       
-      <p>Thank you for confirming your email address and welcome to BizBlasts Premium! We've received your custom domain request for <strong><%= @business.name %></strong>.</p>
+      <p>Thank you for confirming your email address and welcome to BizBlasts Premium! We've received your domain request for <strong><%= @business.name %></strong>.</p>
 
-      <% if @domain_requested.present? %>
-      <div class="domain-box">
-        <div class="domain-name"><%= @domain_requested %></div>
-        <div class="status-badge">🔍 Under Review</div>
-      </div>
-      <% end %>
-
-      <div class="domain-coverage-section" style="margin: 20px 0;">
-        <h3 style="margin-top: 0; color: #2d3748; font-size: 18px;">💰 Domain Cost Coverage</h3>
-        <div style="background: #f0fff4; border: 2px solid #28a745; border-radius: 8px; padding: 20px; margin: 15px 0;">
-          <p style="margin: 0; color: #2d3748; font-weight: 600; font-size: 16px;">
-            <strong style="color: #28a745;">Excellent news!</strong> As a Premium subscriber, BizBlasts covers domain registration costs up to <strong>$20 per year</strong>.
-          </p>
-          <div style="margin: 15px 0; padding: 10px; background: rgba(255,255,255,0.7); border-radius: 4px;">
-            <h4 style="margin: 0 0 8px 0; color: #2d3748; font-size: 14px;">What happens next:</h4>
-            <ul style="margin: 0; padding-left: 20px; color: #4a5568; font-size: 14px;">
-              <li>We'll check the cost of your requested domain</li>
-              <li>If under $20/year: We handle registration at no cost to you</li>
-              <li>If over $20/year: We'll contact you with alternatives under $20</li>
-              <li><strong>Auto-renewal setup:</strong> We'll configure auto-renewal and pay annually</li>
-              <li>You always have the option to use your existing domain</li>
-            </ul>
+      <div class="domain-info" style="margin: 20px 0;">
+        <% if @subdomain_requested.present? %>
+          <div class="domain-box">
+            <div style="font-size: 16px; font-weight: 600; color: #4a5568; margin-bottom: 5px;">Your Subdomain</div>
+            <div class="domain-name"><%= @subdomain_requested %>.bizblasts.com</div>
+            <div class="status-badge" style="background: #d4edda; color: #155724;">✅ Ready</div>
           </div>
-          <div style="margin: 15px 0; padding: 10px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 4px;">
-            <p style="margin: 0; color: #856404; font-size: 13px;">
-              <strong>Coverage Details:</strong> BizBlasts covers domain costs up to $20 per year as part of your Premium subscription. 
-              Domains over $20/year require you to obtain your own domain, which you can then connect to your BizBlasts site.
-            </p>
+        <% end %>
+
+        <% if @domain_requested.present? %>
+          <div class="domain-box" style="margin-top: 15px;">
+            <div style="font-size: 16px; font-weight: 600; color: #4a5568; margin-bottom: 5px;">Your Custom Domain</div>
+            <div class="domain-name"><%= @domain_requested %></div>
+            <div class="status-badge">🔍 Under Review</div>
+            <div style="margin-top: 10px; font-size: 14px; color: #718096;">
+              <strong>Domain Ownership:</strong> 
+              <% if @custom_domain_owned %>
+                <span style="color: #38a169;">✅ You already own this domain</span>
+              <% else %>
+                <span style="color: #d69e2e;">📦 BizBlasts will help you acquire this domain</span>
+              <% end %>
+            </div>
           </div>
-          <p style="margin: 10px 0 0 0; color: #4a5568; font-size: 13px; font-style: italic;">
-            If you already own this domain, you'll continue to handle domain-related costs through your current registrar.
-          </p>
-        </div>
+        <% end %>
       </div>
 
+      <% if @domain_requested.present? %>
+        <div class="domain-coverage-section" style="margin: 20px 0;">
+          <h3 style="margin-top: 0; color: #2d3748; font-size: 18px;">💰 Domain Setup Information</h3>
+          
+          <% if @custom_domain_owned %>
+            <!-- User already owns the domain -->
+            <div style="background: #e3f2fd; border: 2px solid #1976d2; border-radius: 8px; padding: 20px; margin: 15px 0;">
+              <p style="margin: 0; color: #2d3748; font-weight: 600; font-size: 16px;">
+                <strong style="color: #1976d2;">Perfect!</strong> Since you already own <strong><%= @domain_requested %></strong>, we'll help you connect it to your BizBlasts site.
+              </p>
+              <div style="margin: 15px 0; padding: 10px; background: rgba(255,255,255,0.7); border-radius: 4px;">
+                <h4 style="margin: 0 0 8px 0; color: #2d3748; font-size: 14px;">What happens next:</h4>
+                <ul style="margin: 0; padding-left: 20px; color: #4a5568; font-size: 14px;">
+                  <li>Our team will provide you with DNS configuration instructions</li>
+                  <li>You'll update your domain's DNS settings with your current registrar</li>
+                  <li>We'll verify the connection and activate your custom domain</li>
+                  <li>You'll continue to handle domain costs through your current registrar</li>
+                </ul>
+              </div>
+            </div>
+          <% else %>
+            <!-- BizBlasts will help acquire the domain -->
+            <div style="background: #f0fff4; border: 2px solid #28a745; border-radius: 8px; padding: 20px; margin: 15px 0;">
+              <p style="margin: 0; color: #2d3748; font-weight: 600; font-size: 16px;">
+                <strong style="color: #28a745;">Excellent news!</strong> As a Premium subscriber, BizBlasts covers domain registration costs up to <strong>$20 per year</strong>.
+              </p>
+              <div style="margin: 15px 0; padding: 10px; background: rgba(255,255,255,0.7); border-radius: 4px;">
+                <h4 style="margin: 0 0 8px 0; color: #2d3748; font-size: 14px;">What happens next:</h4>
+                <ul style="margin: 0; padding-left: 20px; color: #4a5568; font-size: 14px;">
+                  <li>We'll check the availability and cost of <strong><%= @domain_requested %></strong></li>
+                  <li>If under $20/year: We handle registration at no cost to you</li>
+                  <li>If over $20/year: We'll contact you with alternatives under $20</li>
+                  <li><strong>Auto-renewal setup:</strong> We'll configure auto-renewal and pay annually</li>
+                  <li>You always have the option to purchase and use your own domain</li>
+                </ul>
+              </div>
+              <div style="margin: 15px 0; padding: 10px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 4px;">
+                <p style="margin: 0; color: #856404; font-size: 13px;">
+                  <strong>Coverage Details:</strong> BizBlasts covers domain costs up to $20 per year as part of your Premium subscription. 
+                  Domains over $20/year require you to obtain your own domain, which you can then connect to your BizBlasts site.
+                </p>
+              </div>
+            </div>
+          <% end %>
+        </div>
+      <% end %>
+
       <div class="next-steps">
         <h3 style="margin-top: 0; color: #2d3748;">What happens next:</h3>
         <ul style="margin: 10px 0;">
diff --git a/app/views/business_manager/settings/business/edit.html.erb b/app/views/business_manager/settings/business/edit.html.erb
index 782fe1d..1be4d4a 100644
--- a/app/views/business_manager/settings/business/edit.html.erb
+++ b/app/views/business_manager/settings/business/edit.html.erb
@@ -107,35 +107,34 @@
     </div>
   </div>
 
-  <!-- Business Information Form -->
-  <%= form_with(model: [:business_manager, :settings, @business], url: business_manager_settings_business_path, method: :patch, local: true, html: { class: "space-y-8" }) do |form| %>
-    <!-- Error Messages -->
-    <% if @business.errors.any? %>
-      <div class="bg-red-50 border border-red-300 rounded-xl overflow-hidden shadow-sm">
-        <div class="px-6 py-4 bg-red-100 border-b border-red-200">
-          <div class="flex items-center">
-            <svg class="w-5 h-5 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
-              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
-            </svg>
-            <h3 class="text-sm font-medium text-red-800">Please fix the following errors:</h3>
-          </div>
-        </div>
-        <div class="px-6 py-4">
-          <ul class="list-disc list-inside text-sm text-red-700 space-y-1">
-            <% @business.errors.full_messages.each do |message| %>
-              <li><%= message %></li>
-            <% end %>
-          </ul>
+  <!-- Error Messages -->
+  <% if @business.errors.any? %>
+    <div class="bg-red-50 border border-red-300 rounded-xl overflow-hidden shadow-sm">
+      <div class="px-6 py-4 bg-red-100 border-b border-red-200">
+        <div class="flex items-center">
+          <svg class="w-5 h-5 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
+            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
+          </svg>
+          <h3 class="text-sm font-medium text-red-800">Please fix the following errors:</h3>
         </div>
       </div>
-    <% end %>
+      <div class="px-6 py-4">
+        <ul class="list-disc list-inside text-sm text-red-700 space-y-1">
+          <% @business.errors.full_messages.each do |message| %>
+            <li><%= message %></li>
+          <% end %>
+        </ul>
+      </div>
+    </div>
+  <% end %>
 
-    <!-- Branding Section -->
+  <!-- Branding Section -->
+  <%= form_with(model: [:business_manager, :settings, @business], url: business_manager_settings_business_path, method: :patch, local: true, data: { turbo: false }, html: { class: "space-y-8", id: "main-business-form" }) do |form| %>
     <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100">
       <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
         <h2 class="text-lg font-semibold text-gray-900 flex items-center">
           <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
-            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m0 0V1a1 1 0 011-1h2a1 1 0 011 1v3M7 4H5a1 1 0 00-1 1v16a1 1 0 001 1h14a1 1 0 001-1V5a1 1 0 00-1-1h-2"/>
+            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
           </svg>
           Branding
         </h2>
@@ -195,7 +194,7 @@
     </div>
 
     <!-- Contact Information Section -->
-    <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100">
+    <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100 mb-8">
       <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
         <h2 class="text-lg font-semibold text-gray-900 flex items-center">
           <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
@@ -301,75 +300,306 @@
         </div>
       </div>
     </div>
+  <!-- Form continues below to include Domain & URL Settings -->
 
-    <!-- Hours of Operation Section -->
-    <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100">
+  <!-- Domain Management Section (Independent Form) -->
+  <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100 mb-8">
       <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
         <h2 class="text-lg font-semibold text-gray-900 flex items-center">
           <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
-            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
+            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"/>
           </svg>
-          Hours of Operation
+          Domain & URL Settings
         </h2>
-        <p class="text-sm text-gray-600 mt-1">Set your business hours for each day of the week. Only for display purposes.</p>
+        <p class="text-sm text-gray-600 mt-1">View your current domain and request changes</p>
       </div>
       <div class="p-6">
-        <div class="space-y-4">
-          <% days = %w[mon tue wed thu fri sat sun] %>
-          <% day_labels = { 'mon' => 'Monday', 'tue' => 'Tuesday', 'wed' => 'Wednesday', 'thu' => 'Thursday', 'fri' => 'Friday', 'sat' => 'Saturday', 'sun' => 'Sunday' } %>
-          <% current_hours = @business.hours.is_a?(Hash) ? @business.hours.with_indifferent_access : {} %>
-          <% days.each do |day_key|
-            day_label = day_labels[day_key]
-            hours_for_day = current_hours[day_key] || {}
-            open_time = hours_for_day[:open] || hours_for_day['open']
-            close_time = hours_for_day[:close] || hours_for_day['close']
-          %>
-            <div class="grid grid-cols-1 sm:grid-cols-12 gap-4 items-center p-4 bg-gray-50 rounded-lg border border-gray-200">
-              <div class="sm:col-span-3">
-                <span class="font-medium text-gray-900"><%= day_label %></span>
+        <div class="space-y-6">
+          <!-- Current Domain Display -->
+          <div>
+            <label class="block text-sm font-medium text-gray-700 mb-3">Current Domain</label>
+            <div class="p-4 bg-gray-50 border border-gray-200 rounded-lg">
+              <div class="flex items-center justify-between">
+                <div>
+                  <p class="text-sm font-medium text-gray-900">
+                    <% if @business.host_type == 'custom_domain' && @business.hostname.present? %>
+                      <%= @business.hostname %>
+                      <span class="inline-flex items-center px-2 py-1 ml-2 text-xs font-medium bg-green-100 text-green-800 rounded-full">
+                        Custom Domain
+                      </span>
+                    <% elsif @business.hostname.present? %>
+                      <%= @business.hostname %>.bizblasts.com
+                      <span class="inline-flex items-center px-2 py-1 ml-2 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">
+                        Subdomain
+                      </span>
+                    <% else %>
+                      Not configured
+                      <span class="inline-flex items-center px-2 py-1 ml-2 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">
+                        Default
+                      </span>
+                    <% end %>
+                  </p>
+                  <p class="text-xs text-gray-500 mt-1">
+                    <% if @business.host_type == 'custom_domain' %>
+                      This is your custom domain managed by BizBlasts
+                    <% elsif @business.hostname.present? %>
+                      This is your BizBlasts subdomain
+                    <% else %>
+                      Your business is accessible through the default BizBlasts URL
+                    <% end %>
+                  </p>
+                </div>
+                <div class="flex items-center">
+                  <% if @business.hostname.present? %>
+                    <a href="<%= @business.host_type == 'custom_domain' ? "https://#{@business.hostname}" : "https://#{@business.hostname}.bizblasts.com" %>" 
+                       target="_blank" 
+                       class="inline-flex items-center text-sm text-blue-600 hover:text-blue-700">
+                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
+                      </svg>
+                      Visit Site
+                    </a>
+                  <% end %>
+                </div>
               </div>
-              <div class="sm:col-span-4">
-                <%= form.label "hours_#{day_key}_open", "Open Time", class: "block text-xs font-medium text-gray-600 mb-1" %>
-                <%= form.time_field "hours_#{day_key}_open", 
-                      value: open_time, 
-                      class: "block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm transition-colors" %>
+            </div>
+          </div>
+
+          <!-- Domain Status Checker -->
+          <% if @business.host_type_custom_domain? && @business.hostname.present? %>
+            <div>
+              <label class="block text-sm font-medium text-gray-700 mb-3">Domain Status</label>
+              <div id="domain-status-container" class="p-4 bg-white border border-gray-200 rounded-lg">
+                <div class="flex items-center justify-between">
+                  <div>
+                    <div id="domain-status-indicator" class="flex items-center">
+                      <div class="w-3 h-3 bg-gray-400 rounded-full mr-2"></div>
+                      <span id="domain-status-text" class="text-sm font-medium text-gray-600">Checking status...</span>
+                    </div>
+                    <p id="domain-status-details" class="text-xs text-gray-500 mt-1">Verifying domain configuration and health</p>
+                  </div>
+                  <div class="flex items-center space-x-2">
+                    <button id="check-domain-btn" 
+                            type="button"
+                            class="inline-flex items-center px-3 py-1.5 text-xs font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-md hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer"
+                            onclick="checkDomainStatus()">
+                      <svg class="w-3 h-3 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
+                      </svg>
+                      Check Now
+                    </button>
+                  </div>
+                </div>
+                
+                <!-- Detailed Status Information (Hidden by default) -->
+                <div id="domain-status-details-expanded" class="mt-4 space-y-3 hidden">
+                  <div class="border-t border-gray-200 pt-4">
+                    <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 text-xs">
+                      <div>
+                        <div class="flex items-center">
+                          <div id="dns-check-indicator" class="w-2 h-2 bg-gray-400 rounded-full mr-2"></div>
+                          <span class="font-medium">DNS Configuration</span>
+                        </div>
+                        <p id="dns-check-text" class="text-gray-500 mt-1">Checking CNAME record...</p>
+                      </div>
+                      <div>
+                        <div class="flex items-center">
+                          <div id="render-check-indicator" class="w-2 h-2 bg-gray-400 rounded-full mr-2"></div>
+                          <span class="font-medium">Render Integration</span>
+                        </div>
+                        <p id="render-check-text" class="text-gray-500 mt-1">Verifying domain in Render...</p>
+                      </div>
+                      <div>
+                        <div class="flex items-center">
+                          <div id="health-check-indicator" class="w-2 h-2 bg-gray-400 rounded-full mr-2"></div>
+                          <span class="font-medium">Health Check</span>
+                        </div>
+                        <p id="health-check-text" class="text-gray-500 mt-1">Testing HTTP response...</p>
+                      </div>
+                    </div>
+                  </div>
+                </div>
               </div>
-              <div class="sm:col-span-4">
-                <%= form.label "hours_#{day_key}_close", "Close Time", class: "block text-xs font-medium text-gray-600 mb-1" %>
-                <%= form.time_field "hours_#{day_key}_close", 
-                      value: close_time, 
-                      class: "block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm transition-colors" %>
+            </div>
+          <% end %>
+
+          <!-- Canonical URL Preference (Show for Custom Domains) -->
+          <div id="canonical-preference-section" class="mt-6" <%= 'style="display:none;"' unless @business.host_type_custom_domain? %>>
+            <label class="block text-sm font-medium text-gray-700 mb-3">Canonical URL Preference</label>
+            <div class="p-4 bg-gray-50 border border-gray-200 rounded-lg">
+              <p class="text-sm text-gray-600 mb-4">Choose how your domain should be displayed. Both versions will work, but one will redirect to the other for SEO consistency.</p>
+              
+              <div class="space-y-3">
+                <div class="flex items-center">
+                  <%= form.radio_button :canonical_preference, 'www', class: "h-4 w-4 text-primary border-gray-300 focus:ring-primary cursor-pointer" %>
+                  <label for="business_canonical_preference_www" class="ml-2 text-sm text-gray-700 cursor-pointer">
+                    <code id="www-domain-preview" class="bg-white px-2 py-1 rounded text-primary">www.<%= @business.hostname.present? ? @business.hostname.sub(/^www\./, '') : 'yourdomain.com' %></code>
+                    <span class="text-gray-500 ml-1">(Recommended - matches main site behavior)</span>
+                  </label>
+                </div>
+                <div class="flex items-center">
+                  <%= form.radio_button :canonical_preference, 'apex', class: "h-4 w-4 text-primary border-gray-300 focus:ring-primary cursor-pointer" %>
+                  <label for="business_canonical_preference_apex" class="ml-2 text-sm text-gray-700 cursor-pointer">
+                    <code id="apex-domain-preview" class="bg-white px-2 py-1 rounded text-primary"><%= @business.hostname.present? ? @business.hostname.sub(/^www\./, '') : 'yourdomain.com' %></code>
+                    <span class="text-gray-500 ml-1">(Advanced option)</span>
+                  </label>
+                </div>
               </div>
-              <div class="sm:col-span-1 text-center">
-                <button type="button" class="cursor-pointer text-gray-400 hover:text-gray-600 transition-colors" title="Clear hours">
-                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
-                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
+              
+              <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
+                <div class="flex items-start">
+                  <svg class="w-4 h-4 text-blue-600 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                   </svg>
-                </button>
+                  <p id="canonical-preview-text" class="text-xs text-blue-700">
+                    <strong>Current setting:</strong> 
+                    <% if @business.www_canonical_preference? %>
+                      <span id="redirect-explanation">Visitors to <code id="from-domain" class="text-blue-800"><%= @business.hostname.present? ? @business.hostname.sub(/^www\./, '') : 'yourdomain.com' %></code> will be redirected to <code id="to-domain" class="text-blue-800">www.<%= @business.hostname.present? ? @business.hostname.sub(/^www\./, '') : 'yourdomain.com' %></code></span>
+                    <% else %>
+                      <span id="redirect-explanation">Visitors to <code id="from-domain" class="text-blue-800">www.<%= @business.hostname.present? ? @business.hostname.sub(/^www\./, '') : 'yourdomain.com' %></code> will be redirected to <code id="to-domain" class="text-blue-800"><%= @business.hostname.present? ? @business.hostname.sub(/^www\./, '') : 'yourdomain.com' %></code></span>
+                    <% end %>
+                  </p>
+                </div>
               </div>
             </div>
-          <% end %>
+          </div>
+
+          <!-- Domain Change Request -->
+          <div>
+            <%# --- Host Type Toggle for Premium Users ------------------------------------ %>
+            <% if @business.premium_tier? %>
+              <div class="mb-6">
+                <label class="block text-sm font-medium text-gray-700 mb-2">Domain Mode</label>
+                <div class="flex items-center gap-6">
+                  <label class="inline-flex items-center gap-2">
+                    <input type="radio" name="business[host_type]" value="subdomain" id="host_type_subdomain"
+                           <%= 'checked' if @business.host_type_subdomain? %>
+                           class="h-4 w-4 text-primary border-gray-300 focus:ring-primary cursor-pointer">
+                    <span class="text-sm">BizBlasts Subdomain</span>
+                  </label>
+                  <label class="inline-flex items-center gap-2">
+                    <input type="radio" name="business[host_type]" value="custom_domain" id="host_type_custom"
+                           <%= 'checked' if @business.host_type_custom_domain? %>
+                           class="h-4 w-4 text-primary border-gray-300 focus:ring-primary cursor-pointer">
+                    <span class="text-sm">Custom Domain</span>
+                  </label>
+                </div>
+              </div>
+
+              <%# Dual input fields %>
+              <div class="grid grid-cols-1 lg:grid-cols-2 gap-6" id="domain-input-wrapper">
+                <div id="subdomain-input-group" <%= 'style="display:none;"' unless @business.host_type_subdomain? %>>
+                  <label for="display_subdomain" class="block text-sm font-medium text-gray-700 mb-1">Subdomain</label>
+                  <input type="text" 
+                         id="display_subdomain" 
+                         name="business[subdomain]"
+                         value="<%= @business.subdomain || @business.hostname %>"
+                         placeholder="your-biz"
+                         class="block w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary sm:text-sm" />
+                  <p class="text-xs text-gray-500 mt-1">Will appear as your-biz.bizblasts.com</p>
+                </div>
+
+                <div id="customdomain-input-group" <%= 'style="display:none;"' unless @business.host_type_custom_domain? %>>
+                  <label for="display_hostname" class="block text-sm font-medium text-gray-700 mb-1">Custom Domain</label>
+                  <input type="text" 
+                         id="display_hostname" 
+                         name="business[hostname]"
+                         value="<%= @business.hostname %>"
+                         placeholder="yourdomain.com"
+                         class="block w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary sm:text-sm" />
+                  <p class="text-xs text-gray-500 mt-1">Enter full domain (example.com)</p>
+                </div>
+              </div>
+            <% end %>
+            <% unless @business.premium_tier? %>
+              <!-- Non-premium: subdomain only -->
+              <!-- Hidden radio to satisfy JS checker logic -->
+              <input type="radio" name="business[host_type]" value="subdomain" id="host_type_subdomain" checked="checked" hidden>
+              
+              <label for="display_subdomain" class="block text-sm font-medium text-gray-700 mb-1">Subdomain</label>
+              <input type="text" 
+                     id="display_subdomain" 
+                     name="business[subdomain]"
+                     value="<%= @business.subdomain || @business.hostname %>"
+                     placeholder="your-biz"
+                     class="block w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary sm:text-sm" />
+              <p class="text-xs text-gray-500 mt-1">Will appear as your-biz.bizblasts.com</p>
+            <% end %>
+
+          </div>
         </div>
-        <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
-          <div class="flex items-start gap-3">
-            <svg class="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
-              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
-            </svg>
-            <div class="text-sm text-blue-800">
-              <p class="font-medium mb-1">Hours Tips:</p>
-              <ul class="text-blue-700 space-y-1">
-                <li>• Leave both times blank if closed on that day</li>
-                <li>• Use 24-hour format for clarity (e.g., 14:00 for 2:00 PM)</li>
-                <li>• These hours will be displayed to customers</li>
-              </ul>
+      </div>
+    </div>
+
+  <!-- Continuing with the same form object `form` declared above -->
+  <!-- Hours of Operation Section -->
+  <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100 mb-8">
+    <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
+      <h2 class="text-lg font-semibold text-gray-900 flex items-center">
+        <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
+        </svg>
+        Hours of Operation
+      </h2>
+      <p class="text-sm text-gray-600 mt-1">Set your business hours for each day of the week. Only for display purposes.</p>
+    </div>
+    <div class="p-6">
+      <div class="space-y-4">
+        <% days = %w[mon tue wed thu fri sat sun] %>
+        <% day_labels = { 'mon' => 'Monday', 'tue' => 'Tuesday', 'wed' => 'Wednesday', 'thu' => 'Thursday', 'fri' => 'Friday', 'sat' => 'Saturday', 'sun' => 'Sunday' } %>
+        <% current_hours = @business.hours.is_a?(Hash) ? @business.hours.with_indifferent_access : {} %>
+        <% days.each do |day_key|
+          day_label = day_labels[day_key]
+          hours_for_day = current_hours[day_key] || {}
+          open_time = hours_for_day[:open] || hours_for_day['open']
+          close_time = hours_for_day[:close] || hours_for_day['close']
+        %>
+          <div class="grid grid-cols-1 sm:grid-cols-12 gap-4 items-center p-4 bg-gray-50 rounded-lg border border-gray-200">
+            <div class="sm:col-span-3">
+              <span class="font-medium text-gray-900"><%= day_label %></span>
+            </div>
+            <div class="sm:col-span-4">
+              <%= form.label "hours_#{day_key}_open", "Open Time", class: "block text-xs font-medium text-gray-600 mb-1" %>
+              <%= form.time_field "hours_#{day_key}_open", 
+                    value: open_time, 
+                    class: "block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm transition-colors" %>
             </div>
+            <div class="sm:col-span-4">
+              <%= form.label "hours_#{day_key}_close", "Close Time", class: "block text-xs font-medium text-gray-600 mb-1" %>
+              <%= form.time_field "hours_#{day_key}_close", 
+                    value: close_time, 
+                    class: "block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm transition-colors" %>
+            </div>
+            <div class="sm:col-span-1 text-center">
+              <button type="button" class="cursor-pointer text-gray-400 hover:text-gray-600 transition-colors" title="Clear hours">
+                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
+                </svg>
+              </button>
+            </div>
+          </div>
+        <% end %>
+      </div>
+      <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
+        <div class="flex items-start gap-3">
+          <svg class="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
+          </svg>
+          <div class="text-sm text-blue-800">
+            <p class="font-medium mb-1">Hours Tips:</p>
+            <ul class="text-blue-700 space-y-1">
+              <li>• Leave both times blank if closed on that day</li>
+              <li>• Use 24-hour format for clarity (e.g., 14:00 for 2:00 PM)</li>
+              <li>• These hours will be displayed to customers</li>
+            </ul>
           </div>
         </div>
       </div>
     </div>
+  </div>
 
     <!-- Inventory Management Section -->
-    <div id="inventory-management" class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100">
+    <div id="inventory-management" class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100 mb-8">
       <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
         <h2 class="text-lg font-semibold text-gray-900 flex items-center">
           <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
@@ -433,7 +663,7 @@
     </div>
 
     <!-- Location Sync Section -->
-    <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100">
+    <div class="bg-white shadow-lg rounded-xl overflow-hidden border border-gray-100 mb-8">
       <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
         <h2 class="text-lg font-semibold text-gray-900 flex items-center">
           <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
@@ -482,6 +712,7 @@
         Cancel
       <% end %>
       <%= form.submit "Save Business Information", 
+            form: "main-business-form",
             class: "inline-flex items-center px-6 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 shadow-lg hover:shadow-xl cursor-pointer" %>
     </div>
   <% end %>
@@ -599,4 +830,258 @@
   // Initialize on both DOMContentLoaded and turbo:load for Turbo compatibility
   document.addEventListener('DOMContentLoaded', initializeBusinessSettingsForm);
   document.addEventListener('turbo:load', initializeBusinessSettingsForm);
-</script> 
\ No newline at end of file
+</script> 
+
+<!-- JS for Domain Mode toggle (premium) -->
+<script type="text/javascript">
+  function initializeDomainModeToggle() {
+    const radioSub = document.getElementById('host_type_subdomain');
+    const radioCustom = document.getElementById('host_type_custom');
+    const subGroup = document.getElementById('subdomain-input-group');
+    const customGroup = document.getElementById('customdomain-input-group');
+    const canonicalSection = document.getElementById('canonical-preference-section');
+
+    if (!radioSub || !radioCustom || !subGroup || !customGroup) return;
+
+    function updateVisibility() {
+      if (radioSub.checked) {
+        subGroup.style.display = '';
+        customGroup.style.display = 'none';
+        if (canonicalSection) canonicalSection.style.display = 'none';
+      } else {
+        subGroup.style.display = 'none';
+        customGroup.style.display = '';
+        if (canonicalSection) canonicalSection.style.display = '';
+      }
+    }
+
+    // Update domain previews when custom domain input changes
+    function updateDomainPreviews() {
+      const customDomainInput = document.getElementById('display_hostname');
+      if (!customDomainInput || !canonicalSection) return;
+
+      const domainValue = customDomainInput.value.trim();
+      const cleanDomain = domainValue.replace(/^www\./, '') || 'yourdomain.com';
+      
+      // Update preview domains
+      const wwwPreview = document.getElementById('www-domain-preview');
+      const apexPreview = document.getElementById('apex-domain-preview');
+      const fromDomain = document.getElementById('from-domain');
+      const toDomain = document.getElementById('to-domain');
+      
+      if (wwwPreview) wwwPreview.textContent = `www.${cleanDomain}`;
+      if (apexPreview) apexPreview.textContent = cleanDomain;
+      
+      // Update redirect explanation based on current preference
+      const wwwRadio = document.querySelector('input[name="business[canonical_preference]"][value="www"]');
+      if (fromDomain && toDomain && wwwRadio) {
+        if (wwwRadio.checked) {
+          fromDomain.textContent = cleanDomain;
+          toDomain.textContent = `www.${cleanDomain}`;
+        } else {
+          fromDomain.textContent = `www.${cleanDomain}`;
+          toDomain.textContent = cleanDomain;
+        }
+      }
+    }
+
+    // Update redirect explanation when preference changes
+    function updateRedirectExplanation() {
+      const customDomainInput = document.getElementById('display_hostname');
+      if (!customDomainInput) return;
+
+      const domainValue = customDomainInput.value.trim();
+      const cleanDomain = domainValue.replace(/^www\./, '') || 'yourdomain.com';
+      
+      const fromDomain = document.getElementById('from-domain');
+      const toDomain = document.getElementById('to-domain');
+      const wwwRadio = document.querySelector('input[name="business[canonical_preference]"][value="www"]');
+      
+      if (fromDomain && toDomain && wwwRadio) {
+        if (wwwRadio.checked) {
+          fromDomain.textContent = cleanDomain;
+          toDomain.textContent = `www.${cleanDomain}`;
+        } else {
+          fromDomain.textContent = `www.${cleanDomain}`;
+          toDomain.textContent = cleanDomain;
+        }
+      }
+    }
+
+    radioSub.addEventListener('change', updateVisibility);
+    radioCustom.addEventListener('change', updateVisibility);
+    
+    // Listen for custom domain input changes
+    const customDomainInput = document.getElementById('display_hostname');
+    if (customDomainInput) {
+      customDomainInput.addEventListener('input', updateDomainPreviews);
+      customDomainInput.addEventListener('blur', updateDomainPreviews);
+    }
+    
+    // Listen for canonical preference changes
+    const canonicalRadios = document.querySelectorAll('input[name="business[canonical_preference]"]');
+    canonicalRadios.forEach(radio => {
+      radio.addEventListener('change', updateRedirectExplanation);
+    });
+    
+    updateVisibility();
+    updateDomainPreviews();
+  }
+
+  document.addEventListener('DOMContentLoaded', initializeDomainModeToggle);
+  document.addEventListener('turbo:load', initializeDomainModeToggle);
+</script>
+<!-- Subdomain Availability Checker -->
+<script type="text/javascript">
+  function initializeSubdomainChecker() {
+    const subdomainInput = document.getElementById('display_subdomain');
+    const customDomainInput = document.getElementById('display_hostname');
+    const subdomainRadio = document.getElementById('host_type_subdomain');
+    
+    if (!subdomainInput || !subdomainRadio) return;
+    
+    let checkTimeout;
+    let lastCheckedValue = '';
+    
+    function showValidationMessage(input, message, type = 'error') {
+      // Remove existing validation messages
+      const existingMessage = input.parentNode.querySelector('.subdomain-validation');
+      if (existingMessage) {
+        existingMessage.remove();
+      }
+      
+      if (!message) return;
+      
+      const messageDiv = document.createElement('div');
+      messageDiv.className = `subdomain-validation text-xs mt-1 ${type === 'success' ? 'text-green-600' : type === 'warning' ? 'text-yellow-600' : 'text-red-600'}`;
+      messageDiv.innerHTML = message;
+      
+      input.parentNode.appendChild(messageDiv);
+    }
+    
+    function validateSubdomainFormat(subdomain) {
+      if (!subdomain) return { valid: false, message: '' };
+      
+      // Check length (3-63 characters)
+      if (subdomain.length < 3) {
+        return { valid: false, message: 'Subdomain must be at least 3 characters long' };
+      }
+      if (subdomain.length > 63) {
+        return { valid: false, message: 'Subdomain must be 63 characters or less' };
+      }
+      
+      // Check format: alphanumeric and hyphens, no hyphens at start/end
+      const validFormat = /^[a-z0-9]([a-z0-9-]*[a-z0-9])?$/.test(subdomain);
+      if (!validFormat) {
+        return { valid: false, message: 'Only lowercase letters, numbers, and hyphens allowed. Cannot start or end with hyphen' };
+      }
+      
+      // Check for reserved words
+      const reserved = ['www', 'mail', 'ftp', 'admin', 'root', 'api', 'app', 'support', 'help', 'blog', 'shop', 'store'];
+      if (reserved.includes(subdomain.toLowerCase())) {
+        return { valid: false, message: 'This subdomain is reserved and cannot be used' };
+      }
+      
+      return { valid: true, message: '' };
+    }
+    
+    async function checkSubdomainAvailability(subdomain) {
+      try {
+        const url = '<%= check_subdomain_availability_business_manager_settings_business_path %>?subdomain=' + encodeURIComponent(subdomain);
+        const response = await fetch(url, {
+          method: 'GET',
+          headers: { 'Accept': 'application/json' }
+        });
+        
+        const data = await response.json();
+        return data;
+      } catch (error) {
+        console.error('Error checking subdomain availability:', error);
+        return { available: false, message: 'Unable to check availability. Please try again.' };
+      }
+    }
+    
+    function handleSubdomainCheck() {
+      const currentValue = subdomainInput.value.toLowerCase().trim();
+      
+      // Skip if value hasn't changed or is empty
+      if (currentValue === lastCheckedValue || !currentValue) {
+        if (!currentValue) showValidationMessage(subdomainInput, '');
+        return;
+      }
+      
+      lastCheckedValue = currentValue;
+      
+      // Format validation first
+      const formatCheck = validateSubdomainFormat(currentValue);
+      if (!formatCheck.valid) {
+        showValidationMessage(subdomainInput, formatCheck.message, 'error');
+        return;
+      }
+      
+      // Show checking message
+      showValidationMessage(subdomainInput, '⏳ Checking availability...', 'warning');
+      
+      // Check availability
+      checkSubdomainAvailability(currentValue).then(result => {
+        if (result.available) {
+          showValidationMessage(subdomainInput, '✅ Available! Will appear as ' + currentValue + '.bizblasts.com', 'success');
+        } else {
+          showValidationMessage(subdomainInput, '❌ ' + (result.message || 'This subdomain is not available'), 'error');
+        }
+      });
+    }
+    
+    // Add event listeners
+    subdomainInput.addEventListener('input', function() {
+      // Only check if subdomain radio is selected
+      if (!subdomainRadio.checked) return;
+      
+      clearTimeout(checkTimeout);
+      checkTimeout = setTimeout(handleSubdomainCheck, 500); // Debounce 500ms
+    });
+    
+    subdomainInput.addEventListener('blur', function() {
+      // Only check if subdomain radio is selected
+      if (!subdomainRadio.checked) return;
+      
+      clearTimeout(checkTimeout);
+      handleSubdomainCheck();
+    });
+    
+    // Clear validation when switching away from subdomain
+    subdomainRadio.addEventListener('change', function() {
+      if (!this.checked) {
+        showValidationMessage(subdomainInput, '');
+      }
+    });
+    
+    // Trigger check on radio button change if there's already a value
+    subdomainRadio.addEventListener('change', function() {
+      if (this.checked && subdomainInput.value.trim()) {
+        lastCheckedValue = ''; // Reset to force check
+        handleSubdomainCheck();
+      }
+    });
+  }
+  
+  // Set the URL for the domain status checker
+  window.domainStatusCheckUrl = '<%= check_domain_status_business_manager_settings_business_path %>';
+  window.finalizeDomainActivationUrl = '<%= finalize_domain_activation_business_manager_settings_business_path %>';
+  window.domainIsActive = <%= @business.custom_domain_allow? ? 'true' : 'false' %>;
+  
+  // Initialize domain status checker on page load
+  function initializeDomainStatusChecker() {
+    const isActive = <%= @business.custom_domain_allow? %>;
+    if (typeof window.initializeDomainStatusChecker === 'function') {
+      window.initializeDomainStatusChecker(isActive);
+    }
+  }
+  
+  document.addEventListener('DOMContentLoaded', initializeSubdomainChecker);
+  document.addEventListener('turbo:load', initializeSubdomainChecker);
+  document.addEventListener('DOMContentLoaded', initializeDomainStatusChecker);
+  document.addEventListener('turbo:load', initializeDomainStatusChecker);
+</script>
+
+ 
\ No newline at end of file
diff --git a/app/views/business_manager/settings/subscriptions/show.html.erb b/app/views/business_manager/settings/subscriptions/show.html.erb
index 2400276..0c71352 100644
--- a/app/views/business_manager/settings/subscriptions/show.html.erb
+++ b/app/views/business_manager/settings/subscriptions/show.html.erb
@@ -30,7 +30,7 @@
     </div>
 
     <div class="px-4 py-5 sm:px-6">
-      <% if @subscription && @subscription.persisted? %>
+      <% if (@subscription && @subscription.persisted?) || @business.tier != 'free' %>
         <!-- Current Subscription Details -->
         <div class="bg-gray-50 rounded-lg p-6 mb-6">
           <h2 class="text-lg font-semibold text-gray-900 mb-4">Current Subscription</h2>
@@ -38,19 +38,28 @@
           <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
             <div>
               <div class="text-sm text-gray-500">Plan</div>
-              <div class="text-lg font-medium text-gray-900"><%= @subscription.plan_name.titleize %></div>
+              <div class="text-lg font-medium text-gray-900"><%= @subscription&.plan_name&.titleize || '—' %></div>
             </div>
             <div>
               <div class="text-sm text-gray-500">Status</div>
               <div class="text-lg font-medium">
-                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium <%= @subscription.status == 'active' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800' %>">
-                  <%= @subscription.status.titleize %>
+                <% subscription_status = @subscription&.status %>
+                <% status_label = subscription_status.present? ? subscription_status.titleize : 'None' %>
+                <% badge_classes = subscription_status == 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800' %>
+                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium <%= badge_classes %>">
+                  <%= status_label %>
                 </span>
               </div>
             </div>
             <div>
               <div class="text-sm text-gray-500">Current Period End</div>
-              <div class="text-lg font-medium text-gray-900"><%= l @subscription.current_period_end, format: :long %></div>
+              <div class="text-lg font-medium text-gray-900">
+                <% if @subscription&.current_period_end.present? %>
+                  <%= l @subscription.current_period_end, format: :long %>
+                <% else %>
+                  —
+                <% end %>
+              </div>
             </div>
             <div>
               <div class="text-sm text-gray-500">Business Tier</div>
@@ -67,10 +76,251 @@
             </div>
           </div>
 
-          <div class="pt-4 border-t border-gray-200">
-            <%= button_to "Manage Subscription", business_manager_settings_subscription_portal_path, 
-                  method: :post, 
-                  class: "inline-flex items-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2" %>
+          <div class="pt-4 border-t border-gray-200 space-y-4">
+            
+            <% if @business.tier == 'standard' %>
+              <div class="grid md:grid-cols-2 gap-6 mb-6">
+                <!-- Upgrade to Premium -->
+                <div class="border-2 border-purple-300 rounded-xl p-6 bg-purple-50 flex flex-col h-full">
+                  <div class="text-center flex-1">
+                    <h3 class="text-xl font-bold text-gray-900 mb-2">Upgrade to Premium</h3>
+                    <div class="text-3xl font-bold text-purple-600 mb-4">$29.99<span class="text-sm text-gray-500">/month</span></div>
+                    
+                    <div class="space-y-3 text-left text-sm text-gray-600 mb-6">
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-green-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
+                        </svg>
+                        Unlimited staff members
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-purple-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
+                        </svg>
+                        <span class="text-purple-700 font-medium">Custom Domain</span>
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-green-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
+                        </svg>
+                        Smaller transaction fees (3%)
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-green-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
+                        </svg>
+                        Priority support
+                      </div>
+                    </div>
+
+                    <!-- Domain Coverage Policy -->
+                    <div class="bg-purple-100 border border-purple-200 rounded-lg p-3 mb-4 text-left">
+                      <h4 class="text-sm font-medium text-purple-900 mb-2">💰 Domain Coverage Policy</h4>
+                      <ul class="text-xs text-purple-800 space-y-1">
+                        <li>• BizBlasts covers up to $20/year for new domain registration</li>
+                        <li>• Auto-renewal setup: We pay domain costs annually up to $20</li>
+                        <li>• Domains over $20/year: You obtain your own domain</li>
+                        <li>• If you already own your domain, you handle domain costs</li>
+                        <li>• Our team manages all technical setup and verification</li>
+                      </ul>
+                    </div>
+                  </div>
+                  
+                  <div class="text-center mt-auto">
+                    <!-- Upgrade Button (Initially Visible) -->
+                    <div id="standard-premium-upgrade-section">
+                      <button type="button"
+                              id="standard-premium-upgrade-btn"
+                              onclick="toggleDomainInput('standard-premium')"
+                              class="w-full inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 cursor-pointer">
+                        Upgrade to Premium
+                      </button>
+                    </div>
+
+                    <!-- Domain Input Section (Initially Hidden) -->
+                    <div id="standard-premium-domain-section" class="hidden">
+                      <label for="standard-premium-hostname" class="block text-sm font-medium text-gray-700 mb-2 text-left">Hostname</label>
+                      <input type="text" 
+                             id="standard-premium-hostname" 
+                             name="hostname" 
+                             placeholder="yourdomain.com"
+                             class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-sm mb-4"
+                      <p class="text-xs text-gray-600 mt-2 text-left">Enter your desired custom domain or leave blank to skip this feature. Use <%= link_to "www.instantdomainsearch.com", "https://www.instantdomainsearch.com", target: "_blank", class: "text-purple-600 hover:text-purple-800 underline" %> to help you verify availability. You must own the domain and configure DNS records to point to BizBlasts (we'll provide setup instructions).</p>
+                      <p class="text-xs text-purple-600 mt-1 text-left mb-4">💡 Domain Coverage: BizBlasts covers up to $20/year for new domains. For domains over $20/year, we'll contact you with alternatives.</p>
+
+                      <!-- Form for submission -->
+                      <%= form_with url: business_manager_settings_subscription_checkout_path(price_id: ENV['STRIPE_PREMIUM_PRICE_ID']), 
+                                    method: :post, 
+                                    local: true,
+                                    data: { turbo: false },
+                                    id: "standard-premium-upgrade-form" do |form| %>
+                        <%= form.hidden_field :hostname, id: "standard-premium-hostname-hidden" %>
+                        <%= form.submit "Proceed to Payment", 
+                              class: "w-full inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 cursor-pointer mb-2" %>
+                      <% end %>
+                      
+                      <button type="button" 
+                              onclick="hideDomainInput('standard-premium')"
+                              class="text-sm text-gray-500 hover:text-gray-700 underline cursor-pointer">
+                        Cancel
+                      </button>
+                    </div>
+                  </div>
+                </div>
+
+                <!-- Downgrade to Free -->
+                <div class="border-2 border-red-300 rounded-xl p-6 bg-red-50 flex flex-col h-full">
+                  <div class="text-center flex-1">
+                    <h3 class="text-xl font-bold text-gray-900 mb-2">Downgrade to Free</h3>
+                    <div class="text-lg font-medium text-red-600 mb-4">Features you will lose:</div>
+                    
+                    <div class="space-y-3 text-left text-sm text-gray-600 mb-6">
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        More Features
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Staff management (1-3 members)
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Customizable Pages
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Enhanced analytics
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Text Reminders
+                      </div>
+                    </div>
+                  </div>
+                  
+                  <div class="text-center mt-auto">
+                    <%= button_to "Downgrade to Free",
+                          business_manager_settings_subscription_downgrade_path(target_tier: 'free'),
+                          method: :post,
+                          data: { turbo_confirm: 'Are you sure you want to downgrade to the Free tier? This will take effect at the end of your current billing period.' },
+                          class: "w-full inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-red-600 hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 cursor-pointer" %>
+                  </div>
+                </div>
+              </div>
+            <% elsif @business.tier == 'premium' %>
+              <div class="grid md:grid-cols-2 gap-6 mb-6">
+                <!-- Downgrade to Standard -->
+                <div class="border-2 border-orange-300 rounded-xl p-6 bg-orange-50 flex flex-col h-full">
+                  <div class="text-center flex-1">
+                    <h3 class="text-xl font-bold text-gray-900 mb-2">Downgrade to Standard</h3>
+                    <div class="text-3xl font-bold text-blue-600 mb-4">$9.99<span class="text-sm text-gray-500">/month</span></div>
+                    <div class="text-lg font-medium text-orange-600 mb-4">Features you will lose:</div>
+                    
+                    <div class="space-y-3 text-left text-sm text-gray-600 mb-6">
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        <span class="text-purple-700 font-medium">Custom Domain</span>
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Higher transaction fees (3% → 5%)
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Priority support
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Unlimited staff (limited to 3 on Standard)
+                      </div>
+                    </div>
+                  </div>
+                  
+                  <div class="text-center mt-auto">
+                    <%= button_to "Downgrade to Standard",
+                          business_manager_settings_subscription_downgrade_path(target_tier: 'standard'),
+                          method: :post,
+                          data: { turbo_confirm: 'Downgrade to Standard tier? Your pricing will change immediately.' },
+                          class: "w-full inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 transition-colors focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 cursor-pointer" %>
+                  </div>
+                </div>
+
+                <!-- Downgrade to Free -->
+                <div class="border-2 border-red-300 rounded-xl p-6 bg-red-50 flex flex-col h-full">
+                  <div class="text-center flex-1">
+                    <h3 class="text-xl font-bold text-gray-900 mb-2">Downgrade to Free</h3>
+                    <div class="text-lg font-medium text-red-600 mb-4">Features you will lose:</div>
+                    
+                    <div class="space-y-3 text-left text-sm text-gray-600 mb-6">
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        All Premium and Standard features
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Staff management
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Customizable Pages
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Enhanced analytics
+                      </div>
+                      <div class="flex items-center">
+                        <svg class="w-4 h-4 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
+                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
+                        </svg>
+                        Text Reminders
+                      </div>
+                    </div>
+                  </div>
+                  
+                  <div class="text-center mt-auto">
+                    <%= button_to "Downgrade to Free",
+                          business_manager_settings_subscription_downgrade_path(target_tier: 'free'),
+                          method: :post,
+                          data: { turbo_confirm: 'Downgrade to Free tier? Your Premium subscription will be cancelled at period end.' },
+                          class: "w-full inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-red-600 hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 cursor-pointer" %>
+                  </div>
+                </div>
+              </div>
+            <% end %>
+          </div>
+          
+          <!-- Manage Subscription Button -->
+          <div class="mt-6 text-center">
+            <%= button_to "Manage Subscription", business_manager_settings_subscription_portal_path,
+                  method: :post,
+                  data: { turbo: false },
+                  class: "inline-flex items-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer" %>
           </div>
         </div>
       <% else %>
@@ -97,10 +347,10 @@
         <!-- Subscription Plans -->
         <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
           <!-- Standard Plan -->
-          <div class="border-2 border-gray-200 rounded-xl p-6 hover:border-blue-300 transition-colors">
-            <div class="text-center">
+          <div class="border-2 border-gray-200 rounded-xl p-6 hover:border-blue-300 transition-colors flex flex-col h-full">
+            <div class="text-center flex-1">
               <h3 class="text-xl font-bold text-gray-900 mb-2">Standard Plan</h3>
-              <div class="text-3xl font-bold text-blue-600 mb-4">$49<span class="text-sm text-gray-500">/month</span></div>
+              <div class="text-3xl font-bold text-blue-600 mb-4">$9.99<span class="text-sm text-gray-500">/month</span></div>
               
               <div class="space-y-3 text-left text-sm text-gray-600 mb-6">
                 <div class="flex items-center">
@@ -134,19 +384,22 @@
                   Text Reminders
                 </div>
               </div>
-              
+            </div>
+            
+            <div class="text-center mt-auto">
               <%= button_to "Upgrade to Standard", 
                     business_manager_settings_subscription_checkout_path(price_id: ENV['STRIPE_STANDARD_PRICE_ID']), 
                     method: :post, 
+                    data: { turbo: false },
                     class: "w-full inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 cursor-pointer" %>
             </div>
           </div>
 
           <!-- Premium Plan -->
-          <div class="border-2 border-purple-300 rounded-xl p-6 relative bg-purple-50">
-            <div class="text-center">
+          <div class="border-2 border-purple-300 rounded-xl p-6 relative bg-purple-50 flex flex-col h-full">
+            <div class="text-center flex-1">
               <h3 class="text-xl font-bold text-gray-900 mb-2">Premium Plan</h3>
-              <div class="text-3xl font-bold text-purple-600 mb-4">$99<span class="text-sm text-gray-500">/month</span></div>
+              <div class="text-3xl font-bold text-purple-600 mb-4">$29.99<span class="text-sm text-gray-500">/month</span></div>
               
               <div class="space-y-3 text-left text-sm text-gray-600 mb-6">
                 <div class="flex items-center">
@@ -192,11 +445,47 @@
                   <li>• Our team manages all technical setup and verification</li>
                 </ul>
               </div>
-              
-              <%= button_to "Upgrade to Premium", 
-                    business_manager_settings_subscription_checkout_path(price_id: ENV['STRIPE_PREMIUM_PRICE_ID']), 
-                    method: :post, 
-                    class: "w-full inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 cursor-pointer" %>
+            </div>
+            
+            <div class="text-center mt-auto">
+              <!-- Upgrade Button (Initially Visible) -->
+              <div id="free-premium-upgrade-section">
+                <button type="button"
+                        id="free-premium-upgrade-btn"
+                        onclick="toggleDomainInput('free-premium')"
+                        class="w-full inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 cursor-pointer">
+                  Upgrade to Premium
+                </button>
+              </div>
+
+              <!-- Domain Input Section (Initially Hidden) -->
+              <div id="free-premium-domain-section" class="hidden">
+                <label for="free-premium-hostname" class="block text-sm font-medium text-gray-700 mb-2 text-left">Hostname</label>
+                <input type="text" 
+                       id="free-premium-hostname" 
+                       name="hostname" 
+                       placeholder="yourdomain.com"
+                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-purple-500 focus:border-purple-500 text-sm mb-4"
+                <p class="text-xs text-gray-600 mt-2 text-left">Enter your desired custom domain or leave blank to skip this feature. Use <%= link_to "www.instantdomainsearch.com", "https://www.instantdomainsearch.com", target: "_blank", class: "text-purple-600 hover:text-purple-800 underline" %> to help you verify availability. You must own the domain and configure DNS records to point to BizBlasts (we'll provide setup instructions).</p>
+                <p class="text-xs text-purple-600 mt-1 text-left mb-4">💡 Domain Coverage: BizBlasts covers up to $20/year for new domains. For domains over $20/year, we'll contact you with alternatives.</p>
+
+                <!-- Form for submission -->
+                <%= form_with url: business_manager_settings_subscription_checkout_path(price_id: ENV['STRIPE_PREMIUM_PRICE_ID']), 
+                              method: :post, 
+                              local: true,
+                              data: { turbo: false },
+                              id: "free-premium-upgrade-form" do |form| %>
+                  <%= form.hidden_field :hostname, id: "free-premium-hostname-hidden" %>
+                  <%= form.submit "Proceed to Payment", 
+                        class: "w-full inline-flex items-center justify-center px-6 py-3 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 cursor-pointer mb-2" %>
+                <% end %>
+                
+                <button type="button" 
+                        onclick="hideDomainInput('free-premium')"
+                        class="text-sm text-gray-500 hover:text-gray-700 underline cursor-pointer">
+                  Cancel
+                </button>
+              </div>
             </div>
           </div>
         </div>
@@ -207,4 +496,76 @@
       <% end %>
     </div>
   </div>
-</div> 
\ No newline at end of file
+</div>
+
+<script>
+// Store references to event handlers to avoid memory leaks
+const domainInputHandlers = {};
+
+function toggleDomainInput(tier) {
+  const domainSection = document.getElementById(tier + '-domain-section');
+  const upgradeSection = document.getElementById(tier + '-upgrade-section');
+  
+  // Hide upgrade button section and show domain input section
+  upgradeSection.classList.add('hidden');
+  domainSection.classList.remove('hidden');
+  
+  // Focus on the hostname input
+  const hostnameInput = document.getElementById(tier + '-hostname');
+  hostnameInput.focus();
+  
+  // Remove existing event listener if it exists to prevent duplicates
+  if (domainInputHandlers[tier]) {
+    hostnameInput.removeEventListener('input', domainInputHandlers[tier]);
+  }
+  
+  // Create and store the event handler
+  domainInputHandlers[tier] = function() {
+    const hiddenField = document.getElementById(tier + '-hostname-hidden');
+    hiddenField.value = this.value;
+  };
+  
+  // Add the event listener
+  hostnameInput.addEventListener('input', domainInputHandlers[tier]);
+}
+
+function hideDomainInput(tier) {
+  const domainSection = document.getElementById(tier + '-domain-section');
+  const upgradeSection = document.getElementById(tier + '-upgrade-section');
+  const hostnameInput = document.getElementById(tier + '-hostname');
+  const hiddenField = document.getElementById(tier + '-hostname-hidden');
+  
+  // Remove event listener to prevent memory leaks
+  if (domainInputHandlers[tier]) {
+    hostnameInput.removeEventListener('input', domainInputHandlers[tier]);
+    delete domainInputHandlers[tier];
+  }
+  
+  // Hide domain input section and show upgrade button section
+  domainSection.classList.add('hidden');
+  upgradeSection.classList.remove('hidden');
+  
+  // Clear the input values
+  hostnameInput.value = '';
+  hiddenField.value = '';
+}
+
+// Form validation before submission
+document.addEventListener('DOMContentLoaded', function() {
+  const forms = ['standard-premium-upgrade-form', 'free-premium-upgrade-form'];
+  
+  forms.forEach(function(formId) {
+    const form = document.getElementById(formId);
+    if (form) {
+      form.addEventListener('submit', function(e) {
+        const tier = formId.includes('standard') ? 'standard-premium' : 'free-premium';
+        const hostnameInput = document.getElementById(tier + '-hostname');
+        const hiddenField = document.getElementById(tier + '-hostname-hidden');
+        
+        // Update hidden field with current input value (can be empty)
+        hiddenField.value = hostnameInput.value.trim();
+      });
+    }
+  });
+});
+</script> 
\ No newline at end of file
diff --git a/app/views/business_manager/staff_members/index.html.erb b/app/views/business_manager/staff_members/index.html.erb
index f1a2be5..e3e21d5 100644
--- a/app/views/business_manager/staff_members/index.html.erb
+++ b/app/views/business_manager/staff_members/index.html.erb
@@ -41,11 +41,11 @@
           </p>
           <div class="mt-6 flex flex-col sm:flex-row gap-4 justify-center">
             <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
-              <h4 class="font-medium text-blue-900">Standard Plan - $49/month</h4>
+              <h4 class="font-medium text-blue-900">Standard Plan - $9.99/month</h4>
               <p class="text-sm text-blue-700 mt-1">1-3 staff members, reduced fees</p>
             </div>
             <div class="bg-purple-50 p-4 rounded-lg border border-purple-200">
-              <h4 class="font-medium text-purple-900">Premium Plan - $99/month</h4>
+              <h4 class="font-medium text-purple-900">Premium Plan - $29.99/month</h4>
               <p class="text-sm text-purple-700 mt-1">Unlimited staff, custom domain</p>
             </div>
           </div>
@@ -68,7 +68,7 @@
           </p>
           <div class="mt-6 flex flex-col sm:flex-row gap-4 justify-center">
             <div class="bg-purple-50 p-4 rounded-lg border border-purple-200">
-              <h4 class="font-medium text-purple-900">Premium Plan - $99/month</h4>
+              <h4 class="font-medium text-purple-900">Premium Plan - $29.99/month</h4>
               <p class="text-sm text-purple-700 mt-1">Unlimited staff, custom domain, priority support</p>
             </div>
           </div>
diff --git a/app/views/carts/show.html.erb b/app/views/carts/show.html.erb
index 9126c0d..9f2b51c 100644
--- a/app/views/carts/show.html.erb
+++ b/app/views/carts/show.html.erb
@@ -31,9 +31,9 @@
                   <div class="text-sm text-gray-700"><%= variant.name %></div>
                 </td>
                 <td class="px-6 py-4 whitespace-nowrap">
-                  <%= form_with(url: line_item_path(variant.id), method: :patch, class: 'flex items-center space-x-2', data: { remote: true }) do |f| %>
+                  <%= form_with(url: line_item_path(variant.id), method: :patch, local: true, class: 'flex items-center space-x-2') do |f| %>
                     <%= f.number_field :quantity, value: quantity, min: 1, class: 'w-16 px-2 py-1 border border-gray-300 rounded-md text-center focus:ring-2 focus:ring-primary focus:border-primary' %>
-                    <%= f.submit 'Update', class: 'px-3 py-1 bg-secondary text-white text-xs rounded-md hover:bg-opacity-90 transition-colors duration-200' %>
+                    <%= f.submit 'Update', class: 'px-3 py-1 bg-secondary text-white text-xs rounded-md hover:bg-opacity-90 transition-colors duration-200 cursor-pointer' %>
                   <% end %>
                 </td>
                 <td class="px-6 py-4 whitespace-nowrap">
@@ -50,8 +50,8 @@
                   <div class="text-sm font-bold text-primary"><%= number_to_currency(display_price * quantity) %></div>
                 </td>
                 <td class="px-6 py-4 whitespace-nowrap">
-                  <%= button_to 'Remove', line_item_path(variant.id), method: :delete, remote: true, 
-                      class: 'inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-error hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-error transition-colors duration-200',
+                  <%= button_to 'Remove', line_item_path(variant.id), method: :delete, 
+                      class: 'inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-error hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-error transition-colors duration-200 cursor-pointer',
                       data: { confirm: 'Are you sure you want to remove this item?' } %>
                 </td>
               </tr>
diff --git a/app/views/client/registrations/new.html.erb b/app/views/client/registrations/new.html.erb
index 4b3fee0..329f261 100644
--- a/app/views/client/registrations/new.html.erb
+++ b/app/views/client/registrations/new.html.erb
@@ -138,7 +138,7 @@
           <!-- Notification Consent Checkbox -->
           <div class="flex items-start border-t border-gray-200 pt-3 mt-3">
             <%= f.check_box :bizblasts_notification_consent, 
-                  { checked: true, class: "mt-1 h-4 w-4 text-primary border-gray-300 rounded focus:ring-primary" }, 
+                  { class: "mt-1 h-4 w-4 text-primary border-gray-300 rounded focus:ring-primary" }, 
                   "1", "0" %>
             <label for="user_bizblasts_notification_consent" class="ml-3 text-sm text-gray-700">
               I would like to receive notifications from BizBlasts (email confirmations, text reminders, promotions, updates, etc.)
diff --git a/app/views/client_bookings/show.html.erb b/app/views/client_bookings/show.html.erb
index 66563bb..2dd394b 100644
--- a/app/views/client_bookings/show.html.erb
+++ b/app/views/client_bookings/show.html.erb
@@ -104,7 +104,7 @@
           </div>
           <div class="mt-3">
             <% if request.subdomain.present? && request.subdomain != 'www' %>
-              <%= link_to 'View Invoice Details', tenant_transaction_path(@booking.invoice, type: 'invoice'), 
+              <%= link_to 'View Invoice Details', transaction_path(@booking.invoice, type: 'invoice'), 
                   class: "bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm" %>
             <% else %>
               <%= link_to 'View Invoice Details', transaction_path(@booking.invoice, type: 'invoice'), 
diff --git a/app/views/docs/content/_custom-domain-faq.html.erb b/app/views/docs/content/_custom-domain-faq.html.erb
new file mode 100644
index 0000000..2dcb47d
--- /dev/null
+++ b/app/views/docs/content/_custom-domain-faq.html.erb
@@ -0,0 +1,521 @@
+<div class="space-y-8">
+  <!-- Welcome Section -->
+  <div class="bg-gradient-to-r from-primary to-secondary text-white rounded-2xl p-6 sm:p-8">
+    <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold mb-4">🌐 Custom Domain Setup FAQ</h2>
+    <p class="text-lg sm:text-xl leading-relaxed opacity-90">
+      Step-by-step instructions for setting up CNAME records with popular domain registrars for BizBlasts Premium businesses.
+    </p>
+  </div>
+
+  <!-- Quick Reference -->
+  <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sm:p-8">
+    <h3 class="text-xl sm:text-2xl font-bold text-dark mb-6">⚡ Quick Reference</h3>
+    <div class="bg-gray-50 rounded-lg p-6">
+      <h4 class="font-bold text-lg mb-4">Your DNS Configuration (2 Records Required):</h4>
+      
+      <div class="mb-6">
+        <h5 class="font-semibold text-gray-800 mb-2">Record 1: A Record (Root Domain)</h5>
+        <div class="grid sm:grid-cols-2 gap-4 text-sm">
+          <div class="flex items-center">
+            <span class="font-semibold text-gray-700 w-24">Name/Host:</span>
+            <code class="bg-white px-2 py-1 rounded border">@</code>
+          </div>
+          <div class="flex items-center">
+            <span class="font-semibold text-gray-700 w-16">Type:</span>
+            <code class="bg-white px-2 py-1 rounded border">A</code>
+          </div>
+          <div class="flex items-center">
+            <span class="font-semibold text-gray-700 w-24">Target:</span>
+            <code class="bg-white px-2 py-1 rounded border">216.24.57.1</code>
+          </div>
+          <div class="flex items-center">
+            <span class="font-semibold text-gray-700 w-16">TTL:</span>
+            <code class="bg-white px-2 py-1 rounded border">300</code>
+            <span class="text-gray-600 ml-2">(5 minutes)</span>
+          </div>
+        </div>
+      </div>
+
+      <div class="mb-4">
+        <h5 class="font-semibold text-gray-800 mb-2">Record 2: CNAME Record (WWW Subdomain)</h5>
+        <div class="grid sm:grid-cols-2 gap-4 text-sm">
+          <div class="flex items-center">
+            <span class="font-semibold text-gray-700 w-24">Name/Host:</span>
+            <code class="bg-white px-2 py-1 rounded border">www</code>
+          </div>
+          <div class="flex items-center">
+            <span class="font-semibold text-gray-700 w-16">Type:</span>
+            <code class="bg-white px-2 py-1 rounded border">CNAME</code>
+          </div>
+          <div class="flex items-center">
+            <span class="font-semibold text-gray-700 w-24">Target:</span>
+            <code class="bg-white px-2 py-1 rounded border">yourbusiness.bizblasts.com</code>
+          </div>
+          <div class="flex items-center">
+            <span class="font-semibold text-gray-700 w-16">TTL:</span>
+            <code class="bg-white px-2 py-1 rounded border">300</code>
+            <span class="text-gray-600 ml-2">(5 minutes)</span>
+          </div>
+        </div>
+      </div>
+
+      <div class="p-3 bg-yellow-50 border-l-4 border-yellow-400">
+        <p class="text-sm text-yellow-800">
+          <strong>⚠️ Important:</strong> Both records are required. The A record handles your root domain (example.com) and the CNAME handles the www subdomain (www.example.com).
+        </p>
+      </div>
+    </div>
+  </div>
+
+  <!-- Registrar Instructions -->
+  <div class="space-y-6">
+    <h3 class="text-2xl font-bold text-dark">📋 Registrar-Specific Instructions</h3>
+
+    <!-- GoDaddy -->
+    <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sm:p-8">
+      <div class="flex items-center mb-6">
+        <div class="w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center mr-4">
+          <span class="text-white font-bold text-lg">G</span>
+        </div>
+        <h4 class="text-xl font-bold text-dark">GoDaddy</h4>
+      </div>
+      
+      <div class="space-y-4">
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">1</span>
+          <div>
+            <p class="font-semibold">Log into GoDaddy</p>
+            <p class="text-gray-600">Go to <a href="https://godaddy.com" class="text-primary hover:underline">godaddy.com</a> and sign in</p>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">2</span>
+          <div>
+            <p class="font-semibold">Access DNS Management</p>
+            <p class="text-gray-600">Click "My Products" → "DNS" next to your domain</p>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">3</span>
+          <div>
+            <p class="font-semibold">Add A Record</p>
+            <div class="text-gray-600">
+              <p>Click "Add" button and configure:</p>
+              <ul class="list-disc list-inside mt-2 space-y-1">
+                <li><strong>Type:</strong> Select "A"</li>
+                <li><strong>Name:</strong> Enter <code class="bg-gray-100 px-1 rounded">@</code></li>
+                <li><strong>Value:</strong> Enter <code class="bg-gray-100 px-1 rounded">216.24.57.1</code></li>
+                <li><strong>TTL:</strong> "Custom: 300 seconds"</li>
+              </ul>
+            </div>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">4</span>
+          <div>
+            <p class="font-semibold">Add CNAME Record</p>
+            <div class="text-gray-600">
+              <p>Click "Add" button and configure:</p>
+              <ul class="list-disc list-inside mt-2 space-y-1">
+                <li><strong>Type:</strong> Select "CNAME"</li>
+                <li><strong>Name:</strong> Enter <code class="bg-gray-100 px-1 rounded">www</code></li>
+                <li><strong>Value:</strong> Enter <code class="bg-gray-100 px-1 rounded">yourbusiness.bizblasts.com</code></li>
+                <li><strong>TTL:</strong> "Custom: 300 seconds"</li>
+              </ul>
+            </div>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">5</span>
+          <div>
+            <p class="font-semibold">Remove Conflicting Records</p>
+            <p class="text-gray-600">Delete any existing records that conflict with these settings</p>
+          </div>
+        </div>
+      </div>
+      
+      <div class="mt-6 p-4 bg-blue-50 rounded-lg">
+        <p class="text-sm text-blue-800">
+          <strong>📝 GoDaddy Notes:</strong> Changes typically take 10-15 minutes to propagate. You may need to wait up to 1 hour for full global propagation.
+        </p>
+      </div>
+    </div>
+
+    <!-- Namecheap -->
+    <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sm:p-8">
+      <div class="flex items-center mb-6">
+        <div class="w-12 h-12 bg-orange-600 rounded-lg flex items-center justify-center mr-4">
+          <span class="text-white font-bold text-lg">N</span>
+        </div>
+        <h4 class="text-xl font-bold text-dark">Namecheap</h4>
+      </div>
+      
+      <div class="space-y-4">
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">1</span>
+          <div>
+            <p class="font-semibold">Log into Namecheap</p>
+            <p class="text-gray-600">Go to <a href="https://namecheap.com" class="text-primary hover:underline">namecheap.com</a> and sign in</p>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">2</span>
+          <div>
+            <p class="font-semibold">Access Domain List</p>
+            <p class="text-gray-600">Click "Domain List" in the left sidebar</p>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">3</span>
+          <div>
+            <p class="font-semibold">Manage DNS</p>
+            <p class="text-gray-600">Find your domain, click "Manage", then "Advanced DNS" tab</p>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">4</span>
+          <div>
+            <p class="font-semibold">Add A Record</p>
+            <div class="text-gray-600">
+              <p>Click "Add New Record" and configure:</p>
+              <ul class="list-disc list-inside mt-2 space-y-1">
+                <li><strong>Type:</strong> Select "A Record"</li>
+                <li><strong>Host:</strong> Enter <code class="bg-gray-100 px-1 rounded">@</code></li>
+                <li><strong>Value:</strong> Enter <code class="bg-gray-100 px-1 rounded">216.24.57.1</code></li>
+                <li><strong>TTL:</strong> Select "5 min"</li>
+              </ul>
+            </div>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">5</span>
+          <div>
+            <p class="font-semibold">Add CNAME Record</p>
+            <div class="text-gray-600">
+              <p>Click "Add New Record" and configure:</p>
+              <ul class="list-disc list-inside mt-2 space-y-1">
+                <li><strong>Type:</strong> Select "CNAME Record"</li>
+                <li><strong>Host:</strong> Enter <code class="bg-gray-100 px-1 rounded">www</code></li>
+                <li><strong>Value:</strong> Enter <code class="bg-gray-100 px-1 rounded">yourbusiness.bizblasts.com</code></li>
+                <li><strong>TTL:</strong> Select "5 min"</li>
+              </ul>
+            </div>
+          </div>
+        </div>
+      </div>
+      
+      <div class="mt-6 p-4 bg-orange-50 rounded-lg">
+        <p class="text-sm text-orange-800">
+          <strong>📝 Namecheap Notes:</strong> Changes usually propagate within 5-30 minutes. Namecheap automatically adds a trailing dot to CNAME values.
+        </p>
+      </div>
+    </div>
+
+    <!-- Cloudflare -->
+    <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sm:p-8">
+      <div class="flex items-center mb-6">
+        <div class="w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center mr-4">
+          <span class="text-white font-bold text-lg">C</span>
+        </div>
+        <h4 class="text-xl font-bold text-dark">Cloudflare</h4>
+      </div>
+      
+      <div class="space-y-4">
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">1</span>
+          <div>
+            <p class="font-semibold">Log into Cloudflare</p>
+            <p class="text-gray-600">Go to <a href="https://cloudflare.com" class="text-primary hover:underline">cloudflare.com</a> and sign in</p>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">2</span>
+          <div>
+            <p class="font-semibold">Select Your Domain</p>
+            <p class="text-gray-600">Click on your domain from the dashboard</p>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">3</span>
+          <div>
+            <p class="font-semibold">Add A Record</p>
+            <div class="text-gray-600">
+              <p>Click "DNS" → "Add record" and configure:</p>
+              <ul class="list-disc list-inside mt-2 space-y-1">
+                <li><strong>Type:</strong> Select "A"</li>
+                <li><strong>Name:</strong> Enter <code class="bg-gray-100 px-1 rounded">@</code></li>
+                <li><strong>Target:</strong> Enter <code class="bg-gray-100 px-1 rounded">216.24.57.1</code></li>
+                <li><strong>Proxy status:</strong> Toggle OFF (gray cloud) - <strong class="text-red-600">Very Important!</strong></li>
+                <li><strong>TTL:</strong> Select "Auto" or "5 minutes"</li>
+              </ul>
+            </div>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">4</span>
+          <div>
+            <p class="font-semibold">Add CNAME Record</p>
+            <div class="text-gray-600">
+              <p>Click "DNS" → "Add record" and configure:</p>
+              <ul class="list-disc list-inside mt-2 space-y-1">
+                <li><strong>Type:</strong> Select "CNAME"</li>
+                <li><strong>Name:</strong> Enter <code class="bg-gray-100 px-1 rounded">www</code></li>
+                <li><strong>Target:</strong> Enter <code class="bg-gray-100 px-1 rounded">yourbusiness.bizblasts.com</code></li>
+                <li><strong>Proxy status:</strong> Toggle OFF (gray cloud) - <strong class="text-red-600">Very Important!</strong></li>
+                <li><strong>TTL:</strong> Select "Auto" or "5 minutes"</li>
+              </ul>
+            </div>
+          </div>
+        </div>
+      </div>
+      
+      <div class="mt-6 p-4 bg-red-50 rounded-lg border-l-4 border-red-400">
+        <p class="text-sm text-red-800">
+          <strong>🚨 Critical:</strong> Ensure proxy is OFF (gray cloud) for CNAME records. Changes propagate very quickly (1-5 minutes) due to Cloudflare's global network.
+        </p>
+      </div>
+    </div>
+
+    <!-- Google Domains -->
+    <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sm:p-8">
+      <div class="flex items-center mb-6">
+        <div class="w-12 h-12 bg-blue-500 rounded-lg flex items-center justify-center mr-4">
+          <span class="text-white font-bold text-lg">G</span>
+        </div>
+        <h4 class="text-xl font-bold text-dark">Google Domains</h4>
+      </div>
+      
+      <div class="space-y-4">
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">1</span>
+          <div>
+            <p class="font-semibold">Access DNS Settings</p>
+            <p class="text-gray-600">Go to <a href="https://domains.google.com" class="text-primary hover:underline">domains.google.com</a> → select domain → "DNS"</p>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">2</span>
+          <div>
+            <p class="font-semibold">Add A Record</p>
+            <div class="text-gray-600">
+              <p>Click "Manage custom records" and configure:</p>
+              <ul class="list-disc list-inside mt-2 space-y-1">
+                <li><strong>Host name:</strong> Enter <code class="bg-gray-100 px-1 rounded">@</code></li>
+                <li><strong>Type:</strong> Select "A"</li>
+                <li><strong>TTL:</strong> Enter <code class="bg-gray-100 px-1 rounded">300</code></li>
+                <li><strong>Data:</strong> Enter <code class="bg-gray-100 px-1 rounded">216.24.57.1</code></li>
+              </ul>
+            </div>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">3</span>
+          <div>
+            <p class="font-semibold">Add CNAME Record</p>
+            <div class="text-gray-600">
+              <p>Click "Manage custom records" and configure:</p>
+              <ul class="list-disc list-inside mt-2 space-y-1">
+                <li><strong>Host name:</strong> Enter <code class="bg-gray-100 px-1 rounded">www</code></li>
+                <li><strong>Type:</strong> Select "CNAME"</li>
+                <li><strong>TTL:</strong> Enter <code class="bg-gray-100 px-1 rounded">300</code></li>
+                <li><strong>Data:</strong> Enter <code class="bg-gray-100 px-1 rounded">yourbusiness.bizblasts.com</code></li>
+              </ul>
+            </div>
+          </div>
+        </div>
+      </div>
+      
+      <div class="mt-6 p-4 bg-blue-50 rounded-lg">
+        <p class="text-sm text-blue-800">
+          <strong>📝 Google Domains Notes:</strong> Changes typically take 10-15 minutes to propagate globally. Google provides detailed propagation status.
+        </p>
+      </div>
+    </div>
+
+    <!-- Other Registrars -->
+    <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sm:p-8">
+      <h4 class="text-xl font-bold text-dark mb-6">🔧 Other Registrars</h4>
+      <p class="text-gray-700 mb-4">For registrars not listed above, follow these general steps:</p>
+      
+      <div class="space-y-3">
+        <div class="flex items-start">
+          <span class="bg-gray-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">1</span>
+          <p>Log into your domain registrar's control panel</p>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-gray-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">2</span>
+          <p>Find "DNS Management," "DNS Settings," or "Name Servers" section</p>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-gray-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">3</span>
+          <p>Look for options to "Add Record" or "Add DNS Record"</p>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-gray-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">4</span>
+          <div>
+            <p>Create an A record with:</p>
+            <ul class="list-disc list-inside mt-2 space-y-1 text-gray-600">
+              <li><strong>Name/Host:</strong> <code class="bg-gray-100 px-1 rounded">@</code></li>
+              <li><strong>Type:</strong> <code class="bg-gray-100 px-1 rounded">A</code></li>
+              <li><strong>Value/Target:</strong> <code class="bg-gray-100 px-1 rounded">216.24.57.1</code></li>
+              <li><strong>TTL:</strong> <code class="bg-gray-100 px-1 rounded">300</code> seconds (5 minutes)</li>
+            </ul>
+          </div>
+        </div>
+        <div class="flex items-start">
+          <span class="bg-gray-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1">5</span>
+          <div>
+            <p>Create a CNAME record with:</p>
+            <ul class="list-disc list-inside mt-2 space-y-1 text-gray-600">
+              <li><strong>Name/Host:</strong> <code class="bg-gray-100 px-1 rounded">www</code></li>
+              <li><strong>Type:</strong> <code class="bg-gray-100 px-1 rounded">CNAME</code></li>
+              <li><strong>Value/Target:</strong> <code class="bg-gray-100 px-1 rounded">yourbusiness.bizblasts.com</code></li>
+              <li><strong>TTL:</strong> <code class="bg-gray-100 px-1 rounded">300</code> seconds (5 minutes)</li>
+            </ul>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+
+  <!-- Troubleshooting -->
+  <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sm:p-8">
+    <h3 class="text-xl sm:text-2xl font-bold text-dark mb-6">🛠️ Common Issues & Troubleshooting</h3>
+    
+    <div class="space-y-6">
+      <div class="border-l-4 border-red-400 pl-4">
+        <h4 class="font-bold text-red-700 mb-2">❌ "CNAME record not found"</h4>
+        <div class="text-gray-700">
+          <p class="font-semibold">Possible Causes:</p>
+          <ul class="list-disc list-inside mb-3">
+            <li>Record not saved properly</li>
+            <li>DNS changes haven't propagated yet</li>
+            <li>Conflicting A/AAAA records still present</li>
+          </ul>
+          <p class="font-semibold">Solutions:</p>
+          <ul class="list-disc list-inside">
+            <li>Verify the A record target is exactly <code class="bg-gray-100 px-1 rounded">216.24.57.1</code></li>
+            <li>Verify the CNAME target is exactly <code class="bg-gray-100 px-1 rounded">bizblasts.onrender.com</code></li>
+            <li>Wait for propagation (5 minutes to 2 hours)</li>
+            <li>Remove all conflicting records</li>
+          </ul>
+        </div>
+      </div>
+
+      <div class="border-l-4 border-yellow-400 pl-4">
+        <h4 class="font-bold text-yellow-700 mb-2">⏰ "Domain setup timeout"</h4>
+        <div class="text-gray-700">
+          <p class="font-semibold">Solutions:</p>
+          <ul class="list-disc list-inside">
+            <li>Use <a href="https://whatsmydns.net" class="text-primary hover:underline">whatsmydns.net</a> to check propagation</li>
+            <li>Contact support with DNS settings screenshots</li>
+            <li>We can manually verify and restart monitoring</li>
+          </ul>
+        </div>
+      </div>
+    </div>
+  </div>
+
+  <!-- DNS Verification Tools -->
+  <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sm:p-8">
+    <h3 class="text-xl sm:text-2xl font-bold text-dark mb-6">🔍 DNS Verification Tools</h3>
+    <p class="text-gray-700 mb-4">Use these free tools to check if your CNAME record is configured correctly:</p>
+    
+    <div class="grid sm:grid-cols-3 gap-4 mb-6">
+      <a href="https://whatsmydns.net" class="block p-4 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors">
+        <h4 class="font-semibold text-blue-700">whatsmydns.net</h4>
+        <p class="text-sm text-blue-600">Global DNS propagation checker</p>
+      </a>
+      <a href="https://dnschecker.org" class="block p-4 bg-green-50 rounded-lg hover:bg-green-100 transition-colors">
+        <h4 class="font-semibold text-green-700">dnschecker.org</h4>
+        <p class="text-sm text-green-600">Multi-location DNS lookup</p>
+      </a>
+      <a href="https://mxtoolbox.com/CNAMELookup.aspx" class="block p-4 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors">
+        <h4 class="font-semibold text-purple-700">mxtoolbox.com</h4>
+        <p class="text-sm text-purple-600">Professional DNS tools</p>
+      </a>
+    </div>
+
+    <div class="bg-gray-50 rounded-lg p-4">
+      <h4 class="font-semibold mb-2">Command Line Check:</h4>
+      <code class="block bg-gray-800 text-green-400 p-3 rounded text-sm">
+        # Check A record (root domain)
+        nslookup -type=A yourdomain.com
+        
+        # Check CNAME record (www subdomain)
+        nslookup -type=CNAME www.yourdomain.com
+      </code>
+      <p class="text-sm text-gray-600 mt-2">
+        <strong>Expected Results:</strong><br>
+        <code class="bg-white px-1 rounded">www.yourdomain.com canonical name = yourbusiness.bizblasts.com</code><br>
+        <code class="bg-white px-1 rounded">yourdomain.com has address 216.24.57.1</code>
+      </p>
+    </div>
+  </div>
+
+  <!-- Timeline -->
+  <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 sm:p-8">
+    <h3 class="text-xl sm:text-2xl font-bold text-dark mb-6">⏱️ Timeline Expectations</h3>
+    
+    <div class="space-y-4">
+      <div class="flex items-center">
+        <div class="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-4">1</div>
+        <div>
+          <p class="font-semibold">0-5 minutes</p>
+          <p class="text-gray-600">CNAME record saved at registrar</p>
+        </div>
+      </div>
+      <div class="flex items-center">
+        <div class="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-4">2</div>
+        <div>
+          <p class="font-semibold">5-15 minutes</p>
+          <p class="text-gray-600">DNS propagation begins</p>
+        </div>
+      </div>
+      <div class="flex items-center">
+        <div class="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-4">3</div>
+        <div>
+          <p class="font-semibold">15-30 minutes</p>
+          <p class="text-gray-600">BizBlasts detects CNAME (monitoring every 5 minutes)</p>
+        </div>
+      </div>
+      <div class="flex items-center">
+        <div class="w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-4">✓</div>
+        <div>
+          <p class="font-semibold">30-60 minutes</p>
+          <p class="text-gray-600">Domain activated if all checks pass</p>
+        </div>
+      </div>
+      <div class="flex items-center">
+        <div class="w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-4">🔒</div>
+        <div>
+          <p class="font-semibold">1-24 hours</p>
+          <p class="text-gray-600">SSL certificate fully provisioned</p>
+        </div>
+      </div>
+    </div>
+  </div>
+
+  <!-- Support Section -->
+  <div class="bg-gradient-to-r from-secondary to-primary text-white rounded-2xl p-6 sm:p-8">
+    <h3 class="text-xl sm:text-2xl font-bold mb-6">🆘 Need Help?</h3>
+    <div class="grid sm:grid-cols-2 gap-6">
+      <div>
+        <h4 class="font-bold text-lg mb-3">Regular Support</h4>
+        <ul class="space-y-2">
+          <li>• Email: <a href="mailto:<%= ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com') %>" class="underline hover:no-underline"><%= ENV.fetch('SUPPORT_EMAIL', 'bizblaststeam@gmail.com') %></a></li>
+          <li>• Include screenshots of your DNS settings</li>
+          <li>• Response time: Within 24 hours</li>
+        </ul>
+      </div>
+      <div>
+        <h4 class="font-bold text-lg mb-3">Emergency Support</h4>
+        <ul class="space-y-2">
+          <li>• Reply to setup email with "URGENT"</li>
+          <li>• Include business name and domain</li>
+          <li>• We can manually verify and activate</li>
+        </ul>
+      </div>
+    </div>
+  </div>
+</div>
\ No newline at end of file
diff --git a/app/views/domain_mailer/activation_success.html.erb b/app/views/domain_mailer/activation_success.html.erb
new file mode 100644
index 0000000..932fbe9
--- /dev/null
+++ b/app/views/domain_mailer/activation_success.html.erb
@@ -0,0 +1,143 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Custom Domain Activated Successfully</title>
+    <style>
+      body {
+        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
+        line-height: 1.6;
+        color: #333;
+        max-width: 600px;
+        margin: 0 auto;
+        padding: 20px;
+      }
+      .header {
+        background: linear-gradient(135deg, #28A745, #57C5B6);
+        color: white;
+        padding: 30px 20px;
+        border-radius: 8px 8px 0 0;
+        text-align: center;
+      }
+      .content {
+        background: #f8f9fa;
+        padding: 30px 20px;
+        border-radius: 0 0 8px 8px;
+      }
+      .success-box {
+        background: #d4edda;
+        border: 1px solid #c3e6cb;
+        border-radius: 6px;
+        padding: 20px;
+        margin: 20px 0;
+        text-align: center;
+      }
+      .info-box {
+        background: white;
+        border: 1px solid #ddd;
+        border-radius: 6px;
+        padding: 20px;
+        margin: 20px 0;
+        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
+      }
+      .highlight {
+        background: #fff3cd;
+        border: 1px solid #ffeaa7;
+        border-radius: 4px;
+        padding: 15px;
+        margin: 15px 0;
+      }
+      .footer {
+        text-align: center;
+        padding: 20px;
+        color: #666;
+        font-size: 14px;
+        border-top: 1px solid #ddd;
+        margin-top: 30px;
+      }
+      .button {
+        display: inline-block;
+        background: #28A745;
+        color: white;
+        padding: 12px 24px;
+        text-decoration: none;
+        border-radius: 6px;
+        margin: 10px 0;
+        font-weight: bold;
+      }
+      .checkmark {
+        font-size: 48px;
+        color: #28A745;
+        display: block;
+        margin: 10px 0;
+      }
+      .domain-highlight {
+        background: rgba(255, 255, 255, 0.2);
+        padding: 4px 12px;
+        border-radius: 20px;
+        font-weight: bold;
+        font-size: 1.1em;
+        display: inline-block;
+        margin: 0 4px;
+        border: 2px solid rgba(255, 255, 255, 0.3);
+      }
+    </style>
+  </head>
+  <body>
+    <div class="header">
+      <div class="checkmark">✅</div>
+      <h1>Domain Activated!</h1>
+      <p><span class="domain-highlight"><%= @domain %></span> is now live</p>
+    </div>
+
+    <div class="content">
+      <p>Hi <%= @user.first_name || @user.email %>,</p>
+
+      <p>Congratulations! Your custom domain <strong><%= @domain %></strong> has been successfully activated for <%= @business.name %>.</p>
+
+      <div class="success-box">
+        <h3>🎉 Your site is now live at:</h3>
+        <p><a href="<%= @domain_url %>" style="font-size: 18px; font-weight: bold; color: #28A745;"><%= @domain %></a></p>
+        <a href="<%= @domain_url %>" class="button">Visit Your Site</a>
+      </div>
+
+      <div class="info-box">
+        <h3>✨ What's included with your custom domain:</h3>
+        <ul>
+          <li><strong>SSL Certificate:</strong> Automatic HTTPS encryption (may take up to 24 hours to fully activate)</li>
+          <li><strong>Automatic Redirects:</strong> HTTP traffic automatically redirects to HTTPS</li>
+          <li><strong>Professional URL:</strong> Your customers can now find you at your own domain</li>
+          <li><strong>SEO Benefits:</strong> Better search engine optimization with your custom domain</li>
+          <li><strong>Email Integration:</strong> All booking confirmations and notifications will use your domain</li>
+        </ul>
+      </div>
+
+      <div class="highlight">
+        <h3>🔄 Important: Update your links</h3>
+        <p>Don't forget to update:</p>
+        <ul>
+          <li>Your Google Business Profile URL</li>
+          <li>Social media links (Facebook, Instagram, etc.)</li>
+          <li>Business cards and marketing materials</li>
+          <li>Any existing bookmarks or saved links</li>
+        </ul>
+      </div>
+
+      <div class="info-box">
+        <h3>🛟 Need Support?</h3>
+        <p>If you experience any issues with your custom domain or need help updating your online presence, we're here to help!</p>
+        <ul>
+          <li>Reply to this email for technical support</li>
+          <li>Visit our help documentation</li>
+          <li>Contact us through your business dashboard</li>
+        </ul>
+      </div>
+    </div>
+
+    <div class="footer">
+      <p>🎊 Thank you for choosing BizBlasts Premium!</p>
+      <p>Your custom domain <strong><%= @domain %></strong> is now ready to help grow your business.</p>
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/app/views/domain_mailer/monitoring_restarted.html.erb b/app/views/domain_mailer/monitoring_restarted.html.erb
new file mode 100644
index 0000000..ce2b07a
--- /dev/null
+++ b/app/views/domain_mailer/monitoring_restarted.html.erb
@@ -0,0 +1,115 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Domain Monitoring Restarted</title>
+    <style>
+      body {
+        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
+        line-height: 1.6;
+        color: #333;
+        max-width: 600px;
+        margin: 0 auto;
+        padding: 20px;
+      }
+      .header {
+        background: linear-gradient(135deg, #6c757d, #adb5bd);
+        color: white;
+        padding: 30px 20px;
+        border-radius: 8px 8px 0 0;
+        text-align: center;
+      }
+      .content {
+        background: #f8f9fa;
+        padding: 30px 20px;
+        border-radius: 0 0 8px 8px;
+      }
+      .info-box {
+        background: #d1ecf1;
+        border: 1px solid #bee5eb;
+        border-radius: 6px;
+        padding: 20px;
+        margin: 20px 0;
+      }
+      .status-box {
+        background: white;
+        border: 1px solid #ddd;
+        border-radius: 6px;
+        padding: 20px;
+        margin: 20px 0;
+        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
+      }
+      .footer {
+        text-align: center;
+        padding: 20px;
+        color: #666;
+        font-size: 14px;
+        border-top: 1px solid #ddd;
+        margin-top: 30px;
+      }
+    </style>
+  </head>
+  <body>
+    <div class="header">
+      <h1>🔄 Monitoring Restarted</h1>
+      <p>We're checking <strong><%= @domain %></strong> again</p>
+    </div>
+
+    <div class="content">
+      <p>Hi <%= @user.first_name || @user.email %>,</p>
+
+      <p>Good news! We've restarted monitoring for your custom domain <strong><%= @domain %></strong>. Our system will now check every 5 minutes for the next hour to see if your DNS records are properly configured.</p>
+
+      <div class="info-box">
+        <h3>🔍 What we're monitoring</h3>
+        <p>We're checking that <strong><%= @domain %></strong> has proper DNS records pointing to our servers. Once detected, your domain will be automatically activated.</p>
+      </div>
+
+      <div class="status-box">
+        <h3>📊 Current Status</h3>
+        <ul>
+          <li><strong>Domain:</strong> <%= @domain %></li>
+          <li><strong>Business:</strong> <%= @business.name %></li>
+          <li><strong>Status:</strong> Monitoring Active</li>
+          <li><strong>Duration:</strong> Up to 1 hour (12 checks)</li>
+          <li><strong>Frequency:</strong> Every 5 minutes</li>
+        </ul>
+      </div>
+
+      <div class="status-box">
+        <h3>✨ What happens next</h3>
+        <p>You don't need to do anything else - we'll handle the monitoring automatically:</p>
+        <ul>
+          <li><strong>✅ Success:</strong> You'll get a confirmation email when your domain is active</li>
+          <li><strong>⏰ Timeout:</strong> We'll send troubleshooting help if needed</li>
+          <li><strong>🔧 Issues:</strong> Our support team can help with any DNS problems</li>
+        </ul>
+      </div>
+
+      <div class="info-box">
+        <h3>💡 Quick Reminder</h3>
+        <p>Make sure both DNS records are configured exactly as instructed:</p>
+        
+        <p><strong>A Record:</strong></p>
+        <ul>
+          <li><strong>Name:</strong> @</li>
+          <li><strong>Type:</strong> A</li>
+          <li><strong>Target:</strong> 216.24.57.1</li>
+        </ul>
+        
+        <p><strong>CNAME Record:</strong></p>
+        <ul>
+          <li><strong>Name:</strong> www</li>
+          <li><strong>Type:</strong> CNAME</li>
+          <li><strong>Target:</strong> <%= @render_target %></li>
+        </ul>
+      </div>
+    </div>
+
+    <div class="footer">
+      <p>We'll keep you updated on the progress!<br>
+      If you have any questions, just reply to this email.</p>
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/app/views/domain_mailer/setup_instructions.html.erb b/app/views/domain_mailer/setup_instructions.html.erb
new file mode 100644
index 0000000..6797bff
--- /dev/null
+++ b/app/views/domain_mailer/setup_instructions.html.erb
@@ -0,0 +1,189 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Custom Domain Setup Instructions</title>
+    <style>
+      body {
+        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
+        line-height: 1.6;
+        color: #333;
+        max-width: 600px;
+        margin: 0 auto;
+        padding: 20px;
+      }
+      .header {
+        background: linear-gradient(135deg, #1A5F7A, #2C5F7A);
+        color: white;
+        padding: 30px 20px;
+        border-radius: 8px 8px 0 0;
+        text-align: center;
+      }
+      .domain-highlight {
+        background: rgba(255, 255, 255, 0.2);
+        padding: 4px 12px;
+        border-radius: 20px;
+        font-weight: bold;
+        font-size: 1.1em;
+        display: inline-block;
+        margin: 0 4px;
+        border: 2px solid rgba(255, 255, 255, 0.3);
+      }
+      .content {
+        background: #f8f9fa;
+        padding: 30px 20px;
+        border-radius: 0 0 8px 8px;
+      }
+      .instruction-box {
+        background: white;
+        border: 1px solid #ddd;
+        border-radius: 6px;
+        padding: 20px;
+        margin: 20px 0;
+        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
+      }
+      .code-block {
+        background: #f8f8f8;
+        border: 1px solid #e0e0e0;
+        border-radius: 4px;
+        padding: 15px;
+        font-family: 'Courier New', monospace;
+        font-size: 14px;
+        margin: 10px 0;
+        overflow-x: auto;
+      }
+      .highlight {
+        background: #fff3cd;
+        border: 1px solid #ffeaa7;
+        border-radius: 4px;
+        padding: 15px;
+        margin: 15px 0;
+      }
+      .step {
+        margin: 20px 0;
+        padding: 15px;
+        border-left: 4px solid #1A5F7A;
+        background: white;
+      }
+      .step h3 {
+        margin-top: 0;
+        color: #1A5F7A;
+      }
+      .footer {
+        text-align: center;
+        padding: 20px;
+        color: #666;
+        font-size: 14px;
+        border-top: 1px solid #ddd;
+        margin-top: 30px;
+      }
+      .button {
+        display: inline-block;
+        background: #1A5F7A;
+        color: white;
+        padding: 12px 24px;
+        text-decoration: none;
+        border-radius: 6px;
+        margin: 10px 0;
+      }
+    </style>
+  </head>
+  <body>
+    <div class="header">
+      <h1>🌐 Custom Domain Setup</h1>
+      <p>Connect your custom domain to your BizBlasts site</p>
+    </div>
+
+    <div class="content">
+      <p>Hi <%= @user.first_name || @user.email %>,</p>
+
+      <p>Great news! We've started setting up your custom domain <strong><%= @domain %></strong> for <%= @business.name %>. Now we need you to configure DNS records with your domain registrar to complete the setup.</p>
+
+      <div class="highlight">
+        <strong>⏱️ Time Sensitive:</strong> We'll monitor your DNS changes for the next hour. Please complete these steps as soon as possible.
+      </div>
+
+      <div class="step">
+        <h3>Step 1: Log into your domain registrar</h3>
+        <p>Access the DNS management panel for <strong><%= @domain %></strong> with your domain registrar (GoDaddy, Namecheap, Cloudflare, etc.).</p>
+      </div>
+
+      <div class="step">
+        <h3>Step 2: Add new host records</h3>
+        <p>Create an A record with these exact settings:</p>
+        
+        <div class="code-block">
+          <strong>Name/Host:</strong> @<br>
+          <strong>Type:</strong> A<br>
+          <strong>Value/Target:</strong> 216.24.57.1<br>
+          <strong>TTL:</strong> Auto or 300 (5 minutes)
+        </div>
+        
+        <p>Create a CNAME record with these exact settings:</p>
+        
+        <div class="code-block">
+          <strong>Name/Host:</strong> www<br>
+          <strong>Type:</strong> CNAME<br>
+          <strong>Value/Target:</strong> <%= @render_target %><br>
+          <strong>TTL:</strong> Auto or 300 (5 minutes)
+        </div>
+
+        <div class="highlight">
+          <strong>💡 Important:</strong> 
+          <ul>
+            <li>The A record (@ → 216.24.57.1) handles your root domain (example.com)</li>
+            <li>The CNAME record (www → <%= @render_target %>) handles www.example.com</li>
+            <li>Some registrars require a trailing dot: "<strong><%= @render_target %>.</strong>"</li>
+            <li>Remove any existing A or CNAME records that conflict with these settings</li>
+          </ul>
+        </div>
+      </div>
+
+      <div class="step">
+        <h3>Step 3: Wait for verification</h3>
+        <p>After adding both DNS records:</p>
+        <ul>
+          <li>DNS changes can take 5-15 minutes to propagate</li>
+          <li>We'll automatically check every 5 minutes</li>
+          <li>You'll receive a confirmation email when it's ready</li>
+        </ul>
+      </div>
+
+      <div class="instruction-box">
+        <h3>🔍 Need Help?</h3>
+        <p>If you're unsure how to add DNS records with your specific registrar:</p>
+        <ul>
+          <li><strong>GoDaddy:</strong> Go to DNS Management → Add Record → A/CNAME</li>
+          <li><strong>Namecheap:</strong> Go to Domain List → Manage → Advanced DNS → Add New Record</li>
+          <li><strong>Cloudflare:</strong> Go to DNS → Add Record → A/CNAME</li>
+          <li><strong>Detailed Setup Guide:</strong> <a href="https://www.bizblasts.com/docs/custom-domain-faq">Custom Domain FAQ</a></li>
+          <li><strong>Need more help?</strong> Forward this email to <a href="mailto:<%= @support_email %>"><%= @support_email %></a></li>
+        </ul>
+      </div>
+
+      <div class="step">
+        <h3>What happens next?</h3>
+        <p>Once your DNS records are configured:</p>
+        <ul>
+          <li>✅ Your domain will automatically activate</li>
+          <li>✅ SSL certificate will be issued (may take up to 24 hours)</li>
+          <li>✅ All traffic will redirect to HTTPS</li>
+          <li>✅ Your BizBlasts site will be live at <strong><%= @domain %></strong></li>
+          <% if @business.respond_to?(:www_canonical_preference?) %>
+            <% if @business.www_canonical_preference? %>
+              <li>🔗 <strong>Canonical URL:</strong> Visitors to <%= @domain.sub(/^www\./, '') %> will redirect to www.<%= @domain.sub(/^www\./, '') %></li>
+            <% elsif @business.apex_canonical_preference? %>
+              <li>🔗 <strong>Canonical URL:</strong> Visitors to www.<%= @domain.sub(/^www\./, '') %> will redirect to <%= @domain.sub(/^www\./, '') %></li>
+            <% end %>
+          <% end %>
+        </ul>
+      </div>
+    </div>
+
+    <div class="footer">
+      <p>This email was sent from BizBlasts regarding your custom domain setup.<br>
+      If you need assistance, reply to this email or contact <a href="mailto:<%= @support_email %>"><%= @support_email %></a></p>
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/app/views/domain_mailer/timeout_help.html.erb b/app/views/domain_mailer/timeout_help.html.erb
new file mode 100644
index 0000000..93c26b8
--- /dev/null
+++ b/app/views/domain_mailer/timeout_help.html.erb
@@ -0,0 +1,212 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Custom Domain Setup Help Needed</title>
+    <style>
+      body {
+        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
+        line-height: 1.6;
+        color: #333;
+        max-width: 600px;
+        margin: 0 auto;
+        padding: 20px;
+      }
+      .header {
+        background: linear-gradient(135deg, #FFC107, #FF8C42);
+        color: white;
+        padding: 30px 20px;
+        border-radius: 8px 8px 0 0;
+        text-align: center;
+      }
+      .content {
+        background: #f8f9fa;
+        padding: 30px 20px;
+        border-radius: 0 0 8px 8px;
+      }
+      .warning-box {
+        background: #fff3cd;
+        border: 1px solid #ffeaa7;
+        border-radius: 6px;
+        padding: 20px;
+        margin: 20px 0;
+      }
+      .help-box {
+        background: white;
+        border: 1px solid #ddd;
+        border-radius: 6px;
+        padding: 20px;
+        margin: 20px 0;
+        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
+      }
+      .code-block {
+        background: #f8f8f8;
+        border: 1px solid #e0e0e0;
+        border-radius: 4px;
+        padding: 15px;
+        font-family: 'Courier New', monospace;
+        font-size: 14px;
+        margin: 10px 0;
+        overflow-x: auto;
+      }
+      .step {
+        margin: 15px 0;
+        padding: 15px;
+        border-left: 4px solid #FFC107;
+        background: white;
+      }
+      .step h4 {
+        margin-top: 0;
+        color: #FF8C42;
+      }
+      .footer {
+        text-align: center;
+        padding: 20px;
+        color: #666;
+        font-size: 14px;
+        border-top: 1px solid #ddd;
+        margin-top: 30px;
+      }
+      .button {
+        display: inline-block;
+        background: #FF8C42;
+        color: white;
+        padding: 12px 24px;
+        text-decoration: none;
+        border-radius: 6px;
+        margin: 10px 0;
+        font-weight: bold;
+      }
+      .contact-button {
+        display: inline-block;
+        background: #1A5F7A;
+        color: white;
+        padding: 15px 30px;
+        text-decoration: none;
+        border-radius: 6px;
+        margin: 10px 0;
+        font-weight: bold;
+        font-size: 16px;
+      }
+    </style>
+  </head>
+  <body>
+    <div class="header">
+      <h1>⚠️ Help Needed</h1>
+      <p>Custom domain setup for <strong><%= @domain %></strong></p>
+    </div>
+
+    <div class="content">
+      <p>Hi <%= @user.first_name || @user.email %>,</p>
+
+      <p>We've been monitoring your custom domain <strong><%= @domain %></strong> for the past hour, but we haven't detected the required DNS records yet.</p>
+
+      <div class="warning-box">
+        <h3>🕒 Setup Timed Out</h3>
+        <p>Don't worry - this is common! DNS changes can sometimes take longer than expected, or there might be a small configuration issue we can help you resolve.</p>
+      </div>
+
+      <div class="help-box">
+        <h3>🔍 Let's troubleshoot together</h3>
+        
+        <div class="step">
+          <h4>1. Double-check your DNS records</h4>
+          <p>Verify both records are configured in your DNS management panel:</p>
+          
+          <p><strong>A Record (for root domain):</strong></p>
+          <div class="code-block">
+            <strong>Name/Host:</strong> @<br>
+            <strong>Type:</strong> A<br>
+            <strong>Value/Target:</strong> 216.24.57.1<br>
+            <strong>TTL:</strong> Auto or 300 seconds
+          </div>
+          
+          <p><strong>CNAME Record (for www subdomain):</strong></p>
+          <div class="code-block">
+            <strong>Name/Host:</strong> www<br>
+            <strong>Type:</strong> CNAME<br>
+            <strong>Value/Target:</strong> <%= @render_target %><br>
+            <strong>TTL:</strong> Auto or 300 seconds
+          </div>
+        </div>
+
+        <div class="step">
+          <h4>2. Common issues to check</h4>
+          <ul>
+            <li><strong>Trailing dot:</strong> Some registrars require "<strong><%= @render_target %>.</strong>" (with dot)</li>
+            <li><strong>Conflicting records:</strong> Remove any existing A or AAAA records for this domain</li>
+            <li><strong>Wrong host field:</strong> Use "@" for root domain or "www" for www subdomain</li>
+            <li><strong>Case sensitivity:</strong> Ensure exact capitalization match</li>
+          </ul>
+        </div>
+
+        <div class="step">
+          <h4>3. DNS propagation delay</h4>
+          <p>If your DNS records look correct, DNS changes might still be propagating. This can take:</p>
+          <ul>
+            <li>5-15 minutes for most changes</li>
+            <li>Up to 2 hours in some cases</li>
+            <li>Occasionally 24-48 hours for global propagation</li>
+          </ul>
+        </div>
+      </div>
+
+      <div class="help-box">
+        <h3>🆘 Get Instant Help</h3>
+        <p>Our support team is ready to help you get your custom domain working. We can:</p>
+        <ul>
+          <li>Check your DNS configuration remotely</li>
+          <li>Provide registrar-specific instructions</li>
+          <li>Restart monitoring if needed</li>
+          <li>Set up the domain for you (with your permission)</li>
+        </ul>
+        
+        <div style="text-align: center; margin: 20px 0;">
+          <a href="mailto:<%= @support_email %>?subject=Help with custom domain <%= @domain %>&body=Hi BizBlasts Support,%0A%0AI need help setting up my custom domain <%= @domain %>. Here's what I've tried:%0A%0A[Please describe what you've done so far]%0A%0AThanks!" class="contact-button">
+            📧 Get Help Now
+          </a>
+        </div>
+      </div>
+
+      <div class="help-box">
+        <h3>📚 Complete Setup Guide</h3>
+        <p>For detailed step-by-step instructions for your registrar:</p>
+        <ul>
+          <li><strong>📖 <a href="https://www.bizblasts.com/docs/custom-domain-faq" style="color: #1A5F7A; font-weight: bold;">Custom Domain Setup FAQ</a></strong></li>
+          <li>Covers GoDaddy, Namecheap, Cloudflare, Google Domains, and more</li>
+          <li>Screenshots and troubleshooting guides</li>
+          <li>DNS verification tools and timeline expectations</li>
+        </ul>
+        
+        <p>Quick links for popular domain registrars:</p>
+        <ul>
+          <li><strong>GoDaddy:</strong> My Products → DNS → Manage Zones → Add Record</li>
+          <li><strong>Namecheap:</strong> Domain List → Manage → Advanced DNS → Add New Record</li>
+          <li><strong>Cloudflare:</strong> DNS → Add Record → Select CNAME</li>
+          <li><strong>Google Domains:</strong> DNS → Custom Records → Manage Custom Records</li>
+          <li><strong>Hover:</strong> DNS → Add New → CNAME</li>
+        </ul>
+      </div>
+
+      <div class="warning-box">
+        <h3>⏰ What happens now?</h3>
+        <p>We've paused automatic monitoring for now, but you can:</p>
+        <ul>
+          <li><strong>Contact support</strong> - We'll restart monitoring once your DNS is configured</li>
+          <li><strong>Fix the CNAME</strong> - Reply to this email when ready and we'll check again</li>
+          <li><strong>Try later</strong> - Sometimes waiting a few hours helps with DNS propagation</li>
+        </ul>
+      </div>
+    </div>
+
+    <div class="footer">
+      <p><strong>Need immediate assistance?</strong><br>
+      Forward this email to <a href="mailto:<%= @support_email %>"><%= @support_email %></a> and we'll get your domain working quickly!</p>
+      
+      <p style="margin-top: 15px;">
+        <small>BizBlasts Support • We're here to help make your custom domain work perfectly</small>
+      </p>
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/app/views/home/about.html.erb b/app/views/home/about.html.erb
index a4d6f1f..c769b12 100644
--- a/app/views/home/about.html.erb
+++ b/app/views/home/about.html.erb
@@ -137,12 +137,12 @@
           </div>
           <div class="bg-white/10 rounded-lg p-6 text-center">
             <h3 class="text-xl font-bold mb-2">Standard</h3>
-            <p class="text-2xl font-bold mb-4">$49/month</p>
+            <p class="text-2xl font-bold mb-4">$9.99/month</p>
             <p class="text-gray-300">Ideal for established single-location businesses</p>
           </div>
           <div class="bg-white/10 rounded-lg p-6 text-center">
             <h3 class="text-xl font-bold mb-2">Premium</h3>
-            <p class="text-2xl font-bold mb-4">$99/month</p>
+            <p class="text-2xl font-bold mb-4">$29.99/month</p>
             <p class="text-gray-300">Designed for multi-location or high-volume operations</p>
           </div>
         </div>
diff --git a/app/views/home/index.html.erb b/app/views/home/index.html.erb
index 56e5443..9d6e298 100644
--- a/app/views/home/index.html.erb
+++ b/app/views/home/index.html.erb
@@ -222,7 +222,7 @@
   </header>
 
   <!-- All-in-One Solution Section -->
-  <section id="features" class="py-20 bg-light" role="region" aria-labelledby="features-heading">
+  <section id="features" class="pt-20 pb-0 bg-light" role="region" aria-labelledby="features-heading">
     <div class="container mx-auto px-4">
       <header class="text-center mb-16">
         <h2 id="features-heading" class="text-3xl lg:text-4xl font-bold text-dark mb-4">
@@ -443,7 +443,7 @@
         </div>
         <div class="p-8">
           <h3 class="text-2xl font-bold text-dark mb-4">Standard</h3>
-          <div class="text-4xl font-bold text-dark mb-2">$49</div>
+          <div class="text-4xl font-bold text-dark mb-2">$9.99</div>
           <p class="text-gray-600 mb-6">+ 5% transaction fees</p>
           
           <ul class="text-left text-gray-600 space-y-3 mb-8">
@@ -478,7 +478,7 @@
       <!-- Premium Plan -->
       <div class="bg-white rounded-lg p-8 shadow-lg text-center">
         <h3 class="text-2xl font-bold text-dark mb-4">Premium</h3>
-        <div class="text-4xl font-bold text-dark mb-2">$99</div>
+        <div class="text-4xl font-bold text-dark mb-2">$29.99</div>
         <p class="text-gray-600 mb-6">+ 3% transaction fees</p>
         
         <ul class="text-left text-gray-600 space-y-3 mb-8">
@@ -564,7 +564,7 @@
   </ul>
 </div>
 
-<footer class="bg-light py-8">
+<footer class="bg-light pt-4 pb-0">
   <div class="container mx-auto px-4">
     <div class="flex justify-center space-x-4 text-gray-600">
       <%= link_to "About", "/about", class: "hover:text-primary" %>
diff --git a/app/views/home/pricing.html.erb b/app/views/home/pricing.html.erb
index f4cf67d..c7fdab1 100644
--- a/app/views/home/pricing.html.erb
+++ b/app/views/home/pricing.html.erb
@@ -45,9 +45,9 @@
           <tbody class="divide-y divide-gray-200">
             <tr>
               <td class="px-6 py-4 text-sm font-medium text-gray-900">Monthly Cost</td>
-              <td class="px-6 py-4 text-center text-sm font-bold text-primary">$0 - $99</td>
-              <td class="px-6 py-4 text-center text-sm text-gray-600">$8.25 - $49.90</td>
-              <td class="px-6 py-4 text-center text-sm text-gray-600">$16 - $49</td>
+              <td class="px-6 py-4 text-center text-sm font-bold text-primary">$0 - $29.99</td>
+              <td class="px-6 py-4 text-center text-sm text-gray-600">$8.25 - $49.99</td>
+              <td class="px-6 py-4 text-center text-sm text-gray-600">$16 - $49.99+</td>
               <td class="px-6 py-4 text-center text-sm text-gray-600">$30-80+</td>
             </tr>
             <tr class="bg-gray-50">
@@ -141,7 +141,7 @@
       <div class="bg-white rounded-2xl shadow-xl border-2 border-primary overflow-hidden">
         <div class="bg-primary text-white px-6 py-4">
           <h3 class="text-xl font-bold text-center">BizBlasts</h3>
-          <p class="text-center text-lg font-semibold">$0 - $99</p>
+          <p class="text-center text-lg font-semibold">$0 - $29.99</p>
         </div>
         <div class="p-6 space-y-4">
           <div class="flex items-center justify-between">
@@ -290,7 +290,7 @@
         <div class="p-8">
           <div class="text-center mb-8">
             <h3 class="text-2xl font-bold text-dark mb-2">Standard</h3>
-            <div class="text-5xl font-bold text-dark mb-2">$49</div>
+            <div class="text-5xl font-bold text-dark mb-2">$9.99</div>
             <p class="text-gray-600">+ 5% transaction fees</p>
             <p class="text-sm text-gray-500 mt-2">Most popular choice</p>
           </div>
@@ -346,7 +346,7 @@
       <div class="bg-white rounded-2xl p-8 shadow-xl border-2 border-gray-100 hover:border-primary transition-all duration-300">
         <div class="text-center mb-8">
           <h3 class="text-2xl font-bold text-dark mb-2">Premium</h3>
-          <div class="text-5xl font-bold text-dark mb-2">$99</div>
+          <div class="text-5xl font-bold text-dark mb-2">$29.99</div>
           <p class="text-gray-600">+ 3% transaction fees</p>
           <p class="text-sm text-gray-500 mt-2">For established businesses</p>
         </div>
diff --git a/app/views/layouts/application.html.erb b/app/views/layouts/application.html.erb
index d45aa48..d347565 100644
--- a/app/views/layouts/application.html.erb
+++ b/app/views/layouts/application.html.erb
@@ -141,7 +141,7 @@
         <div class="flex justify-between items-center">
           <!-- Logo and Brand -->
           <div class="flex items-center min-w-0 flex-shrink-0">
-            <% if request.subdomain.present? && request.subdomain != 'www' && ActsAsTenant.current_tenant %>
+            <% if ActsAsTenant.current_tenant %>
               <!-- BizBlasts Logo - links to main domain -->
               <%= link_to main_domain_url_for('/'), class: "hover:opacity-80 transition-opacity mr-3" do %>
                 <% begin %>
@@ -151,7 +151,7 @@
                        alt="BizBlasts - Professional Business Websites and Booking Systems" class="h-10 w-auto" />
                 <% end %>
               <% end %>
-              <!-- Company Name - links to tenant subdomain -->
+              <!-- Company Name - links to tenant home -->
               <%= link_to tenant_root_path, class: "hover:opacity-80 transition-opacity" do %>
                 <span class="font-bold text-lg text-primary whitespace-nowrap"><%= ActsAsTenant.current_tenant.name %></span>
               <% end %>
@@ -371,13 +371,38 @@
       <%= yield %>
     </main>
 
-    <div class="container mx-auto px-4 text-center text-sm text-gray-500 mt-8">
-      <a href="#" class="termly-display-preferences">Consent Preferences</a>
-      •
-      <%= link_to "Privacy Policy", privacypolicy_path, class: "termly-privacy-preferences", data: { turbo: false } %>
-      •
-      <%= link_to "Terms of Service", terms_path, class: "termly-privacy-preferences", data: { turbo: false } %>
-    </div>
+    <!-- Combined Footer with Policy Links and Copyright -->
+    <footer class="bg-gray-50 py-2">
+      <div class="container mx-auto px-4 text-center text-sm text-gray-500">
+        <% if ActsAsTenant.current_tenant %>
+          <!-- Tenant pages: Policy links left, copyright right -->
+          <div class="flex flex-col md:flex-row md:justify-between md:items-center space-y-2 md:space-y-0">
+            <!-- Policy Links -->
+            <div>
+              <a href="#" class="termly-display-preferences">Consent Preferences</a>
+              •
+              <%= link_to "Privacy Policy", privacypolicy_path, class: "termly-privacy-preferences", data: { turbo: false } %>
+              •
+              <%= link_to "Terms of Service", terms_path, class: "termly-privacy-preferences", data: { turbo: false } %>
+            </div>
+            
+            <!-- Business Copyright -->
+            <div class="text-gray-600">
+              &copy; <%= Date.current.year %> <%= ActsAsTenant.current_tenant.name %>. All rights reserved.
+            </div>
+          </div>
+        <% else %>
+          <!-- Main domain: Policy links centered -->
+          <div>
+            <a href="#" class="termly-display-preferences">Consent Preferences</a>
+            •
+            <%= link_to "Privacy Policy", privacypolicy_path, class: "termly-privacy-preferences", data: { turbo: false } %>
+            •
+            <%= link_to "Terms of Service", terms_path, class: "termly-privacy-preferences", data: { turbo: false } %>
+          </div>
+        <% end %>
+      </div>
+    </footer>
 
     <%# Policy Acceptance Modal - Only render for users who need policy acceptance %>
     <% if user_signed_in? && current_user.requires_policy_acceptance? %>
diff --git a/app/views/orders/show.html.erb b/app/views/orders/show.html.erb
index 3c0d76c..2c8b11d 100644
--- a/app/views/orders/show.html.erb
+++ b/app/views/orders/show.html.erb
@@ -144,7 +144,7 @@
           <p class="text-sm text-gray-600">Payment deadline: <%= l deadline, format: :long %></p>
         <% end %>
       <% end %>
-      <%= link_to 'Pay Now', new_tenant_payment_path(invoice_id: @order.invoice.id), class: 'bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded' %>
+      <%= link_to 'Pay Now', new_payment_path(invoice_id: @order.invoice.id), class: 'bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded' %>
       <p class="text-sm text-gray-600 mt-2">You will be redirected to Stripe to complete your payment securely.</p>
     </div>
   <% end %>
diff --git a/app/views/products/index.html.erb b/app/views/products/index.html.erb
index 0b99360..f857cf1 100644
--- a/app/views/products/index.html.erb
+++ b/app/views/products/index.html.erb
@@ -62,7 +62,7 @@
             <%= link_to "View Product", product_path(product), class: "inline-block bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700" %>
             <% if product.product_variants.any? %>
               <% default_variant = product.product_variants.first %>
-              <%= form_with url: line_items_path, method: :post, local: false, class: "inline-block" do |f| %>
+              <%= form_with url: line_items_path, method: :post, local: true, class: "inline-block" do |f| %>
                 <%= f.hidden_field :product_variant_id, value: default_variant.id %>
                 <%= f.hidden_field :quantity, value: 1 %>
                 <%= f.submit "Add to Cart", class: "bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 cursor-pointer" %>
diff --git a/app/views/public/booking/confirmation.html.erb b/app/views/public/booking/confirmation.html.erb
index 59d81c2..b07f314 100644
--- a/app/views/public/booking/confirmation.html.erb
+++ b/app/views/public/booking/confirmation.html.erb
@@ -92,7 +92,7 @@
         <% if params[:payment_cancelled] %>
           <div class="mt-6 mb-6 p-4 bg-red-50 border border-red-200 rounded">
             <p class="mb-2 text-red-800"><strong>Payment Required:</strong> This experience booking requires immediate payment to confirm.</p>
-            <%= link_to 'Complete Payment Now', new_tenant_payment_path(invoice_id: @booking.invoice.id), class: 'bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded' %>
+            <%= link_to 'Complete Payment Now', new_payment_path(invoice_id: @booking.invoice.id), class: 'bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded' %>
             <p class="text-sm text-gray-600 mt-2">
               You will be redirected to Stripe to complete your payment securely.
               <% unless current_user %>
@@ -103,7 +103,7 @@
         <% else %>
           <div class="mt-6 mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded">
             <p class="mb-2 text-yellow-800"><strong>Payment Pending:</strong> This experience booking requires payment to confirm.</p>
-            <%= link_to 'Pay Now', new_tenant_payment_path(invoice_id: @booking.invoice.id), class: 'bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded' %>
+            <%= link_to 'Pay Now', new_payment_path(invoice_id: @booking.invoice.id), class: 'bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded' %>
             <p class="text-sm text-gray-600 mt-2">
               You will be redirected to Stripe to complete your payment securely.
               <% unless current_user %>
@@ -117,7 +117,7 @@
         <div class="mt-6 mb-6 p-4 bg-blue-50 border border-blue-200 rounded">
           <p class="mb-2 text-blue-800"><strong>Payment Options:</strong> Your booking is confirmed! You can pay now or later.</p>
           <div class="flex flex-col sm:flex-row gap-3">
-            <%= link_to 'Pay Now', new_tenant_payment_path(invoice_id: @booking.invoice.id), class: 'bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-center' %>
+            <%= link_to 'Pay Now', new_payment_path(invoice_id: @booking.invoice.id), class: 'bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-center' %>
             <span class="text-blue-700 font-medium py-2 px-4 text-center">or pay after your service</span>
           </div>
           <p class="text-sm text-gray-600 mt-2">
diff --git a/app/views/public/invoices/show.html.erb b/app/views/public/invoices/show.html.erb
index 1746d7c..d690674 100644
--- a/app/views/public/invoices/show.html.erb
+++ b/app/views/public/invoices/show.html.erb
@@ -40,7 +40,7 @@
           <% payment_params = { invoice_id: @invoice.id } %>
           <% payment_params[:token] = @access_token if @access_token.present? %>
           <%= link_to "Pay #{number_to_currency(@invoice.balance_due)}", 
-                new_tenant_payment_path(payment_params), 
+                new_payment_path(payment_params), 
                 class: "btn btn-primary" %>
           <p><small>Secure payment powered by Stripe</small></p>
         </div>
diff --git a/app/views/public/pages/home.html.erb b/app/views/public/pages/home.html.erb
index f5cae0e..4ccc200 100644
--- a/app/views/public/pages/home.html.erb
+++ b/app/views/public/pages/home.html.erb
@@ -133,7 +133,7 @@
                 <%= link_to "View Product", product_path(product), class: "inline-block bg-gray-600 text-white px-4 py-2 rounded text-sm hover:bg-gray-700 whitespace-nowrap" %>
                 <% if product.product_variants.any? %>
                   <% default_variant = product.product_variants.first %>
-                  <%= form_with url: line_items_path, method: :post, local: false, class: "inline-block" do |f| %>
+                  <%= form_with url: line_items_path, method: :post, local: true, class: "inline-block" do |f| %>
                     <%= f.hidden_field :product_variant_id, value: default_variant.id %>
                     <%= f.hidden_field :quantity, value: 1 %>
                     <%= f.submit "Add to Cart", class: "bg-green-600 text-white px-4 py-2 rounded text-sm hover:bg-green-700 whitespace-nowrap cursor-pointer" %>
@@ -185,7 +185,7 @@
   </div>
 
   <%# Links to other tenant pages (Optional Footer Section) %>
-  <div class="mt-12 pt-6 text-center text-sm text-gray-600">
+  <div class="mt-8 pt-4 text-center text-sm text-gray-600">
     <%= link_to "About Us", tenant_about_page_path, class: "hover:underline mx-2" %>
     <%= link_to "Contact Us", tenant_contact_page_path, class: "hover:underline mx-2" %>
     <% if @business.show_services_section? && @business.has_visible_services? %>
diff --git a/app/views/shared/_booking_details.html.erb b/app/views/shared/_booking_details.html.erb
index 6460817..13f6f01 100644
--- a/app/views/shared/_booking_details.html.erb
+++ b/app/views/shared/_booking_details.html.erb
@@ -195,7 +195,7 @@
       </div>
       <div class="mt-3">
         <% if request.subdomain.present? && request.subdomain != 'www' %>
-          <%= link_to 'View Invoice Details', tenant_transaction_path(booking.invoice, type: 'invoice'), 
+          <%= link_to 'View Invoice Details', transaction_path(booking.invoice, type: 'invoice'), 
               class: "bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm" %>
         <% else %>
           <%= link_to 'View Invoice Details', transaction_path(booking.invoice, type: 'invoice'), 
diff --git a/app/views/shared/_comprehensive_faq.html.erb b/app/views/shared/_comprehensive_faq.html.erb
index 7279f65..baa8d10 100644
--- a/app/views/shared/_comprehensive_faq.html.erb
+++ b/app/views/shared/_comprehensive_faq.html.erb
@@ -107,8 +107,8 @@
             <p class="mb-3">BizBlasts offers three pricing tiers to fit businesses of all sizes:</p>
             <ul class="list-disc list-inside space-y-2">
               <li><strong>Free Plan ($0/month):</strong> Perfect for getting started, includes website, booking system, and basic features + 5% transaction fee</li>
-              <li><strong>Standard Plan ($49/month):</strong> Most popular, adds SMS reminders, advanced features, calendar integration + 5% transaction fee</li>
-              <li><strong>Premium Plan ($99/month):</strong> For established businesses, includes multi-location, custom domain, no branding + 3% transaction fee</li>
+              <li><strong>Standard Plan ($9.99/month):</strong> Most popular, adds SMS reminders, advanced features, calendar integration + 5% transaction fee</li>
+              <li><strong>Premium Plan ($29.99/month):</strong> For established businesses, includes multi-location, custom domain, no branding + 3% transaction fee</li>
             </ul>
             <p class="mt-3">All transaction fees are in addition to standard Stripe processing fees (2.9% + $0.30 per transaction).</p>
           </div>
@@ -237,7 +237,7 @@
       "name": "How much does BizBlasts cost?",
       "acceptedAnswer": {
         "@type": "Answer",
-        "text": "BizBlasts offers three pricing tiers: Free Plan ($0/month + 5% transaction fee), Standard Plan ($49/month + 5% transaction fee), and Premium Plan ($99/month + 3% transaction fee). The free plan includes website, booking system, and basic features with no hidden fees."
+        "text": "BizBlasts offers three pricing tiers: Free Plan ($0/month + 5% transaction fee), Standard Plan ($9.99/month + 5% transaction fee), and Premium Plan ($29.99/month + 3% transaction fee). The free plan includes website, booking system, and basic features with no hidden fees."
       }
     },
     {
diff --git a/app/views/transactions/show.html.erb b/app/views/transactions/show.html.erb
index ce0e3ee..d246a20 100644
--- a/app/views/transactions/show.html.erb
+++ b/app/views/transactions/show.html.erb
@@ -417,12 +417,12 @@
         <% if request.subdomain.present? && request.subdomain != 'www' %>
           <% if current_user %>
             <%= link_to "Pay #{number_to_currency(@invoice.balance_due)}", 
-                  new_tenant_payment_path(invoice_id: @invoice.id), 
+                  new_payment_path(invoice_id: @invoice.id), 
                   class: "bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-200" %>
           <% else %>
             <!-- Guest user - payment link will redirect to invoice view after payment -->
             <%= link_to "Pay #{number_to_currency(@invoice.balance_due)}", 
-                  new_tenant_payment_path(invoice_id: @invoice.id), 
+                  new_payment_path(invoice_id: @invoice.id), 
                   class: "bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-200" %>
           <% end %>
         <% else %>
diff --git a/bin/split_service_tests.rb b/bin/split_service_tests.rb
new file mode 100755
index 0000000..f59aa91
--- /dev/null
+++ b/bin/split_service_tests.rb
@@ -0,0 +1,78 @@
+#!/usr/bin/env ruby
+
+# Script to automatically split service/job/policy specs into 3 balanced groups
+require 'find'
+
+def find_service_tests
+  tests = []
+  
+  # Include all service-related test directories
+  %w[spec/services spec/jobs spec/policies].each do |dir|
+    next unless Dir.exist?(dir)
+    
+    Find.find(dir) do |path|
+      tests << path if path.end_with?('_spec.rb')
+    end
+  end
+  
+  tests.sort
+end
+
+def split_tests_evenly(tests, num_groups = 3)
+  # Sort by file size (larger files likely have more/slower tests)
+  tests_with_size = tests.map do |test|
+    size = File.exist?(test) ? File.size(test) : 0
+    [test, size]
+  end
+
+  # Sort by size descending to distribute larger tests first
+  tests_with_size.sort_by! { |_, size| -size }
+
+  # Initialize groups
+  groups = Array.new(num_groups) { { tests: [], total_size: 0 } }
+
+  # Distribute tests using a greedy algorithm (assign to smallest group)
+  tests_with_size.each do |test, size|
+    smallest_group = groups.min_by { |group| group[:total_size] }
+    smallest_group[:tests] << test
+    smallest_group[:total_size] += size
+  end
+
+  groups.map { |group| group[:tests] }
+end
+
+def main
+  if ARGV[0] == '--help' || ARGV[0] == '-h'
+    puts "Usage: #{$0} [group_number]"
+    puts "  group_number: 1-3 (returns tests for that group)"
+    puts "  no args: shows all groups"
+    exit 0
+  end
+
+  tests = find_service_tests
+
+  if tests.empty?
+    puts "No service/job/policy specs found"
+    exit 0
+  end
+
+  groups = split_tests_evenly(tests, 3)
+
+  if ARGV[0]
+    group_num = ARGV[0].to_i
+    if group_num >= 1 && group_num <= 3
+      puts groups[group_num - 1].join(' ')
+    else
+      puts "Invalid group number. Use 1-3"
+      exit 1
+    end
+  else
+    groups.each_with_index do |group, index|
+      puts "Group #{index + 1} (#{group.length} tests):"
+      group.each { |test| puts "  #{test}" }
+      puts
+    end
+  end
+end
+
+main if __FILE__ == $0
\ No newline at end of file
diff --git a/bin/split_system_tests.rb b/bin/split_system_tests.rb
index bffc876..04da10f 100755
--- a/bin/split_system_tests.rb
+++ b/bin/split_system_tests.rb
@@ -1,6 +1,6 @@
 #!/usr/bin/env ruby
 
-# Script to automatically split system tests into 4 balanced groups
+# Script to automatically split system tests into 5 balanced groups
 require 'find'
 
 def find_system_tests
@@ -13,7 +13,7 @@ def find_system_tests
   tests.sort
 end
 
-def split_tests_evenly(tests, num_groups = 4)
+def split_tests_evenly(tests, num_groups = 5)
   # Sort by file size (larger files likely have more/slower tests)
   tests_with_size = tests.map do |test|
     size = File.exist?(test) ? File.size(test) : 0
@@ -39,7 +39,7 @@ end
 def main
   if ARGV[0] == '--help' || ARGV[0] == '-h'
     puts "Usage: #{$0} [group_number]"
-    puts "  group_number: 1, 2, 3, or 4 (returns tests for that group)"
+    puts "  group_number: 1-5 (returns tests for that group)"
     puts "  no args: shows all groups"
     exit 0
   end
@@ -51,14 +51,14 @@ def main
     exit 0
   end
   
-  groups = split_tests_evenly(tests, 4)
+  groups = split_tests_evenly(tests, 5)
   
   if ARGV[0]
     group_num = ARGV[0].to_i
-    if group_num >= 1 && group_num <= 4
+    if group_num >= 1 && group_num <= 5
       puts groups[group_num - 1].join(' ')
     else
-      puts "Invalid group number. Use 1, 2, 3, or 4"
+      puts "Invalid group number. Use 1-5"
       exit 1
     end
   else
diff --git a/bin/test-tenant-routes b/bin/test-tenant-routes
new file mode 100755
index 0000000..c6d8ab0
--- /dev/null
+++ b/bin/test-tenant-routes
@@ -0,0 +1,132 @@
+#!/usr/bin/env ruby
+# Quick script to test that tenant routes work on both subdomains and custom domains
+
+require 'net/http'
+require 'uri'
+
+# Configuration
+BASE_URL = ENV['RAILS_ENV'] == 'production' ? 'https://bizblasts.com' : 'http://localhost:3000'
+TEST_SUBDOMAIN = 'testtenant'
+TEST_CUSTOM_DOMAIN = 'example.com'  # Replace with actual test domain
+
+# Routes to test
+ROUTES_TO_TEST = [
+  '/',
+  '/services', 
+  '/about',
+  '/book',
+  '/cart',
+  '/orders',
+  '/payments/new',
+  '/calendar',
+  '/products'
+]
+
+def test_url(host, path)
+  url = "#{BASE_URL}#{path}"
+  
+  if BASE_URL.include?('localhost')
+    # For local development, test by setting Host header
+    uri = URI(url)
+    http = Net::HTTP.new(uri.host, uri.port)
+    request = Net::HTTP::Get.new(uri.path)
+    request['Host'] = host
+    
+    begin
+      response = http.request(request)
+      status = response.code.to_i
+      
+      if status == 200
+        puts "  ✅ #{path} → #{status}"
+        return true
+      elsif status == 302 || status == 301
+        puts "  🔄 #{path} → #{status} (redirect)"
+        return true
+      else
+        puts "  ❌ #{path} → #{status}"
+        return false
+      end
+    rescue => e
+      puts "  ❌ #{path} → Error: #{e.message}"
+      return false
+    end
+  else
+    # For production, would need actual HTTP requests
+    puts "  ℹ️  #{path} (production testing requires actual domains)"
+    return true
+  end
+end
+
+def test_host(host, description)
+  puts "\n📍 Testing #{description}: #{host}"
+  puts "-" * 50
+  
+  success_count = 0
+  ROUTES_TO_TEST.each do |route|
+    success_count += 1 if test_url(host, route)
+  end
+  
+  puts "\n📊 Results: #{success_count}/#{ROUTES_TO_TEST.size} routes working"
+  success_count == ROUTES_TO_TEST.size
+end
+
+puts "🧪 Tenant Route Testing Script"
+puts "=" * 50
+puts "Testing that tenant routes work on both domain types..."
+
+if ARGV.include?('--help') || ARGV.include?('-h')
+  puts <<~HELP
+    Usage: bin/test-tenant-routes [options]
+    
+    Options:
+      --subdomain SUBDOMAIN    Test specific subdomain (default: testtenant)
+      --custom-domain DOMAIN   Test specific custom domain (default: example.com)
+      --route PATH             Test specific route (default: all routes)
+      --help, -h               Show this help
+    
+    Examples:
+      bin/test-tenant-routes
+      bin/test-tenant-routes --subdomain mybiz
+      bin/test-tenant-routes --route /cart
+      bin/test-tenant-routes --custom-domain mydomain.com
+  HELP
+  exit 0
+end
+
+# Parse command line arguments
+subdomain = ARGV.find { |arg| ARGV[ARGV.index(arg) - 1] == '--subdomain' } || TEST_SUBDOMAIN
+custom_domain = ARGV.find { |arg| ARGV[ARGV.index(arg) - 1] == '--custom-domain' } || TEST_CUSTOM_DOMAIN
+specific_route = ARGV.find { |arg| ARGV[ARGV.index(arg) - 1] == '--route' }
+
+if specific_route
+  ROUTES_TO_TEST.replace([specific_route])
+end
+
+# Test subdomain
+subdomain_host = "#{subdomain}.#{BASE_URL.include?('localhost') ? 'lvh.me' : 'bizblasts.com'}"
+subdomain_success = test_host(subdomain_host, "Subdomain")
+
+# Test custom domain (only if not localhost)
+custom_domain_success = true
+unless BASE_URL.include?('localhost')
+  custom_domain_success = test_host(custom_domain, "Custom Domain")
+end
+
+puts "\n" + "=" * 50
+puts "🎯 FINAL RESULTS"
+puts "=" * 50
+
+if subdomain_success && custom_domain_success
+  puts "🎉 SUCCESS: All tenant routes working correctly!"
+  puts "✅ Subdomain routing: WORKING"
+  puts "✅ Custom domain routing: WORKING" unless BASE_URL.include?('localhost')
+  puts "\n💡 Your new routes will work on both domain types!"
+  exit 0
+else
+  puts "❌ ISSUES DETECTED:"
+  puts "❌ Subdomain routing: FAILED" unless subdomain_success
+  puts "❌ Custom domain routing: FAILED" unless custom_domain_success
+  puts "\n🔧 Check your route configuration in config/routes.rb"
+  puts "📖 See docs/TENANT_ROUTING_GUIDE.md for guidance"
+  exit 1
+end
diff --git a/config/application.rb b/config/application.rb
index b504949..3cd72de 100644
--- a/config/application.rb
+++ b/config/application.rb
@@ -55,6 +55,12 @@ module Bizblasts
     config.hosts << /.+\.lvh\.me/
     config.hosts << /.+\.bizblasts\.com/
     config.hosts << /.+\.bizblasts\.onrender\.com/
+    # Main platform domains (add apex + www to cover redirects)
+    [
+      "bizblasts.com",
+      "www.bizblasts.com",
+      "bizblasts.onrender.com"
+    ].each { |h| config.hosts << h }
     # Allow Render PR preview URLs (format: bizblasts-pr-XX.onrender.com)
     config.hosts << /bizblasts-pr-\d+\.onrender\.com/
 
diff --git a/config/environments/production.rb b/config/environments/production.rb
index f475e09..ed39df2 100644
--- a/config/environments/production.rb
+++ b/config/environments/production.rb
@@ -121,19 +121,32 @@ Rails.application.configure do
   # Only use :id for inspections in production.
   config.active_record.attributes_for_inspect = [:id]
 
-  # Enable DNS rebinding protection and other `Host` header attacks.
-  config.hosts = [
-    "bizblasts.onrender.com",
-    "bizblasts.com",
-    "www.bizblasts.com",
-    "*.bizblasts.com",
-    "*.bizblasts.onrender.com",
-    ".bizblasts.com",
-    ".*\.bizblasts\.com$/",
-    # Allow Render PR preview URLs (format: bizblasts-pr-XX.onrender.com)
-    /bizblasts-pr-\d+\.onrender\.com/
-  ]
+  # Default allowed hosts are set in `config/application.rb`. Additional
+  # custom domains are added at runtime via
+  # `config/initializers/custom_domain_hosts.rb`.
   
-  # Skip DNS rebinding protection for the default health check endpoint.
-  config.host_authorization = { exclude: ->(request) { request.path == "/up" } }
+  # Skip DNS rebinding protection for:
+  # - Health check endpoints
+  # - Active custom domains stored in the database (both apex and www forms)
+  config.host_authorization = {
+    exclude: ->(request) do
+      return true if ["/up", "/healthcheck"].include?(request.path)
+
+      begin
+        return false unless defined?(Business)
+        host = request.host.to_s.downcase.sub(/^www\./, '')
+        candidates = [host, "www.#{host}"]
+        Business.where(host_type: 'custom_domain')
+                .where(status: ['cname_pending', 'cname_monitoring', 'cname_active'])
+                .where('LOWER(hostname) IN (?)', candidates)
+                .exists?
+      rescue StandardError
+        false
+      end
+    end
+  }
+
+  # Do NOT clear hosts in production. Use dynamic host_authorization above and
+  # the custom_domain_hosts initializer to permit specific hosts.
+
 end
\ No newline at end of file
diff --git a/config/initializers/custom_domain_hosts.rb b/config/initializers/custom_domain_hosts.rb
new file mode 100644
index 0000000..9194ed9
--- /dev/null
+++ b/config/initializers/custom_domain_hosts.rb
@@ -0,0 +1,68 @@
+# frozen_string_literal: true
+
+# Dynamically allow custom domains stored in the businesses table to pass
+# Rails’ Host Authorization middleware in production. This prevents 403
+# “Blocked hosts” errors when a tenant’s custom domain is connected.
+
+return unless Rails.env.production?
+
+# Helper to add hosts idempotently
+add_hosts = lambda do |domains|
+  next if domains.blank?
+  # Build normalized set to avoid duplicates
+  existing = Rails.application.config.hosts.dup
+  Array(domains).map(&:to_s).each do |domain|
+    root = domain.sub(/^www\./, '')
+    [domain, root, "www.#{root}"].uniq.each do |h|
+      Rails.application.config.hosts << h unless existing.include?(h)
+      existing << h
+    end
+  end
+end
+
+# 1) Always allow any hosts provided via env var (comma or space separated)
+begin
+  env_hosts = ENV['CUSTOM_ALLOWED_HOSTS']
+  if env_hosts.present?
+    domains = env_hosts.split(/[\s,]+/).reject(&:blank?)
+    add_hosts.call(domains)
+    Rails.logger.info("[CustomDomainHosts] Loaded env CUSTOM_ALLOWED_HOSTS: #{domains.join(', ')}")
+  end
+rescue => e
+  Rails.logger.warn("[CustomDomainHosts] Failed to load CUSTOM_ALLOWED_HOSTS: #{e.class} – #{e.message}")
+end
+
+# During asset builds or early boot, the DB/model may not be available.
+# Keep the lightweight guard for those phases.
+begin
+  if defined?(Business) && Business.respond_to?(:where) && Business.table_exists?
+    domains = Business.where(host_type: "custom_domain")
+                     .where(status: ['cname_pending', 'cname_monitoring', 'cname_active'])
+                     .where.not(hostname: [nil, ""])
+                     .pluck(:hostname)
+    add_hosts.call(domains)
+  else
+    Rails.logger.info("[CustomDomainHosts] Business model not available during early boot; scheduling after_initialize load")
+  end
+rescue ActiveRecord::NoDatabaseError, ActiveRecord::StatementInvalid, PG::UndefinedTable, StandardError => e
+  Rails.logger.warn("[CustomDomainHosts] Skipping early host preload: #{e.class} – #{e.message}")
+end
+
+# Ensure hosts are added once the app is fully initialized (runtime boots).
+Rails.application.config.after_initialize do
+  begin
+    model = 'Business'.safe_constantize
+    if model && model.respond_to?(:where) && ActiveRecord::Base.connection.data_source_exists?('businesses')
+      domains = model.where(host_type: 'custom_domain')
+                     .where(status: ['cname_pending', 'cname_monitoring', 'cname_active'])
+                     .where.not(hostname: [nil, ''])
+                     .pluck(:hostname)
+      add_hosts.call(domains)
+      Rails.logger.info("[CustomDomainHosts] Hosts list size: #{Rails.application.config.hosts.size}")
+    else
+      Rails.logger.info('[CustomDomainHosts] Business model/table unavailable after_initialize; skipping')
+    end
+  rescue => e
+    Rails.logger.warn("[CustomDomainHosts] after_initialize load failed: #{e.class} – #{e.message}")
+  end
+end
diff --git a/config/initializers/devise.rb b/config/initializers/devise.rb
index 7debb33..2579554 100644
--- a/config/initializers/devise.rb
+++ b/config/initializers/devise.rb
@@ -341,7 +341,7 @@ Devise.setup do |config|
   # apps is `200 OK` and `302 Found` respectively, but new apps are generated with
   # these new defaults that match Hotwire/Turbo behavior.
   # Note: These might become the new default in future versions of Devise.
-  config.responder.error_status = :unprocessable_entity
+  config.responder.error_status = :unprocessable_content
   config.responder.redirect_status = :see_other
 
   # ==> Configuration for :registerable
diff --git a/config/initializers/session_store.rb b/config/initializers/session_store.rb
index 07a136b..de7829a 100644
--- a/config/initializers/session_store.rb
+++ b/config/initializers/session_store.rb
@@ -1,13 +1,36 @@
 # Be sure to restart your server when you modify this file.
 
 # Configure session store based on environment
+# In production we need to support two scenarios:
+# 1. Main platform domain and its sub-domains (e.g. bizblasts.com, tenant.bizblasts.com)
+# 2. Independent custom domains that belong to tenants (e.g. newcoworker.com)
+#
+# Using a static cookie `domain` breaks CSRF/session handling on the custom domain flow
+# because browsers refuse to store a cookie for a different domain. Instead we
+# compute the cookie domain per-request:
+#   • If the host ends with our platform domain we return ".bizblasts.com" so the
+#     session is shared across all sub-domains.
+#   • Otherwise we return the exact host so the session is scoped to the custom
+#     domain only (no wildcard) – this avoids leaking cookies between tenants.
+#
+# Rails 7+ supports a lambda for the `domain:` option.
+
 if Rails.env.production?
-  # Use cookie store with secure options for production
-  Rails.application.config.session_store :cookie_store, 
-                                         key: '_bizblasts_session', 
-                                         domain: 'bizblasts.com', # TLD for production
-                                         secure: true, 
-                                         httponly: true
+  Rails.application.config.session_store :cookie_store,
+                                         key: '_bizblasts_session',
+                                         domain: ->(request) do
+                                           host = request.host
+                                           platform_domain = 'bizblasts.com'
+
+                                           if host.ends_with?(platform_domain)
+                                             ".#{platform_domain}"
+                                           else
+                                             host # Custom domain – isolate cookie
+                                           end
+                                         end,
+                                         secure: true,
+                                         httponly: true,
+                                         same_site: :lax
 elsif Rails.env.development?
   # For development with lvh.me, allow all subdomains
   Rails.application.config.session_store :cookie_store, 
diff --git a/config/routes.rb b/config/routes.rb
index e3e2c07..eadfb3a 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -1,8 +1,104 @@
 # frozen_string_literal: true
 
 require Rails.root.join('lib/constraints/subdomain_constraint')
+require Rails.root.join('lib/constraints/custom_domain_constraint')
+require Rails.root.join('lib/constraints/tenant_public_constraint')
 
 Rails.application.routes.draw do
+  # Health check routes - MUST be first to avoid being caught by catch-all routes
+  get "up" => "rails/health#show", as: :rails_health_check
+  get "healthcheck" => "health#check", as: :health_check
+  get "db-check" => "health#db_check", as: :db_check
+  get "maintenance" => "maintenance#index", as: :maintenance
+
+  # Tenant public routes: available on both subdomains and active custom domains
+  constraints TenantPublicConstraint do
+    # (public routes continue)
+    scope module: 'public' do
+      get '/', to: 'pages#show', constraints: { page: /home|root|^$/ }, as: :tenant_root
+      get '/about', to: 'pages#show', page: 'about', as: :tenant_about_page
+      get '/services', to: 'pages#show', page: 'services', as: :tenant_services_page
+      get '/services/:id', to: 'services#show', as: :tenant_service
+      # Product listings under tenant public scope
+      resources :products, only: [:index, :show]
+      get '/contact', to: 'pages#show', page: 'contact', as: :tenant_contact_page
+
+      # Estimate page and form submission
+      get '/estimate', to: 'pages#show', page: 'estimate', as: :tenant_estimate_page
+      post '/estimate', to: 'requests#create', as: :tenant_estimate_request
+
+      get '/calendar', to: 'tenant_calendar#index', as: :tenant_calendar
+      get '/available-slots', to: 'tenant_calendar#available_slots', as: :tenant_available_slots
+      get '/staff-availability', to: 'tenant_calendar#staff_availability', as: :tenant_staff_availability
+
+      get '/book', to: 'booking#new', as: :new_tenant_booking
+      resources :booking, only: [:create], as: :tenant_bookings
+      get '/booking/:id/confirmation', to: 'booking#confirmation', as: :tenant_booking_confirmation
+
+      get '/my-bookings', to: 'client_bookings#index', as: :tenant_my_bookings
+      get '/my-bookings/:id', to: 'client_bookings#show', as: :tenant_my_booking, constraints: { id: /\d+/ }
+      # Add alias for backward compatibility with tests
+      get '/booking/:id', to: 'client_bookings#show', as: :tenant_booking, constraints: { id: /\d+/ }
+      patch '/my-bookings/:id/cancel', to: 'client_bookings#cancel', as: :cancel_tenant_my_booking, constraints: { id: /\d+/ }
+
+      resources :invoices, only: [:index, :show], as: :tenant_invoices do
+        post :pay, on: :member
+      end
+      resources :payments, only: [:index, :new, :create]
+      
+      # Tips for experience bookings
+      resources :bookings, only: [] do
+        resources :tips, only: [:new, :create] do
+          member do
+            get :success
+            get :cancel
+          end
+        end
+      end
+      
+      # Unified transactions view
+      resources :transactions, only: [:index, :show]
+
+      # Public checkout/cart/orders/subscriptions/policies are defined below with tenant_* helpers
+
+      # Business-specific loyalty (on subdomain)
+      get '/loyalty', to: 'loyalty#show', as: :tenant_loyalty
+      post '/loyalty/redeem', to: 'loyalty#redeem_points', as: :tenant_loyalty_redeem
+
+      # Direct referral program access for current tenant
+      get '/referral', to: 'referral#show', as: :tenant_referral_program
+
+      # Public cart/checkout and subscriptions - MUST come before catch-all
+      resource  :cart, only: [:show]
+      resources :line_items, only: [:create, :update, :destroy]
+      resources :orders,     only: [:new, :create, :index, :show] do
+        collection { post :validate_promo_code }
+      end
+      resources :subscriptions, only: [:new, :create] do
+        member { get :confirmation }
+      end
+      resources :policy_acceptances, only: [:create, :show]
+      get '/policy_status', to: 'policy_acceptances#status'
+      post '/policy_acceptances/bulk', to: 'policy_acceptances#bulk_create'
+
+      # Tip collection routes (token-based for experiences)
+      resources :tips, only: [:new, :create, :show] do
+        member do
+          get :success
+          get :cancel
+        end
+      end
+
+      # Catch-all for static pages must come last
+      get '/:page', to: 'pages#show', as: :tenant_page
+    end
+  end
+
+  # Redirect management/dashboard for custom-domain hosts ONLY (after public routes)
+  constraints CustomDomainConstraint do
+    get '/manage(/*path)', to: 'tenant_redirect#manage', as: :tenant_manage_redirect
+  end
+
   # API routes for AI/LLM discovery
   namespace :api do
     namespace :v1 do
@@ -187,6 +283,10 @@ Rails.application.routes.draw do
           get :stripe_onboarding
           post :refresh_stripe
           delete :disconnect_stripe
+          post :check_subdomain_availability
+          get  :check_subdomain_availability
+          get  :check_domain_status
+          post :finalize_domain_activation
         end
         resources :teams, only: [:index, :new, :create, :destroy]
         resource :booking_policy, only: [:show, :edit, :update]
@@ -205,6 +305,7 @@ Rails.application.routes.draw do
         get 'subscription', to: 'subscriptions#show', as: :subscription
         post 'subscription/checkout', to: 'subscriptions#create_checkout_session', as: :subscription_checkout
         post 'subscription/portal', to: 'subscriptions#customer_portal_session', as: :subscription_portal
+        post 'subscription/downgrade', to: 'subscriptions#downgrade', as: :subscription_downgrade
         # Stripe webhook endpoint - scoped under /manage/settings/stripe_events
         post 'stripe_events', to: 'subscriptions#webhook'
 
@@ -382,27 +483,7 @@ Rails.application.routes.draw do
       resources :orders, only: [:index, :show]
     end
 
-    # Add cart resource within the subdomain constraint
-    resource :cart, only: [:show]
-    resources :line_items, only: [:create, :update, :destroy]
-          # Subdomain checkout uses Public::OrdersController for guest flows
-      resources :orders, only: [:new, :create, :index, :show], controller: 'public/orders' do
-        collection do
-          post :validate_promo_code
-        end
-      end
-      
-      # Public subscription signup (for customers on business subdomains)
-      resources :subscriptions, only: [:new, :create], controller: 'public/subscriptions' do
-        member do
-          get :confirmation
-        end
-      end
-
-    # Policy acceptance routes for subdomain users
-    resources :policy_acceptances, only: [:create, :show]
-    get '/policy_status', to: 'policy_acceptances#status'
-    post '/policy_acceptances/bulk', to: 'policy_acceptances#bulk_create'
+    # Public cart/checkout and subscriptions now handled by TenantPublicConstraint (see top block)
 
     # Policy pages for subdomain users (redirect to main domain)
     get '/privacypolicy', to: redirect { |params, request| 
@@ -436,79 +517,14 @@ Rails.application.routes.draw do
       "#{protocol}#{request.domain}#{port}/settings"
     }
 
-    scope module: 'public' do
-      get '/', to: 'pages#show', constraints: { page: /home|root|^$/ }, as: :tenant_root
-      get '/about', to: 'pages#show', page: 'about', as: :tenant_about_page
-      get '/services', to: 'pages#show', page: 'services', as: :tenant_services_page
-      get '/services/:id', to: 'services#show', as: :tenant_service
-      # Product listings under subdomain go through Public::ProductsController
-      resources :products, only: [:index, :show]
-      get '/contact', to: 'pages#show', page: 'contact', as: :tenant_contact_page
-
-      # Estimate page and form submission
-      get '/estimate', to: 'pages#show', page: 'estimate', as: :tenant_estimate_page
-      post '/estimate', to: 'requests#create', as: :tenant_estimate_request
-
-      get '/calendar', to: 'tenant_calendar#index', as: :tenant_calendar
-      get '/available-slots', to: 'tenant_calendar#available_slots', as: :tenant_available_slots
-      get '/staff-availability', to: 'tenant_calendar#staff_availability', as: :tenant_staff_availability
-
-      get '/book', to: 'booking#new', as: :new_tenant_booking
-      resources :booking, only: [:create], as: :tenant_bookings
-      get '/booking/:id/confirmation', to: 'booking#confirmation', as: :tenant_booking_confirmation
-
-      get '/my-bookings', to: 'client_bookings#index', as: :tenant_my_bookings
-      get '/my-bookings/:id', to: 'client_bookings#show', as: :tenant_my_booking, constraints: { id: /\d+/ }
-      # Add alias for backward compatibility with tests
-      get '/booking/:id', to: 'client_bookings#show', as: :tenant_booking, constraints: { id: /\d+/ }
-      patch '/my-bookings/:id/cancel', to: 'client_bookings#cancel', as: :cancel_tenant_my_booking, constraints: { id: /\d+/ }
-
-      resources :invoices, only: [:index, :show], as: :tenant_invoices do
-        member do
-          post :pay
-        end
-      end
-      resources :payments, only: [:index, :new, :create], as: :tenant_payments
-      
-      # Tips for experience bookings
-      resources :bookings, only: [] do
-        resources :tips, only: [:new, :create] do
-          member do
-            get :success
-            get :cancel
-          end
-        end
-      end
-      
-      # Unified transactions view for subdomain
-      resources :transactions, only: [:index, :show], as: :tenant_transactions
-
-      # Business-specific loyalty (on subdomain)
-      get '/loyalty', to: 'loyalty#show', as: :tenant_loyalty
-      post '/loyalty/redeem', to: 'loyalty#redeem_points', as: :tenant_loyalty_redeem
-
-      # Direct referral program access for current tenant
-      get '/referral', to: 'referral#show', as: :tenant_referral_program
-
-      # Catch-all for static pages must come last
-      get '/:page', to: 'pages#show', as: :tenant_page
-    end
-
-    # Tip collection routes (token-based for experiences)
-    resources :tips, only: [:new, :create, :show], controller: 'public/tips' do
-      member do
-        get :success
-        get :cancel
-      end
-    end
+    # Tenant public routes are unified by TenantPublicConstraint (see top block)
   end
 
   # Fallback routes for base OrdersController new/create
   resources :orders, only: [:new, :create, :index, :show]
 
   resources :businesses, only: [:index]
-  # Keep the global cart resource to maintain compatibility 
-  resource :cart, only: [:show]
+  # Cart is now handled in TenantPublicConstraint block
   resources :line_items, only: [:create, :update, :destroy]
   # Add back the global products routes for controller specs
   resources :products, only: [:index, :show]
@@ -572,10 +588,9 @@ Rails.application.routes.draw do
   get '/policy_status', to: 'policy_acceptances#status'
   post '/policy_acceptances/bulk', to: 'policy_acceptances#bulk_create'
 
-  get "up" => "rails/health#show", as: :rails_health_check
-  get "healthcheck" => "health#check", as: :health_check
-  get "db-check" => "health#db_check", as: :db_check
-  get "maintenance" => "maintenance#index", as: :maintenance
+  # Public subdomain availability endpoint
+  get '/subdomains/check', to: 'public/subdomains#check', defaults: { format: :json }
+
   get "home/debug" => redirect("/admin/debug"), as: :old_tenant_debug
   get "admin/debug" => "admin/debug#index", as: :tenant_debug
 
diff --git a/db/migrate/20250821171908_add_cname_fields_to_businesses.rb b/db/migrate/20250821171908_add_cname_fields_to_businesses.rb
new file mode 100644
index 0000000..d98139c
--- /dev/null
+++ b/db/migrate/20250821171908_add_cname_fields_to_businesses.rb
@@ -0,0 +1,11 @@
+class AddCnameFieldsToBusinesses < ActiveRecord::Migration[8.0]
+  def change
+    add_column :businesses, :cname_setup_email_sent_at, :datetime
+    add_column :businesses, :cname_monitoring_active, :boolean, default: false, null: false
+    add_column :businesses, :cname_check_attempts, :integer, default: 0, null: false
+    add_column :businesses, :render_domain_added, :boolean, default: false, null: false
+    
+    # Add index for performance (status index already exists)
+    add_index :businesses, :cname_monitoring_active
+  end
+end
diff --git a/db/migrate/20250822201249_add_status_to_businesses.rb b/db/migrate/20250822201249_add_status_to_businesses.rb
new file mode 100644
index 0000000..20e54ec
--- /dev/null
+++ b/db/migrate/20250822201249_add_status_to_businesses.rb
@@ -0,0 +1,113 @@
+class AddStatusToBusinesses < ActiveRecord::Migration[8.0]
+  def up
+    # Store original state for rollback
+    original_default = nil
+    column_existed = column_exists?(:businesses, :status)
+    
+    if column_existed
+      original_default = connection.columns(:businesses).find { |c| c.name == 'status' }&.default
+    end
+    
+    # Store this information for the down migration
+    connection.execute <<~SQL
+      CREATE TABLE IF NOT EXISTS migration_metadata_20250822201249 (
+        key VARCHAR(50) PRIMARY KEY,
+        value TEXT
+      )
+    SQL
+    
+    # Use proper SQL escaping to prevent injection and handle special characters
+    escaped_column_existed = connection.quote(column_existed.to_s)
+    escaped_original_default = original_default ? connection.quote(original_default) : 'NULL'
+    
+    connection.execute <<~SQL
+      INSERT INTO migration_metadata_20250822201249 (key, value) 
+      VALUES ('column_existed', #{escaped_column_existed})
+      ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value
+    SQL
+    
+    connection.execute <<~SQL
+      INSERT INTO migration_metadata_20250822201249 (key, value) 
+      VALUES ('original_default', #{escaped_original_default})
+      ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value
+    SQL
+    
+    # Add status column if it doesn't exist (production fix)
+    unless column_existed
+      add_column :businesses, :status, :string, null: false, default: 'active'
+      say "Added status column with default 'active'"
+    else
+      # Column exists but may have wrong default - fix it to match the model
+      if original_default != 'active'
+        change_column_default :businesses, :status, from: original_default, to: 'active'
+        say "Changed status column default from '#{original_default}' to 'active'"
+      else
+        say "Status column already has correct default 'active'"
+      end
+    end
+    
+    # Add index if it doesn't exist (handles both missing column and missing index cases)
+    unless index_exists?(:businesses, :status)
+      add_index :businesses, :status
+      say "Added index on status column"
+    end
+  end
+
+  def down
+    # Retrieve original state information
+    metadata_exists = connection.table_exists?('migration_metadata_20250822201249')
+    column_existed = false
+    original_default = nil
+    
+    if metadata_exists
+      result = connection.execute("SELECT key, value FROM migration_metadata_20250822201249")
+      result.each do |row|
+        key = row['key'] || row[0]  # Handle different DB adapter result formats
+        value = row['value'] || row[1]
+        
+        case key
+        when 'column_existed'
+          column_existed = value.to_s == 'true'
+        when 'original_default'
+          original_default = value == 'NULL' ? nil : value
+        end
+      end
+    end
+    
+    # Remove index if it exists
+    if index_exists?(:businesses, :status)
+      remove_index :businesses, :status
+      say "Removed status index"
+    end
+    
+    if column_exists?(:businesses, :status)
+      if column_existed && metadata_exists
+        # Column existed before migration - restore original default
+        current_default = connection.columns(:businesses).find { |c| c.name == 'status' }&.default
+        
+        if current_default == 'active' && original_default != 'active'
+          if original_default.nil?
+            # Original had no default
+            connection.execute("ALTER TABLE businesses ALTER COLUMN status DROP DEFAULT")
+            say "Removed default from status column (restored original state)"
+          else
+            change_column_default :businesses, :status, from: 'active', to: original_default
+            say "Reverted status column default from 'active' to '#{original_default}'"
+          end
+        end
+        
+        say "Note: status column not removed as it existed before this migration."
+      else
+        # Column was added by this migration or we can't determine - be conservative
+        say "Note: status column not removed to prevent data loss."
+        say "If column was added by this migration and needs removal, create a separate migration."
+      end
+    end
+    
+    # Clean up metadata table
+    if metadata_exists
+      connection.execute("DROP TABLE migration_metadata_20250822201249")
+      say "Cleaned up migration metadata"
+    end
+  end
+end
diff --git a/db/migrate/20250825045412_add_custom_domain_owned_to_business.rb b/db/migrate/20250825045412_add_custom_domain_owned_to_business.rb
new file mode 100644
index 0000000..d6cdead
--- /dev/null
+++ b/db/migrate/20250825045412_add_custom_domain_owned_to_business.rb
@@ -0,0 +1,5 @@
+class AddCustomDomainOwnedToBusiness < ActiveRecord::Migration[8.0]
+  def change
+    add_column :businesses, :custom_domain_owned, :boolean
+  end
+end
diff --git a/db/migrate/20250910030715_add_health_status_to_businesses.rb b/db/migrate/20250910030715_add_health_status_to_businesses.rb
new file mode 100644
index 0000000..331f0c1
--- /dev/null
+++ b/db/migrate/20250910030715_add_health_status_to_businesses.rb
@@ -0,0 +1,9 @@
+class AddHealthStatusToBusinesses < ActiveRecord::Migration[8.0]
+  def change
+    add_column :businesses, :domain_health_verified, :boolean, default: false, null: false
+    add_column :businesses, :domain_health_checked_at, :datetime
+    
+    # Add index for querying businesses needing health checks
+    add_index :businesses, [:host_type, :status, :domain_health_verified], name: 'index_businesses_on_custom_domain_health'
+  end
+end
diff --git a/db/migrate/20250911163114_add_canonical_preference_to_businesses.rb b/db/migrate/20250911163114_add_canonical_preference_to_businesses.rb
new file mode 100644
index 0000000..794d963
--- /dev/null
+++ b/db/migrate/20250911163114_add_canonical_preference_to_businesses.rb
@@ -0,0 +1,8 @@
+class AddCanonicalPreferenceToBusinesses < ActiveRecord::Migration[8.0]
+  def change
+    add_column :businesses, :canonical_preference, :string, default: 'www', null: false,
+               comment: 'Preferred canonical version: "www" or "apex" for custom domains'
+    
+    add_index :businesses, :canonical_preference
+  end
+end
diff --git a/db/schema.rb b/db/schema.rb
index 1df806a..89e6272 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -10,7 +10,7 @@
 #
 # It's strongly recommended that you check this file into your version control system.
 
-ActiveRecord::Schema[8.0].define(version: 2025_08_17_174318) do
+ActiveRecord::Schema[8.0].define(version: 2025_09_11_163114) do
   # These are extensions that must be enabled in order to support this database
   enable_extension "btree_gist"
   enable_extension "pg_catalog.plpgsql"
@@ -223,7 +223,6 @@ ActiveRecord::Schema[8.0].define(version: 2025_08_17_174318) do
     t.string "tiktok_url"
     t.string "youtube_url"
     t.string "stripe_account_id"
-    t.string "status", default: "pending", null: false
     t.boolean "payment_reminders_enabled", default: false, null: false
     t.boolean "domain_coverage_applied", default: false
     t.decimal "domain_cost_covered", precision: 8, scale: 2
@@ -253,6 +252,17 @@ ActiveRecord::Schema[8.0].define(version: 2025_08_17_174318) do
     t.string "google_business_website"
     t.boolean "google_business_manual", default: false
     t.boolean "tip_mailer_if_no_tip_received", default: true, null: false
+    t.datetime "cname_setup_email_sent_at"
+    t.boolean "cname_monitoring_active", default: false, null: false
+    t.integer "cname_check_attempts", default: 0, null: false
+    t.boolean "render_domain_added", default: false, null: false
+    t.string "status", default: "active", null: false
+    t.boolean "custom_domain_owned"
+    t.boolean "domain_health_verified", default: false, null: false
+    t.datetime "domain_health_checked_at"
+    t.string "canonical_preference", default: "www", null: false, comment: "Preferred canonical version: \"www\" or \"apex\" for custom domains"
+    t.index ["canonical_preference"], name: "index_businesses_on_canonical_preference"
+    t.index ["cname_monitoring_active"], name: "index_businesses_on_cname_monitoring_active"
     t.index ["description"], name: "index_businesses_on_description"
     t.index ["domain_auto_renewal_enabled"], name: "index_businesses_on_domain_auto_renewal_enabled"
     t.index ["domain_coverage_applied"], name: "index_businesses_on_domain_coverage_applied"
@@ -260,6 +270,7 @@ ActiveRecord::Schema[8.0].define(version: 2025_08_17_174318) do
     t.index ["domain_renewal_date"], name: "index_businesses_on_domain_renewal_date"
     t.index ["google_business_manual"], name: "index_businesses_on_google_business_manual"
     t.index ["google_place_id"], name: "index_businesses_on_google_place_id", unique: true
+    t.index ["host_type", "status", "domain_health_verified"], name: "index_businesses_on_custom_domain_health"
     t.index ["host_type"], name: "index_businesses_on_host_type"
     t.index ["hostname"], name: "index_businesses_on_hostname", unique: true
     t.index ["name"], name: "index_businesses_on_name"
@@ -687,6 +698,10 @@ ActiveRecord::Schema[8.0].define(version: 2025_08_17_174318) do
     t.index ["promotion_id"], name: "index_marketing_campaigns_on_promotion_id"
   end
 
+  create_table "migration_metadata_20250822201249", primary_key: "key", id: { type: :string, limit: 50 }, force: :cascade do |t|
+    t.text "value"
+  end
+
   create_table "notification_templates", force: :cascade do |t|
     t.bigint "business_id", null: false
     t.string "event_type"
@@ -734,7 +749,7 @@ ActiveRecord::Schema[8.0].define(version: 2025_08_17_174318) do
     t.index ["tenant_customer_id", "created_at"], name: "index_orders_on_tenant_customer_id_and_created_at"
     t.index ["tenant_customer_id"], name: "index_orders_on_tenant_customer_id"
     t.index ["tip_amount"], name: "index_orders_on_tip_amount"
-    t.check_constraint "status::text = ANY (ARRAY['pending_payment'::character varying, 'paid'::character varying, 'cancelled'::character varying, 'shipped'::character varying, 'refunded'::character varying, 'processing'::character varying, 'completed'::character varying, 'business_deleted'::character varying]::text[])", name: "status_enum_check"
+    t.check_constraint "status::text = ANY (ARRAY['pending_payment'::character varying::text, 'paid'::character varying::text, 'cancelled'::character varying::text, 'shipped'::character varying::text, 'refunded'::character varying::text, 'processing'::character varying::text, 'completed'::character varying::text, 'business_deleted'::character varying::text])", name: "status_enum_check"
   end
 
   create_table "page_sections", force: :cascade do |t|
diff --git a/db/seeds.rb b/db/seeds.rb
index f63aff7..4cf0ac0 100644
--- a/db/seeds.rb
+++ b/db/seeds.rb
@@ -41,6 +41,13 @@ puts "Seeding database with sample data..."
 puts "--- DEBUG: Rails environment: #{Rails.env}"
 puts "--- DEBUG: Rails version: #{Rails.version}"
 puts "--- DEBUG: ActiveRecord version: #{ActiveRecord::VERSION::STRING}"
+
+# Safety check: ensure all required columns exist before accessing model enums
+unless Business.column_names.include?('status')
+  puts "ERROR: businesses table is missing 'status' column. Run migrations first!"
+  exit 1
+end
+
 puts "--- DEBUG: Business.industries: #{Business.industries.inspect}"
 puts "--- DEBUG: Business.tiers: #{Business.tiers.inspect}"
 puts "--- DEBUG: Business.host_types: #{Business.host_types.inspect}"
diff --git a/docs/CNAME_CUSTOM_DOMAIN_IMPLEMENTATION.md b/docs/CNAME_CUSTOM_DOMAIN_IMPLEMENTATION.md
new file mode 100644
index 0000000..f6baf27
--- /dev/null
+++ b/docs/CNAME_CUSTOM_DOMAIN_IMPLEMENTATION.md
@@ -0,0 +1,384 @@
+# CNAME Custom Domain Implementation
+
+This document details the complete implementation of the CNAME custom domain feature for BizBlasts Premium tier businesses.
+
+## Overview
+
+The CNAME custom domain feature allows Premium tier businesses to connect their own domains (e.g., `mybusiness.com`) to their BizBlasts sites using CNAME DNS records pointing to `bizblasts.onrender.com`.
+
+## Architecture Components
+
+### Database Schema
+
+**New columns added to `businesses` table:**
+
+```ruby
+# Migration: 20250821171908_add_cname_fields_to_businesses.rb
+cname_setup_email_sent_at: datetime        # When setup instructions were emailed
+cname_monitoring_active: boolean, default: false  # Whether DNS monitoring is active
+cname_check_attempts: integer, default: 0         # Number of DNS checks performed
+render_domain_added: boolean, default: false      # Whether domain was added to Render
+
+# Indexes for performance
+index :cname_monitoring_active
+index :status  # For domain status filtering
+```
+
+**New status enum values:**
+
+```ruby
+enum :status, {
+  active: 'active', 
+  inactive: 'inactive', 
+  suspended: 'suspended',
+  cname_pending: 'cname_pending',        # Domain setup initiated, waiting for DNS
+  cname_monitoring: 'cname_monitoring',  # Actively checking DNS every 5 minutes
+  cname_active: 'cname_active',          # Domain verified and active
+  cname_timeout: 'cname_timeout'         # DNS verification timed out
+}
+```
+
+### Service Layer
+
+#### 1. RenderDomainService
+Handles integration with Render.com Custom Domain API.
+
+**Key Methods:**
+- `add_domain(domain_name)` - Add domain to Render service
+- `verify_domain(domain_id)` - Trigger domain verification
+- `list_domains()` - List all domains for the service
+- `remove_domain(domain_id)` - Remove domain from service
+- `domain_status(domain_name)` - Check domain existence and verification status
+
+**Configuration:**
+```bash
+RENDER_API_KEY=your_render_api_key_here
+RENDER_SERVICE_ID=your_render_service_id_here
+```
+
+#### 2. CnameDnsChecker
+Verifies CNAME DNS configuration using multiple DNS servers.
+
+**Key Methods:**
+- `verify_cname()` - Check single DNS server
+- `verify_cname_multiple_dns()` - Check across Google DNS, Cloudflare, OpenDNS
+- `dns_debug_info()` - Comprehensive DNS debugging information
+- `domain_resolves?()` - Basic connectivity test
+
+**DNS Target:**
+- Production: `bizblasts.onrender.com`
+- Development/Test: `localhost`
+
+#### 3. CnameSetupService
+Main orchestration service for the complete setup workflow.
+
+**Key Methods:**
+- `start_setup!()` - Initiate complete domain setup
+- `restart_monitoring!()` - Restart DNS monitoring after timeout
+- `force_activate!()` - Admin override to activate domain
+- `status()` - Get current setup status
+
+**Workflow:**
+1. Validate business eligibility (Premium + custom_domain)
+2. Add domain to Render.com
+3. Update business status to `cname_pending`
+4. Send setup instructions email
+5. Start DNS monitoring (status → `cname_monitoring`)
+6. Monitor DNS for up to 1 hour (12 checks × 5 minutes)
+7. Activate on success or timeout with help
+
+#### 4. DomainMonitoringService
+Handles periodic DNS verification and state transitions.
+
+**Key Methods:**
+- `perform_check!()` - Single monitoring check with state updates
+- `stop_monitoring!(reason)` - Stop monitoring process
+- `monitoring_status()` - Get detailed monitoring information
+
+**Verification Logic:**
+- DNS CNAME must point to `bizblasts.onrender.com`
+- Render.com must verify the domain
+- Both conditions required for activation
+
+#### 5. DomainRemovalService
+Handles domain removal and tier downgrade scenarios.
+
+**Key Methods:**
+- `remove_domain!()` - Complete domain removal
+- `handle_tier_downgrade!(new_tier)` - Remove domain on tier change
+- `disable_domain!()` - Temporarily disable without removal
+- `removal_preview()` - Preview impact of removal
+
+### Background Jobs
+
+#### DomainMonitoringJob
+Runs DNS verification checks every 5 minutes.
+
+**Features:**
+- Automatic scheduling for eligible businesses
+- Failure handling with retries
+- Batch processing for multiple pending domains
+- Graceful termination conditions
+
+**Eligibility Criteria:**
+- Status: `cname_monitoring`
+- Monitoring active: `true`
+- Attempts < 12
+- Premium tier
+- Custom domain host type
+
+### Email Communications
+
+#### DomainMailer
+Handles all email communications for domain setup.
+
+**Email Templates:**
+
+1. **Setup Instructions (`setup_instructions.html.erb`)**
+   - CNAME configuration details
+   - Registrar-specific instructions
+   - Monitoring timeline expectations
+
+2. **Activation Success (`activation_success.html.erb`)**
+   - Confirmation of domain activation
+   - SSL certificate information
+   - Update instructions for marketing materials
+
+3. **Timeout Help (`timeout_help.html.erb`)**
+   - Troubleshooting guidance
+   - Common DNS issues
+   - Support contact information
+
+4. **Monitoring Restarted (`monitoring_restarted.html.erb`)**
+   - Confirmation of monitoring restart
+   - Status updates
+
+### Admin Interface
+
+#### ActiveAdmin Integration
+Complete domain management interface in `app/admin/businesses.rb`.
+
+**Features:**
+- Domain status visualization
+- Management action buttons
+- Setup initiation
+- Monitoring restart
+- Force activation
+- Domain removal
+- Status filtering
+
+**Admin Actions:**
+- Start Domain Setup
+- Restart Monitoring
+- Force Activate Domain
+- Disable Custom Domain
+
+### Middleware Integration
+
+#### ApplicationController Updates
+Modified tenant resolution to only serve traffic for `cname_active` domains.
+
+```ruby
+def find_business_by_custom_domain
+  Business.find_by(host_type: 'custom_domain', hostname: request.host, status: 'cname_active')
+end
+```
+
+This ensures only verified domains can serve traffic.
+
+## Business Model Methods
+
+### CNAME Management Methods
+
+```ruby
+# Start monitoring workflow
+business.start_cname_monitoring!
+
+# Stop monitoring
+business.stop_cname_monitoring!
+
+# Check if due for next DNS check
+business.cname_due_for_check?
+
+# Increment check counter
+business.increment_cname_check!
+
+# Status transitions
+business.cname_timeout!
+business.cname_success!
+
+# Eligibility check
+business.can_setup_custom_domain?
+```
+
+### Automatic Tier Downgrade Handling
+
+```ruby
+# app/models/business.rb callback
+after_update :handle_tier_downgrade, if: :saved_change_to_tier?
+
+def handle_tier_downgrade
+  # Automatically removes custom domain when downgrading from premium
+end
+```
+
+## Monitoring & Verification Process
+
+### DNS Monitoring Timeline
+
+1. **Initial Setup** (Status: `cname_pending`)
+   - Domain added to Render.com
+   - Setup instructions emailed
+   - Monitoring initiated
+
+2. **Active Monitoring** (Status: `cname_monitoring`)
+   - Check every 5 minutes
+   - Maximum 12 attempts (1 hour total)
+   - Dual verification: DNS + Render
+
+3. **Success** (Status: `cname_active`)
+   - Both DNS and Render verification passed
+   - Success email sent
+   - Domain ready to serve traffic
+
+4. **Timeout** (Status: `cname_timeout`)
+   - Maximum attempts reached
+   - Help email sent
+   - Manual intervention may be required
+
+### Verification Criteria
+
+**DNS Verification:**
+- CNAME record exists
+- Points to correct target (`bizblasts.onrender.com`)
+- Verified by multiple DNS servers
+
+**Render Verification:**
+- Domain added to Render service
+- Render.com API reports domain as verified
+- SSL certificate provisioning initiated
+
+## Error Handling & Recovery
+
+### Automatic Recovery
+- Network timeouts: Job retries with backoff
+- Temporary DNS failures: Continue monitoring
+- Render API errors: Logged but don't stop monitoring
+
+### Manual Recovery
+- Admin can restart monitoring
+- Admin can force activate domains
+- Detailed logging for troubleshooting
+
+### User Recovery
+- Clear email instructions
+- Registrar-specific guidance
+- Support contact information provided
+
+## Security Considerations
+
+### Access Control
+- Only Premium tier businesses eligible
+- Admin interface requires AdminUser authentication
+- Tenant isolation maintained throughout
+
+### Data Validation
+- Domain name format validation
+- DNS response verification
+- API response sanitization
+
+### Logging
+- All domain operations logged
+- Security events tracked
+- No sensitive data in logs
+
+## Performance Optimizations
+
+### Database Indexes
+- `cname_monitoring_active` for job queries
+- `status` for filtering
+- Compound indexes for monitoring queries
+
+### Caching
+- DNS results cached for 5 minutes
+- Render API responses cached briefly
+- Email delivery tracking
+
+### Background Processing
+- All long-running operations in background jobs
+- Parallel processing for multiple domains
+- Efficient job scheduling
+
+## Testing
+
+### Comprehensive Test Suite
+- **RenderDomainService**: API integration mocking
+- **CnameDnsChecker**: DNS resolution simulation
+- **CnameSetupService**: Complete workflow testing
+- **DomainMonitoringJob**: Background job testing
+- **DomainRemovalService**: Cleanup testing
+- **DomainMailer**: Email content verification
+- **Business Model**: CNAME method testing
+
+### Test Configuration
+- Mock DNS responses
+- Stub API calls
+- Email delivery testing
+- Background job testing
+
+## Deployment Considerations
+
+### Environment Variables
+```bash
+# Required for production
+RENDER_API_KEY=your_render_api_key_here
+RENDER_SERVICE_ID=your_render_service_id_here
+SUPPORT_EMAIL=support@bizblasts.com
+```
+
+### Background Job Processing
+- Ensure Solid Queue is running
+- Monitor job queues
+- Set up job failure alerts
+
+### SSL Certificates
+- Render.com handles SSL automatically
+- Certificates may take up to 24 hours
+- Monitor certificate status
+
+## Monitoring & Observability
+
+### Key Metrics
+- Domain setup success rate
+- Average setup time
+- DNS verification failures
+- Email delivery rates
+
+### Logging
+- Structured logging throughout
+- Operation timing
+- Error tracking
+- User actions
+
+### Alerts
+- Job failures
+- API errors
+- High timeout rates
+- SSL issues
+
+## Future Enhancements
+
+### Potential Improvements
+- Webhook-based verification
+- Multiple CNAME targets
+- Subdomain wildcards
+- Custom SSL certificates
+- DNS record automation
+
+### Scalability Considerations
+- Rate limiting for APIs
+- Batch processing optimization
+- Distributed job processing
+- Caching enhancements
+
+This implementation provides a robust, user-friendly custom domain solution that integrates seamlessly with the existing BizBlasts architecture while maintaining security and performance standards.
\ No newline at end of file
diff --git a/docs/CNAME_CUSTOM_DOMAIN_TODO.md b/docs/CNAME_CUSTOM_DOMAIN_TODO.md
new file mode 100644
index 0000000..e7e348a
--- /dev/null
+++ b/docs/CNAME_CUSTOM_DOMAIN_TODO.md
@@ -0,0 +1,135 @@
+# CNAME Custom Domain Implementation – Step-by-Step Todo
+
+> **Scope**: Enable premium-tier businesses to connect a custom domain (via CNAME) to their BizBlasts site. This document tracks every required task across backend, jobs, UI, mailers, and documentation.  
+> **Owner**: Engineering  
+> **Last updated**: 08/21/2025
+
+---
+
+## 1. Database Changes
+
+1. **Add columns to `businesses`**  
+   `cname_setup_email_sent_at :datetime`  
+   `cname_monitoring_active   :boolean , default: false, null: false`  
+   `cname_check_attempts      :integer , default: 0,     null: false`  
+   `render_domain_added       :boolean , default: false, null: false`
+2. **Extend status/enum** – add: `cname_pending`, `cname_monitoring`, `cname_active`, `cname_timeout`.
+3. Indexes on `status` and `cname_monitoring_active`.
+4. Write migration + DB rollback test.
+
+## 2. Model Enhancements (`Business`)
+
+- Declare new enum values & validations.
+- Scopes: `.cname_pending`, `.monitoring_needed`.
+- Helper methods:  
+  `start_cname_monitoring!`, `stop_cname_monitoring!`, `cname_due_for_check?`.
+- Guard logic: Only allow on `premium_tier?` + `host_type_custom_domain?`.
+
+## 3. Service Layer
+
+| Service | Purpose |
+|---------|---------|
+| `CnameSetupService` | Kick-off flow: add domain in Render, send instructions email, mark `cname_pending`, activate monitoring |
+| `RenderDomainService` | Low-level wrapper for Render REST API (`RENDER_API_KEY`, `RENDER_SERVICE_ID`) |
+| `CnameDnsChecker` | Resolve CNAME & verify it points to Render |
+| `DomainMonitoringService` | Coordinate retries & state transitions |
+
+## 4. Background Job
+
+- `DomainMonitoringJob` (Solid Queue): runs every 5 min on `Business.monitoring_needed`.
+- Stops after **success** or **12 attempts (1 h)**.
+- Manual restart resets attempt counter & re-enqueues.
+
+## 5. Mailers
+
+Templates in `DomainMailer`:
+1. `setup_instructions` - note on the bottom for them to forward this email to ENV['SUPPORT_EMAIL'] if they need more assistance
+2. `activation_success`
+3. `timeout_help`
+4. `monitoring_restarted`
+
+## 6. Admin Interface
+
+- ActiveAdmin → Businesses page:
+  - “Send Domain Instructions” button.
+  - Monitoring status panel.
+  - Manual controls (restart / stop / force-activate).
+- Optional AJAX JSON endpoints for live status.
+
+## 7. Middleware / Routing
+
+- Update tenant resolution middleware (& `TenantHost`) to accept hosts where `status == 'cname_active'`.
+- Preserve existing subdomain logic.
+
+## 8. Render.com Integration
+
+- Store `RENDER_API_KEY`, `RENDER_SERVICE_ID` in `.env` (no Rails secrets).
+- `RenderDomainService` wraps the **Render REST API** and exposes: `add_domain`, `verify_domain`, `list_domains`, `remove_domain`.
+- **Key API endpoints** (all bearer-token authenticated):  
+  • **Add domain** `POST /v1/services/{serviceId}/custom-domains`  
+  • **Verify DNS** `POST /v1/services/{serviceId}/custom-domains/{domainId}/verify`  
+  • **List domains** `GET /v1/services/{serviceId}/custom-domains`  
+  • **Delete domain** `DELETE /v1/services/{serviceId}/custom-domains/{domainId}` (used on downgrade).  
+- **Working Ruby example** (simplified):  
+  ```ruby
+  url = URI("https://api.render.com/v1/services/#{ENV['RENDER_SERVICE_ID']}/custom-domains")
+  req = Net::HTTP::Post.new(url, {
+    'Accept' => 'application/json',
+    'Content-Type' => 'application/json',
+    'Authorization' => "Bearer #{ENV['RENDER_API_KEY']}"
+  })
+  req.body = { name: custom_domain }.to_json
+  response = Net::HTTP.start(url.hostname, url.port, use_ssl: true) { |h| h.request(req) }
+  ```
+- Render auto-issues & renews TLS certificates, performs HTTP→HTTPS redirect, and manages `www.` ↔ root redirects.
+- Our monitoring loop polls **verify endpoint** until it returns `"verified": true`.
+
+## 11. Downgrade / Domain Removal Logic
+
+- **Trigger:** Business downgrades from Premium tier or chooses to disable custom domain.
+- **Steps:**  
+  1. Call `RenderDomainService#remove_domain` (DELETE endpoint).  
+  2. Update `business` record: reset `host_type` to `subdomain`, clear `hostname`, stop monitoring flags.  
+  3. Transition status back to `active` (subdomain) and send "Domain Removed" confirmation email.  
+  4. Tenant middleware automatically falls back to subdomain routing.  
+- **Admin UI:** “Disable Custom Domain” button with confirmation dialog.  (If needed for manual process)
+- **Tests:** RSpec & system specs verifying removal flow and subdomain fallback.
+
+## 9. Tests
+
+- **Model / Migration**: enum, validations, scopes.
+- **Service**: full happy path & edge cases (WebMock for Render + DNS).
+- **Job**: respects attempt limit & state transitions.
+- **System**: end-to-end flow (Capybara) – premium business connects domain, sees success.
+
+## 10. Documentation & Ops
+
+- Update README “Domain Architecture” section.
+- Add `.env.example` variables (`RENDER_API_KEY`, `RENDER_SERVICE_ID`).
+- Produce registrar-specific FAQ.
+
+---
+
+### Timeline / Milestones
+
+| Week | Deliverable |
+|------|-------------|
+| 1 | DB migration, `Business` model updates, unit tests |
+| 2 | Service layer (`CnameSetupService`, `RenderDomainService`) + mailer templates |
+| 3 | Monitoring job + DNS checker; integrate Solid Queue |
+| 4 | Admin UI & routing changes |
+| 5 | System tests, documentation polish, staging rollout |
+
+---
+
+**Done-Checklist Template** (copy into PR description)
+
+- [ ] Migration applied & reversible
+- [ ] `Business` enum/tests updated
+- [ ] Services implemented & 100% unit-tested
+- [ ] Solid Queue job wired & tested
+- [ ] Tenant middleware handles `cname_active`
+- [ ] ActiveAdmin panel functional
+- [ ] Mailer templates previewed
+- [ ] README/docs updated
+- [ ] All specs & linters pass
diff --git a/docs/CUSTOM_DOMAIN_FAQ.md b/docs/CUSTOM_DOMAIN_FAQ.md
new file mode 100644
index 0000000..ef41a96
--- /dev/null
+++ b/docs/CUSTOM_DOMAIN_FAQ.md
@@ -0,0 +1,321 @@
+# Custom Domain Setup FAQ
+
+This guide provides step-by-step instructions for setting up CNAME records with popular domain registrars for BizBlasts Premium businesses.
+
+## Quick Reference
+
+**Your CNAME Configuration:**
+- **Name/Host:** `@` (for root domain) or `www` (for www subdomain)
+- **Type:** `CNAME`
+- **Value/Target:** `bizblasts.onrender.com`
+- **TTL:** `Auto` or `300` (5 minutes)
+
+⚠️ **Important:** Remove any existing A or AAAA records for your domain before adding the CNAME record.
+
+---
+
+## Registrar-Specific Instructions
+
+### GoDaddy
+
+1. **Log into GoDaddy:** Go to [godaddy.com](https://godaddy.com) and sign in
+2. **Access DNS Management:** 
+   - Click "My Products" → "DNS" next to your domain
+   - Or go to "Domains" → select your domain → "DNS"
+3. **Add CNAME Record:**
+   - Click "Add" button
+   - **Type:** Select "CNAME"
+   - **Name:** Enter `@` (for root domain) or `www`
+   - **Value:** Enter `bizblasts.onrender.com`
+   - **TTL:** Leave as "1 hour" or set to "Custom: 300 seconds"
+4. **Remove Conflicting Records:**
+   - Delete any existing A records for `@` or `www`
+   - Delete any existing AAAA records for `@` or `www`
+5. **Save Changes:** Click "Save"
+
+**GoDaddy Notes:**
+- Changes typically take 10-15 minutes to propagate
+- You may need to wait up to 1 hour for full global propagation
+
+### Namecheap
+
+1. **Log into Namecheap:** Go to [namecheap.com](https://namecheap.com) and sign in
+2. **Access Domain List:** Click "Domain List" in the left sidebar
+3. **Manage DNS:**
+   - Find your domain and click "Manage"
+   - Click "Advanced DNS" tab
+4. **Add CNAME Record:**
+   - Click "Add New Record"
+   - **Type:** Select "CNAME Record"
+   - **Host:** Enter `@` (for root domain) or `www`
+   - **Value:** Enter `bizblasts.onrender.com`
+   - **TTL:** Select "5 min" or "Automatic"
+5. **Remove Conflicting Records:**
+   - Delete any A records with Host `@` or `www`
+   - Delete any AAAA records with Host `@` or `www`
+6. **Save Changes:** Click the green checkmark
+
+**Namecheap Notes:**
+- Changes usually propagate within 5-30 minutes
+- Namecheap automatically adds a trailing dot to CNAME values
+
+### Cloudflare
+
+1. **Log into Cloudflare:** Go to [cloudflare.com](https://cloudflare.com) and sign in
+2. **Select Your Domain:** Click on your domain from the dashboard
+3. **Access DNS Settings:** Click "DNS" in the top menu
+4. **Add CNAME Record:**
+   - Click "Add record"
+   - **Type:** Select "CNAME"
+   - **Name:** Enter `@` (for root domain) or `www`
+   - **Target:** Enter `bizblasts.onrender.com`
+   - **Proxy status:** Toggle OFF (gray cloud) - **Very Important!**
+   - **TTL:** Select "Auto" or "5 minutes"
+5. **Remove Conflicting Records:**
+   - Delete any A records with Name `@` or `www`
+   - Delete any AAAA records with Name `@` or `www`
+6. **Save:** Click "Save"
+
+**Cloudflare Notes:**
+- **Critical:** Ensure proxy is OFF (gray cloud) for CNAME records
+- Changes propagate very quickly (1-5 minutes) due to Cloudflare's global network
+- Cloudflare requires you to change nameservers to theirs for full functionality
+
+### Google Domains (Google Cloud DNS)
+
+1. **Log into Google Domains:** Go to [domains.google.com](https://domains.google.com)
+2. **Select Your Domain:** Click on your domain name
+3. **Access DNS Settings:**
+   - Click "DNS" in the left menu
+   - Scroll to "Custom records"
+4. **Add CNAME Record:**
+   - Click "Manage custom records"
+   - **Host name:** Enter `@` or `www`
+   - **Type:** Select "CNAME"
+   - **TTL:** Enter `300` (5 minutes)
+   - **Data:** Enter `bizblasts.onrender.com`
+5. **Remove Conflicting Records:**
+   - Delete any A records for `@` or `www`
+   - Delete any AAAA records for `@` or `www`
+6. **Save:** Click "Save"
+
+**Google Domains Notes:**
+- Google automatically appends your domain to the host name
+- Changes typically take 10-15 minutes to propagate globally
+- Google Domains provides detailed propagation status
+
+### Hover
+
+1. **Log into Hover:** Go to [hover.com](https://hover.com) and sign in
+2. **Select Your Domain:** Click on your domain from the domain list
+3. **Access DNS Settings:** Click "DNS" tab
+4. **Add CNAME Record:**
+   - Click "Add New"
+   - **Type:** Select "CNAME"
+   - **Hostname:** Enter `@` or `www`
+   - **Target Host:** Enter `bizblasts.onrender.com`
+5. **Remove Conflicting Records:**
+   - Delete any A records for `@` or `www`
+6. **Save Changes:** Changes are saved automatically
+
+**Hover Notes:**
+- Clean, simple interface
+- Changes usually propagate within 15-30 minutes
+
+### Other Registrars
+
+**For registrars not listed above, follow these general steps:**
+
+1. Log into your domain registrar's control panel
+2. Find "DNS Management," "DNS Settings," or "Name Servers" section
+3. Look for options to "Add Record" or "Add DNS Record"
+4. Create a new CNAME record with:
+   - **Name/Host/Subdomain:** `@` (root) or `www`
+   - **Type:** `CNAME`
+   - **Value/Target/Destination:** `bizblasts.onrender.com`
+   - **TTL:** `300` seconds (5 minutes) or lowest available
+5. Remove any conflicting A or AAAA records
+6. Save your changes
+
+---
+
+## Common Issues & Troubleshooting
+
+### ❌ "CNAME record not found"
+
+**Possible Causes:**
+- Record not saved properly
+- DNS changes haven't propagated yet
+- Conflicting A/AAAA records still present
+
+**Solutions:**
+1. **Double-check your record:**
+   - Verify the target is exactly `bizblasts.onrender.com`
+   - Ensure no extra spaces or characters
+   - Confirm you're editing the correct domain
+
+2. **Wait for propagation:**
+   - DNS changes can take 5 minutes to 2 hours
+   - Test from different devices/networks
+   - Use DNS checker tools (see below)
+
+3. **Remove conflicting records:**
+   - Delete all A records for your domain/subdomain
+   - Delete all AAAA records for your domain/subdomain
+   - Some registrars require this before allowing CNAME
+
+### ❌ "CNAME points to wrong target"
+
+**Possible Causes:**
+- Typo in target domain
+- Registrar added extra characters
+- Old cached DNS records
+
+**Solutions:**
+1. **Verify target domain:**
+   - Must be exactly: `bizblasts.onrender.com`
+   - No `www.` prefix
+   - No `https://` prefix
+   - Some registrars add trailing dot automatically (this is normal)
+
+2. **Clear DNS cache:**
+   - Restart your router/modem
+   - Flush DNS on your computer
+   - Try from different network (mobile data)
+
+### ❌ "Domain setup timeout"
+
+**Possible Causes:**
+- DNS propagation taking longer than expected
+- ISP DNS cache not updated
+- Registrar-specific delays
+
+**Solutions:**
+1. **Check DNS propagation:**
+   - Use tools like [whatsmydns.net](https://whatsmydns.net)
+   - Search for your domain and select "CNAME"
+   - Green checkmarks = propagated, red X = not yet
+
+2. **Contact support:**
+   - Forward your setup email to support
+   - Include screenshots of your DNS settings
+   - We can manually verify and restart monitoring
+
+### ❌ "SSL certificate issues"
+
+**Possible Causes:**
+- Domain recently activated (SSL takes time)
+- Mixed HTTP/HTTPS content
+- Browser cache
+
+**Solutions:**
+1. **Wait for SSL provisioning:**
+   - SSL certificates can take up to 24 hours
+   - Domain will show "Not Secure" initially
+   - BizBlasts handles this automatically
+
+2. **Force HTTPS:**
+   - Always use `https://yourdomain.com`
+   - Clear browser cache and cookies
+   - Try incognito/private browsing mode
+
+---
+
+## DNS Verification Tools
+
+Use these free tools to check if your CNAME record is configured correctly:
+
+### Online DNS Checkers
+- **[whatsmydns.net](https://whatsmydns.net)** - Global DNS propagation checker
+- **[dnschecker.org](https://dnschecker.org)** - Multi-location DNS lookup
+- **[mxtoolbox.com](https://mxtoolbox.com/CNAMELookup.aspx)** - Professional DNS tools
+
+### Command Line Tools
+```bash
+# Check CNAME record (Mac/Linux)
+nslookup -type=CNAME yourdomain.com
+
+# Check CNAME record (Windows)
+nslookup -type=CNAME yourdomain.com
+
+# Check with specific DNS server
+nslookup -type=CNAME yourdomain.com 8.8.8.8
+```
+
+**Expected Result:**
+```
+yourdomain.com canonical name = bizblasts.onrender.com
+```
+
+---
+
+## Timeline Expectations
+
+### Normal Setup Timeline
+- **0-5 minutes:** CNAME record saved at registrar
+- **5-15 minutes:** DNS propagation begins
+- **15-30 minutes:** BizBlasts detects CNAME (monitoring every 5 minutes)
+- **30-60 minutes:** Domain activated if all checks pass
+- **1-24 hours:** SSL certificate fully provisioned
+
+### Factors That Affect Speed
+- **Registrar speed:** Some are faster than others
+- **TTL settings:** Lower TTL = faster propagation
+- **DNS cache:** ISP and browser caching can delay updates
+- **Geographic location:** Propagation varies by region
+
+---
+
+## Support & Contact
+
+### Need Help?
+- **Email:** Forward your original setup instructions to [support@bizblasts.com](mailto:support@bizblasts.com)
+- **Include:** Screenshots of your DNS settings and any error messages
+- **Response Time:** We typically respond within 24 hours
+
+### Emergency Support
+If your domain setup is urgent:
+1. Reply to your original setup email with "URGENT" in the subject
+2. Include your business name and domain
+3. We can manually verify and activate your domain
+
+### Self-Service Options
+- Check our [help documentation](https://docs.bizblasts.com)
+- Use DNS verification tools listed above
+- Try the setup from a different network/device
+
+---
+
+## Advanced Configuration
+
+### Using www vs Root Domain
+
+**Root Domain Setup (example.com):**
+- **Host:** `@`
+- **Visitors type:** `example.com` → redirects to your BizBlasts site
+
+**WWW Subdomain Setup (www.example.com):**
+- **Host:** `www`
+- **Visitors type:** `www.example.com` → redirects to your BizBlasts site
+
+**Both (Recommended):**
+Set up both records so visitors can reach you either way.
+
+### Email Considerations
+
+⚠️ **Important:** CNAME records for your root domain may affect email delivery.
+
+**If you use email with your domain:**
+1. Set up CNAME for `www` subdomain only
+2. Keep A records for root domain and email
+3. Use `www.yourdomain.com` for your BizBlasts site
+
+**Consult your email provider** before making DNS changes if you have existing email services.
+
+### Multiple Subdomains
+
+Currently, BizBlasts supports one domain per business. Contact support if you need multiple subdomain configurations.
+
+---
+
+This FAQ covers the most common scenarios and registrars. If your situation isn't covered here, don't hesitate to contact our support team!
\ No newline at end of file
diff --git a/docs/CUSTOM_DOMAIN_IMPLEMENTATION_SUMMARY.md b/docs/CUSTOM_DOMAIN_IMPLEMENTATION_SUMMARY.md
new file mode 100644
index 0000000..da13d38
--- /dev/null
+++ b/docs/CUSTOM_DOMAIN_IMPLEMENTATION_SUMMARY.md
@@ -0,0 +1,144 @@
+# Custom Domain Implementation Summary
+
+## ✅ What We Accomplished
+
+Successfully implemented custom domain support for BizBlasts with unified routing that ensures **all future tenant routes automatically work on both subdomains AND custom domains**.
+
+### **Key Achievement: Zero Code Duplication**
+- **Before**: Separate route definitions for subdomains vs custom domains
+- **After**: Single `TenantPublicConstraint` block handles both domain types automatically
+
+### **Route Architecture Implemented**
+```ruby
+# config/routes.rb - One constraint, both domain types supported
+constraints TenantPublicConstraint do
+  scope module: 'public' do
+    get '/', to: 'pages#show'           # ✅ Works on both testbiz.bizblasts.com AND customdomain.com
+    get '/services', to: 'pages#show'   # ✅ Works on both domain types  
+    get '/book', to: 'booking#new'      # ✅ Works on both domain types
+    # ... all routes work universally
+  end
+  
+  # Cart, orders, payments - all work on both domain types
+  resource :cart, controller: 'public/carts'
+  resources :orders, controller: 'public/orders'  
+  resources :payments, controller: 'public/payments'
+end
+```
+
+## 🔧 Technical Components Built
+
+### **1. Constraint Classes**
+- **`TenantPublicConstraint`**: Unified logic for both subdomains and custom domains
+- **`CustomDomainConstraint`**: Identifies active custom domains (`status: 'cname_active'`)
+- **`SubdomainConstraint`**: Handles `*.bizblasts.com` subdomains
+
+### **2. Host Authorization**
+- **`config/initializers/custom_domain_hosts.rb`**: Dynamic whitelisting of custom domains
+- **Production safety**: Robust error handling and database availability checks
+- **Idempotent loading**: Prevents duplicate entries in `Rails.application.config.hosts`
+
+### **3. DNS & Domain Management**
+- **`CnameDnsChecker`**: Verifies both CNAME and A-record configurations
+- **`RenderDomainService`**: Handles Render.com API integration
+- **`DomainMonitoringJob`**: Automated verification and status updates
+- **Email instructions**: Clear CNAME setup guidance for users
+
+### **4. Mailer URL Reliability**
+- **`Business#mailer_host`**: Intelligent host selection for critical links
+- **Conservative approach**: Defaults to subdomain for payment/invoice links
+- **Custom domain verification**: Only uses custom domain when fully functional
+
+### **5. Validation & Testing Tools**
+- **`bin/rails tenant:validate_routes`**: Comprehensive route validation
+- **`bin/test-tenant-routes`**: Quick development testing script
+- **RSpec integration tests**: Automated constraint and route validation
+- **Documentation**: Complete developer guide in `docs/TENANT_ROUTING_GUIDE.md`
+
+## 🎯 User Experience Achieved
+
+### **For Business Owners**
+1. **Request custom domain** through settings interface
+2. **Receive email** with clear DNS setup instructions
+3. **Configure DNS** with provided CNAME/A records
+4. **Automatic activation** when DNS verification passes
+5. **Seamless experience** - all features work identically on custom domain
+
+### **For Developers**
+1. **Add routes** inside `TenantPublicConstraint` block
+2. **Automatic compatibility** - routes work on both domain types
+3. **Validation tools** catch issues before deployment
+4. **Clear documentation** prevents common mistakes
+
+## 🚀 Future-Proof Architecture
+
+### **Adding New Routes (Zero Configuration Required)**
+```ruby
+# Just add inside TenantPublicConstraint - automatically works everywhere!
+constraints TenantPublicConstraint do
+  scope module: 'public' do
+    get '/new-feature', to: 'new_feature#index'  # ✅ Instantly works on both domain types
+  end
+end
+```
+
+### **Validation Workflow**
+```bash
+# 1. Add route
+# 2. Validate immediately
+bin/rails tenant:validate_routes
+
+# 3. Test locally  
+bin/test-tenant-routes --route /new-feature
+
+# 4. Deploy with confidence
+```
+
+## 🔒 Security & Reliability
+
+### **Host Authorization**
+- **Dynamic whitelisting**: Custom domains automatically added to allowed hosts
+- **Production safety**: Robust error handling prevents boot failures
+- **Health check exclusion**: Render health checks bypass host validation
+
+### **DNS Verification**
+- **Multi-record support**: Handles both CNAME and A-record configurations
+- **Render integration**: Automatic domain verification via API
+- **Monitoring system**: Continuous verification with smart retry logic
+
+### **URL Generation**
+- **Reliable fallbacks**: Critical links always work even if custom domain has issues
+- **Smart host selection**: Uses most appropriate domain for each use case
+- **Mailer protection**: Payment/invoice links prioritize reliability over branding
+
+## 📊 Results
+
+### **Before Implementation**
+- ❌ Custom domains blocked by Rails Host Authorization
+- ❌ Route duplication between subdomain and custom domain logic
+- ❌ Manual configuration required for each new route
+- ❌ No validation tools to catch routing issues
+
+### **After Implementation**  
+- ✅ Custom domains work seamlessly with automatic host whitelisting
+- ✅ Zero route duplication - single constraint handles both domain types
+- ✅ All future routes automatically work on both domain types
+- ✅ Comprehensive validation tools catch issues before production
+- ✅ Complete documentation and developer guidance
+- ✅ Production-tested with real custom domain (`newcoworker.com`)
+
+## 🐛 Additional Fixes Applied
+
+### **Navigation Logo Fix**
+- **Issue**: BizBlasts logo didn't show on custom domains due to incorrect subdomain detection
+- **Fix**: Changed condition from `request.subdomain.present?` to `ActsAsTenant.current_tenant` 
+- **Result**: BizBlasts logo now correctly links to `bizblasts.com` on both subdomains and custom domains
+
+### **Development Script Fix**
+- **Issue**: `BASE_URL` was set to just `'https'` in production, creating malformed URLs like `https/services`
+- **Fix**: Changed to `'https://bizblasts.com'` for complete production URLs
+- **Result**: Development testing script now generates valid URLs in all environments
+
+## 🎉 Mission Accomplished
+
+**Custom domains now work flawlessly alongside subdomains with a unified, future-proof routing architecture that requires zero additional configuration for new routes.**
diff --git a/docs/TENANT_ROUTING_GUIDE.md b/docs/TENANT_ROUTING_GUIDE.md
new file mode 100644
index 0000000..550806b
--- /dev/null
+++ b/docs/TENANT_ROUTING_GUIDE.md
@@ -0,0 +1,264 @@
+# Tenant Routing Guide
+
+This guide ensures that all future routes work correctly for both subdomains and custom domains.
+
+## Current Architecture
+
+### Route Constraints
+- **`TenantPublicConstraint`**: Matches both subdomains (`*.bizblasts.com`) and custom domains
+- **`SubdomainConstraint`**: Legacy constraint (now only used for admin/manage routes)
+- **`CustomDomainConstraint`**: Matches active custom domains only
+
+### Tenant Detection Flow
+1. **Request arrives** → `ApplicationController#set_tenant`
+2. **Subdomain check** → `find_business_by_subdomain` 
+3. **Custom domain check** → `find_business_by_custom_domain`
+4. **Tenant set** → `ActsAsTenant.current_tenant = business`
+
+## ✅ CORRECT: Adding Public Tenant Routes
+
+All public-facing tenant routes MUST be added inside the `TenantPublicConstraint` block:
+
+```ruby
+# config/routes.rb
+constraints TenantPublicConstraint do
+  scope module: 'public' do
+    # ✅ CORRECT: Routes for pages, services, booking, etc.
+    get '/new-feature', to: 'new_feature#index'
+    resources :new_resources, only: [:index, :show]
+  end
+  
+  # ✅ CORRECT: Routes that need to be outside scope module
+  resources :special_resources, controller: 'public/special_resources'
+end
+```
+
+## ❌ WRONG: Common Mistakes
+
+### 1. Adding routes outside tenant constraints
+```ruby
+# ❌ WRONG: This only works on main domain
+get '/new-feature', to: 'public/new_feature#index'
+```
+
+### 2. Using tenant-specific route helpers
+```ruby
+# ❌ WRONG: Creates tenant-specific helpers that break existing code
+resources :payments, as: :tenant_payments
+```
+
+### 3. Forgetting controller specification
+```ruby
+# ❌ WRONG: Routes to wrong controller
+resources :new_resources  # Routes to NewResourcesController instead of Public::NewResourcesController
+```
+
+## Route Helper Naming Rules
+
+### ✅ Use Generic Helper Names
+```ruby
+# ✅ CORRECT: Generates standard Rails helpers
+resources :payments        # → payments_path, new_payment_path
+resource :cart            # → cart_path
+resources :orders         # → orders_path, new_order_path
+```
+
+### ❌ Avoid Custom Helper Names
+```ruby
+# ❌ WRONG: Creates non-standard helpers that break existing code
+resources :payments, as: :tenant_payments  # → tenant_payments_path (breaks existing views)
+```
+
+## Controller Patterns
+
+### ✅ Public Controllers
+All tenant-facing controllers should be in the `Public` module:
+
+```ruby
+# app/controllers/public/new_feature_controller.rb
+module Public
+  class NewFeatureController < ApplicationController
+    # Inherits tenant detection from ApplicationController
+  end
+end
+```
+
+### ✅ Mailer URL Generation
+Use the reliable `mailer_host` method for critical links:
+
+```ruby
+# ✅ CORRECT: Reliable host determination
+<%= link_to 'Pay Now', new_payment_url(invoice_id: @invoice.id, host: @business.mailer_host) %>
+
+# ❌ WRONG: Could break if custom domain has issues
+<%= link_to 'Pay Now', new_payment_url(invoice_id: @invoice.id, host: @business.hostname) %>
+```
+
+## Testing Requirements
+
+### Controller Tests
+```ruby
+RSpec.describe Public::NewFeatureController, type: :controller do
+  let!(:business) { create(:business, subdomain: 'testtenant') }
+  
+  before do
+    ActsAsTenant.current_tenant = business
+    @request.host = 'testtenant.lvh.me'  # ✅ CORRECT: Subdomain host
+  end
+end
+```
+
+### System Tests
+```ruby
+# ✅ Test both subdomain and custom domain scenarios
+context 'on subdomain' do
+  before { host! 'testtenant.lvh.me' }
+  # ... test scenarios
+end
+
+context 'on custom domain' do
+  let!(:business) { create(:business, :with_custom_domain) }
+  before { host! business.hostname }
+  # ... test scenarios  
+end
+```
+
+## Validation Checklist
+
+Before adding new tenant routes, verify:
+
+- [ ] Route is inside `TenantPublicConstraint` block
+- [ ] Controller is in `Public` module
+- [ ] Uses generic route helper names (no `as:` unless necessary)
+- [ ] Specifies correct controller path if outside scope module
+- [ ] Tests work with subdomain host setup
+- [ ] Mailer URLs use `@business.mailer_host` for reliability
+
+## Quick Reference
+
+### Current Tenant Route Structure
+```ruby
+constraints TenantPublicConstraint do
+  scope module: 'public' do
+    # Pages, services, booking, calendar, products, etc.
+  end
+  
+  # Cart, orders, payments, subscriptions, tips, etc.
+  # (outside scope module but with explicit controller paths)
+end
+```
+
+### Development Testing
+```bash
+# Test subdomain routing
+curl -H "Host: testtenant.lvh.me" http://localhost:3000/new-route
+
+# Test custom domain routing (after setting up test domain)
+curl -H "Host: testdomain.com" http://localhost:3000/new-route
+```
+
+## Emergency Recovery
+
+If a route breaks tenant functionality:
+
+1. **Check constraint placement** - Ensure route is inside `TenantPublicConstraint`
+2. **Verify controller path** - Ensure it points to `Public::` namespace
+3. **Test helper names** - Run `bin/rails routes | grep route_name` to verify
+4. **Check for duplicates** - Ensure no duplicate route definitions
+5. **Validate constraints** - Test that `TenantPublicConstraint.matches?(request)` returns true
+
+This architecture ensures that ALL tenant routes automatically work for both subdomains and custom domains without additional configuration.
+
+## Automated Validation Tools
+
+### 1. Route Validation Rake Task
+```bash
+# Comprehensive validation of all tenant routes
+bin/rails tenant:validate_routes
+
+# Show current route structure
+bin/rails tenant:show_routes
+```
+
+### 2. Quick Development Testing
+```bash
+# Test all routes on both domain types
+bin/test-tenant-routes
+
+# Test specific route
+bin/test-tenant-routes --route /new-feature
+
+# Test specific subdomain
+bin/test-tenant-routes --subdomain mybiz
+```
+
+### 3. CI/CD Integration
+Add to your CI pipeline to catch routing regressions:
+
+```yaml
+# .github/workflows/test.yml
+- name: Validate Tenant Routes
+  run: bin/rails tenant:validate_routes
+```
+
+## Future Route Development Workflow
+
+### ✅ Recommended Workflow
+1. **Add route** inside `TenantPublicConstraint` block
+2. **Run validation**: `bin/rails tenant:validate_routes`
+3. **Test locally**: `bin/test-tenant-routes --route /your-new-route`
+4. **Write tests** using subdomain host setup
+5. **Deploy** with confidence
+
+### 🚨 Red Flags to Watch For
+- Routes added outside tenant constraints
+- New `as: :tenant_*` route helpers appearing
+- Tests failing on both subdomains and custom domains
+- Validation tools reporting route issues
+
+This systematic approach ensures that **all future routes will automatically work for both subdomains and custom domains**, preventing the routing issues we previously encountered.
+
+## Navigation Best Practices
+
+### ✅ BizBlasts Logo Navigation
+The BizBlasts logo should always link to the main platform (`bizblasts.com`):
+
+```erb
+<!-- ✅ CORRECT: Works for both subdomains and custom domains -->
+<% if ActsAsTenant.current_tenant %>
+  <!-- BizBlasts Logo - links to main domain -->
+  <%= link_to main_domain_url_for('/'), class: "logo-link" do %>
+    <%= image_tag "bizblasts-logo.svg", alt: "BizBlasts" %>
+  <% end %>
+  <!-- Tenant Name - links to tenant home -->
+  <%= link_to tenant_root_path do %>
+    <%= ActsAsTenant.current_tenant.name %>
+  <% end %>
+<% else %>
+  <!-- Platform logo -->
+  <%= link_to root_path do %>
+    BizBlasts
+  <% end %>
+<% end %>
+```
+
+### ❌ Common Navigation Mistakes
+```erb
+<!-- ❌ WRONG: Only works for subdomains, breaks on custom domains -->
+<% if request.subdomain.present? && request.subdomain != 'www' %>
+  <!-- This condition fails on custom domains where subdomain is empty -->
+<% end %>
+
+<!-- ❌ WRONG: Logo links back to tenant instead of main platform -->
+<%= link_to tenant_root_path do %>
+  <%= image_tag "bizblasts-logo.svg" %>  <!-- Should go to bizblasts.com -->
+<% end %>
+```
+
+### Navigation Principles
+1. **BizBlasts logo** → Always links to main platform (`bizblasts.com`)
+2. **Tenant name/logo** → Links to tenant homepage (current domain)
+3. **Platform links** → Use `main_domain_url_for()` for cross-tenant navigation
+4. **Tenant links** → Use standard route helpers (work within current domain)
+
+This ensures consistent branding and navigation across all domain types.
diff --git a/docs/todo-pay-in-person.md b/docs/todo-pay-in-person.md
index 59cfd78..44a286c 100644
--- a/docs/todo-pay-in-person.md
+++ b/docs/todo-pay-in-person.md
@@ -1572,7 +1572,7 @@ end
 
 ### Contact Support
 - Stripe Terminal Support: https://support.stripe.com/terminal
-- BizBlasts Support: support@bizblasts.com
+- BizBlasts Support: bizblaststeam@gmail.com
 
 ## Future Enhancements
 
diff --git a/lib/constraints/custom_domain_constraint.rb b/lib/constraints/custom_domain_constraint.rb
new file mode 100644
index 0000000..7757716
--- /dev/null
+++ b/lib/constraints/custom_domain_constraint.rb
@@ -0,0 +1,23 @@
+# frozen_string_literal: true
+
+# Routes constraint that returns true when the incoming Host header
+# belongs to an active custom-domain tenant.
+class CustomDomainConstraint
+  def self.matches?(request)
+    host = request.host.to_s.downcase
+    root = host.sub(/^www\./, '')
+    candidates = [host, root, "www.#{root}"].uniq
+
+    begin
+      return false unless defined?(Business)
+      return false unless ActiveRecord::Base.connection.data_source_exists?('businesses')
+
+      Business.where(host_type: 'custom_domain', status: 'cname_active', domain_health_verified: true)
+              .where('LOWER(hostname) IN (?)', candidates)
+              .exists?
+    rescue StandardError => e
+      Rails.logger.warn "[CustomDomainConstraint] Error while matching host=#{host}: #{e.class} #{e.message}"
+      false
+    end
+  end
+end
diff --git a/lib/constraints/tenant_public_constraint.rb b/lib/constraints/tenant_public_constraint.rb
new file mode 100644
index 0000000..9c860f3
--- /dev/null
+++ b/lib/constraints/tenant_public_constraint.rb
@@ -0,0 +1,19 @@
+# frozen_string_literal: true
+
+# Constraint that matches any request that should be handled by tenant public routes:
+# - Subdomains (excluding www and platform hosts) via SubdomainConstraint
+# - Active custom domains via CustomDomainConstraint
+class TenantPublicConstraint
+  def self.matches?(request)
+    host = request.host.to_s.downcase
+
+    # Explicitly exclude main platform hosts from tenant public routing
+    platform_hosts = %w[bizblasts.com www.bizblasts.com bizblasts.onrender.com]
+    return false if platform_hosts.include?(host)
+
+    # Reuse existing constraints for consistency
+    return true if defined?(SubdomainConstraint) && SubdomainConstraint.matches?(request)
+    return true if defined?(CustomDomainConstraint) && CustomDomainConstraint.matches?(request)
+    false
+  end
+end
diff --git a/lib/tasks/tenant_routes_validation.rake b/lib/tasks/tenant_routes_validation.rake
new file mode 100644
index 0000000..55e2cc6
--- /dev/null
+++ b/lib/tasks/tenant_routes_validation.rake
@@ -0,0 +1,179 @@
+namespace :tenant do
+  desc "Validate that tenant routes work for both subdomains and custom domains"
+  task validate_routes: :environment do
+    puts "🔍 Validating Tenant Route Coverage..."
+    
+    # Create test businesses
+    subdomain_business = Business.find_or_create_by(subdomain: 'routetest') do |b|
+      b.name = 'Route Test Business'
+      b.host_type = 'subdomain'
+      b.status = 'active'
+    end
+    
+    custom_domain_business = Business.find_or_create_by(hostname: 'routetest.example.com') do |b|
+      b.name = 'Custom Domain Test Business'
+      b.subdomain = 'customtest'
+      b.host_type = 'custom_domain'
+      b.status = 'cname_active'
+    end
+    
+    # Test hosts
+    test_hosts = [
+      { host: 'routetest.bizblasts.com', type: 'subdomain', business: subdomain_business },
+      { host: 'routetest.example.com', type: 'custom_domain', business: custom_domain_business }
+    ]
+    
+    # Core tenant routes that should be available
+    expected_routes = [
+      { name: 'tenant_root', path: '/', controller: 'public/pages' },
+      { name: 'tenant_services_page', path: '/services', controller: 'public/pages' },
+      { name: 'tenant_about_page', path: '/about', controller: 'public/pages' },
+      { name: 'new_tenant_booking', path: '/book', controller: 'public/booking' },
+      { name: 'cart', path: '/cart', controller: 'public/carts' },
+      { name: 'payments', path: '/payments', controller: 'public/payments' },
+      { name: 'new_payment', path: '/payments/new', controller: 'public/payments' },
+      { name: 'tenant_calendar', path: '/calendar', controller: 'public/tenant_calendar' },
+      { name: 'products', path: '/products', controller: 'public/products' }
+    ]
+    
+    errors = []
+    successes = 0
+    
+    # Get all routes
+    all_routes = Rails.application.routes.routes.map do |route|
+      {
+        name: route.name,
+        path: route.path.spec.to_s.gsub(/\(\.\:format\)/, ''),
+        controller: route.defaults[:controller],
+        action: route.defaults[:action]
+      }
+    end
+    
+    test_hosts.each do |host_config|
+      puts "\n📍 Testing #{host_config[:type]} host: #{host_config[:host]}"
+      
+      # Test constraint matching
+      mock_request = Class.new do
+        attr_reader :host
+        
+        def initialize(host)
+          @host = host
+        end
+        
+        def subdomain
+          parts = @host.split('.')
+          return '' if parts.length <= 2
+          return '' if parts.first == 'www'
+          parts.first
+        end
+      end.new(host_config[:host])
+      
+      constraint_matches = TenantPublicConstraint.matches?(mock_request)
+      
+      if constraint_matches
+        puts "  ✅ TenantPublicConstraint matches for #{host_config[:host]}"
+        
+        # Check that expected routes exist
+        expected_routes.each do |expected_route|
+          found_route = all_routes.find { |r| r[:name] == expected_route[:name] }
+          
+          if found_route
+            if found_route[:controller] == expected_route[:controller]
+              puts "  ✅ #{expected_route[:path]} → #{found_route[:controller]}##{found_route[:action]}"
+              successes += 1
+            else
+              errors << "❌ Route #{expected_route[:name]} points to #{found_route[:controller]} instead of #{expected_route[:controller]}"
+            end
+          else
+            errors << "❌ Route #{expected_route[:name]} (#{expected_route[:path]}) not found"
+          end
+        end
+      else
+        errors << "❌ TenantPublicConstraint does not match #{host_config[:host]}"
+      end
+    end
+    
+    puts "\n" + "="*60
+    puts "📊 VALIDATION RESULTS"
+    puts "="*60
+    
+    if errors.empty?
+      puts "🎉 ALL ROUTES WORKING! #{successes} routes tested successfully"
+      puts "\n✅ Both subdomains and custom domains are properly configured"
+      puts "✅ All routes point to Public:: controllers"
+      puts "✅ No routing conflicts detected"
+    else
+      puts "⚠️  ISSUES FOUND:"
+      errors.each { |error| puts "   #{error}" }
+      puts "\n❌ #{errors.size} issues found out of #{successes + errors.size} routes tested"
+    end
+    
+    # Test constraint logic
+    puts "\n🔧 Testing Constraint Logic..."
+    
+    test_constraint_cases = [
+      { host: 'routetest.bizblasts.com', should_match: true, type: 'subdomain' },
+      { host: 'routetest.example.com', should_match: true, type: 'custom_domain' },
+      { host: 'bizblasts.com', should_match: false, type: 'platform' },
+      { host: 'www.bizblasts.com', should_match: false, type: 'platform' },
+      { host: 'nonexistent.com', should_match: false, type: 'unknown' }
+    ]
+    
+    test_constraint_cases.each do |test_case|
+      # Create a mock request object for constraint testing
+      request = Class.new do
+        attr_reader :host
+        
+        def initialize(host)
+          @host = host
+        end
+        
+        def subdomain
+          parts = @host.split('.')
+          return '' if parts.length <= 2
+          return '' if parts.first == 'www'
+          parts.first
+        end
+      end.new(test_case[:host])
+      
+      result = TenantPublicConstraint.matches?(request)
+      
+      if result == test_case[:should_match]
+        puts "  ✅ #{test_case[:host]} (#{test_case[:type]}) → #{result ? 'MATCH' : 'NO MATCH'}"
+      else
+        puts "  ❌ #{test_case[:host]} (#{test_case[:type]}) → Expected #{test_case[:should_match]}, got #{result}"
+        errors << "Constraint logic error for #{test_case[:host]}"
+      end
+    end
+    
+    puts "\n" + "="*60
+    
+    if errors.empty?
+      puts "🎉 VALIDATION PASSED - All tenant routes work correctly!"
+      exit 0
+    else
+      puts "❌ VALIDATION FAILED - Please fix the issues above"
+      exit 1
+    end
+  end
+  
+  desc "Show current tenant route structure"
+  task show_routes: :environment do
+    puts "🗺️  Current Tenant Route Structure"
+    puts "="*50
+    
+    puts "\n📋 TenantPublicConstraint Routes:"
+    puts `bin/rails routes | grep -E "(public/|cart|orders|payments|transactions|tips|subscriptions)" | head -20`
+    
+    puts "\n🏠 Platform Routes:"
+    puts `bin/rails routes | grep -E "home#|root" | head -5`
+    
+    puts "\n🔧 Constraint Files:"
+    puts "  - lib/constraints/tenant_public_constraint.rb"
+    puts "  - lib/constraints/custom_domain_constraint.rb"
+    puts "  - lib/constraints/subdomain_constraint.rb"
+    
+    puts "\n📖 Documentation:"
+    puts "  - docs/TENANT_ROUTING_GUIDE.md"
+  end
+end
diff --git a/spec/controllers/business/registrations_controller_spec.rb b/spec/controllers/business/registrations_controller_spec.rb
index 6ee6811..1209f5c 100644
--- a/spec/controllers/business/registrations_controller_spec.rb
+++ b/spec/controllers/business/registrations_controller_spec.rb
@@ -35,7 +35,7 @@ RSpec.describe Business::RegistrationsController, type: :controller do
           zip: '12345',
           description: 'A test business',
           tier: 'free',
-          hostname: "testbusiness-#{SecureRandom.hex(4)}"
+          subdomain: "testbusiness-#{SecureRandom.hex(4)}"
         }
       }
     end
@@ -104,7 +104,7 @@ RSpec.describe Business::RegistrationsController, type: :controller do
       let(:valid_attributes_with_referral) do
         valid_attributes.deep_dup.tap do |attrs|
           attrs[:business_attributes][:platform_referral_code] = test_referral_code
-          attrs[:business_attributes][:hostname] = "testbiz-#{SecureRandom.hex(4)}"
+          attrs[:business_attributes][:subdomain] = "testbiz-#{SecureRandom.hex(4)}"
         end
       end
 
@@ -162,7 +162,7 @@ RSpec.describe Business::RegistrationsController, type: :controller do
         # First request with blank code
         attrs1 = valid_attributes.deep_dup
         attrs1[:business_attributes][:platform_referral_code] = ''
-        attrs1[:business_attributes][:hostname] = "biz1-#{SecureRandom.hex(4)}"
+        attrs1[:business_attributes][:subdomain] = "biz1-#{SecureRandom.hex(4)}"
 
         expect {
           post :create, params: { user: attrs1 }
@@ -172,7 +172,7 @@ RSpec.describe Business::RegistrationsController, type: :controller do
         attrs2 = valid_attributes.deep_dup
         attrs2[:email] = "user2-#{SecureRandom.hex(4)}@example.com"
         attrs2[:business_attributes][:platform_referral_code] = ''
-        attrs2[:business_attributes][:hostname] = "biz2-#{SecureRandom.hex(4)}"
+        attrs2[:business_attributes][:subdomain] = "biz2-#{SecureRandom.hex(4)}"
 
         expect {
           post :create, params: { user: attrs2 }
@@ -188,7 +188,7 @@ RSpec.describe Business::RegistrationsController, type: :controller do
           post :create, params: { user: attributes_with_bad_industry }
         }.not_to change(Business, :count)
 
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response).to render_template(:new)
         expect(flash[:alert]).to match(/not a recognised industry/i)
       end
diff --git a/spec/controllers/business_manager/services_controller_availability_spec.rb b/spec/controllers/business_manager/services_controller_availability_spec.rb
index 68c8ca5..b13529c 100644
--- a/spec/controllers/business_manager/services_controller_availability_spec.rb
+++ b/spec/controllers/business_manager/services_controller_availability_spec.rb
@@ -163,7 +163,7 @@ RSpec.describe BusinessManager::ServicesController, type: :controller do
 
       it 'renders availability template with errors' do
         expect(response).to render_template(:availability)
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
 
       it 'sets error message' do
@@ -200,7 +200,7 @@ RSpec.describe BusinessManager::ServicesController, type: :controller do
 
       it 'renders availability template with errors' do
         expect(response).to render_template(:availability)
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
 
       it 'includes overlap error message' do
@@ -222,7 +222,7 @@ RSpec.describe BusinessManager::ServicesController, type: :controller do
 
       it 'renders availability template with errors' do
         expect(response).to render_template(:availability)
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
 
       it 'sets error message' do
diff --git a/spec/controllers/business_manager/settings/integrations_controller_spec.rb b/spec/controllers/business_manager/settings/integrations_controller_spec.rb
index f92928b..9007ab7 100644
--- a/spec/controllers/business_manager/settings/integrations_controller_spec.rb
+++ b/spec/controllers/business_manager/settings/integrations_controller_spec.rb
@@ -279,7 +279,7 @@ RSpec.describe BusinessManager::Settings::IntegrationsController, type: :control
       it 'returns unprocessable entity error' do
         post :google_business_connect, params: { place_id: place_id, business_name: business_name }, format: :json
 
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(json_response['error']).to eq('Failed to save Google Business connection')
         expect(json_response['details']).to eq(['Validation failed'])
       end
@@ -340,7 +340,7 @@ RSpec.describe BusinessManager::Settings::IntegrationsController, type: :control
       it 'returns unprocessable entity error' do
         delete :google_business_disconnect, format: :json
 
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(json_response['error']).to eq('Failed to disconnect Google Business')
         expect(json_response['details']).to eq(['Validation failed'])
       end
diff --git a/spec/controllers/cart_controller_spec.rb b/spec/controllers/cart_controller_spec.rb
index 5ffe0ec..8c447e6 100644
--- a/spec/controllers/cart_controller_spec.rb
+++ b/spec/controllers/cart_controller_spec.rb
@@ -1,6 +1,6 @@
 require 'rails_helper'
 
-RSpec.describe CartsController, type: :controller do
+RSpec.describe Public::CartsController, type: :controller do
   let!(:business) { create(:business, subdomain: 'testtenant', hostname: 'testtenant') }
 
   before do
@@ -11,12 +11,12 @@ RSpec.describe CartsController, type: :controller do
 
   describe 'GET #show' do
     it 'returns success' do
-      @request.host = 'lvh.me'
+      @request.host = 'testtenant.lvh.me'
       get :show
       expect(response).to be_successful
     end
     it 'assigns @cart' do
-      @request.host = 'lvh.me'
+      @request.host = 'testtenant.lvh.me'
       get :show
       expect(assigns(:cart)).to be_a(Hash)
     end
diff --git a/spec/controllers/public/referral_controller_spec.rb b/spec/controllers/public/referral_controller_spec.rb
index 58d1ff9..f50a588 100644
--- a/spec/controllers/public/referral_controller_spec.rb
+++ b/spec/controllers/public/referral_controller_spec.rb
@@ -163,11 +163,14 @@ RSpec.describe Public::ReferralController, type: :controller do
 
       it 'generates correct URL for production with custom domain' do
         allow(Rails).to receive(:env).and_return(ActiveSupport::StringInquirer.new('production'))
-        # Create a business with premium tier that allows custom domains
+        # Create a business with all requirements for custom_domain_allow?
         custom_business = create(:business, 
                                 hostname: 'example.com', 
                                 host_type: 'custom_domain',
-                                tier: 'premium')
+                                tier: 'premium',
+                                status: 'cname_active',
+                                render_domain_added: true,
+                                domain_health_verified: true)
         
         url = controller_instance.send(:generate_referral_url, custom_business, 'TEST123')
         expect(url).to eq("https://example.com?ref=TEST123")
diff --git a/spec/controllers/staff_controller_spec.rb b/spec/controllers/staff_controller_spec.rb
index 504f32c..3e741b3 100644
--- a/spec/controllers/staff_controller_spec.rb
+++ b/spec/controllers/staff_controller_spec.rb
@@ -176,7 +176,7 @@ RSpec.describe StaffController, type: :controller do
           staff_member: { availability: invalid_availability }
         }, format: :json
         
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         json_response = JSON.parse(response.body)
         expect(json_response['success']).to be false
         expect(json_response['errors']).to include('Error message')
diff --git a/spec/integration/subscription_email_notifications_spec.rb b/spec/integration/subscription_email_notifications_spec.rb
index fd435b0..b3b7348 100644
--- a/spec/integration/subscription_email_notifications_spec.rb
+++ b/spec/integration/subscription_email_notifications_spec.rb
@@ -20,7 +20,7 @@ RSpec.describe "Subscription Email Notifications", type: :request do
            business: business,
            service: service,
            tenant_customer: tenant_customer,
-           subscription_price: 49.99)
+           subscription_price: 29.99)
   end
 
   before do
@@ -56,7 +56,7 @@ RSpec.describe "Subscription Email Notifications", type: :request do
 
       email = ActionMailer::Base.deliveries.last
       expect(email.body.encoded).to include(service.name)
-      expect(email.body.encoded).to include('$49.99')
+      expect(email.body.encoded).to include('$29.99')
       expect(email.body.encoded).to include('monthly') # frequency
       expect(email.body.encoded).to include('1') # quantity
     end
@@ -204,7 +204,7 @@ RSpec.describe "Subscription Email Notifications", type: :request do
         expected_name = CGI.escapeHTML(tenant_customer.full_name)
         expect(email.body.encoded).to include(expected_name)
         expect(email.body.encoded).to include(service.name)
-        expect(email.body.encoded).to include('$49.99')
+        expect(email.body.encoded).to include('$29.99')
         expect(email.body.encoded).to include('monthly')
       end
     end
diff --git a/spec/jobs/domain_monitoring_job_spec.rb b/spec/jobs/domain_monitoring_job_spec.rb
new file mode 100644
index 0000000..0f4d7d1
--- /dev/null
+++ b/spec/jobs/domain_monitoring_job_spec.rb
@@ -0,0 +1,291 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe DomainMonitoringJob, type: :job do
+  include ActiveJob::TestHelper
+
+  let!(:business) do
+    create(:business,
+      tier: 'premium',
+      host_type: 'custom_domain',
+      hostname: 'example.com',
+      status: 'cname_monitoring',
+      cname_monitoring_active: true,
+      cname_check_attempts: 2
+    )
+  end
+
+  let(:monitoring_service) { instance_double(DomainMonitoringService) }
+
+  before do
+    allow(DomainMonitoringService).to receive(:new).and_return(monitoring_service)
+  end
+
+  describe '#perform' do
+    context 'with valid business' do
+      let(:check_result) do
+        {
+          success: true,
+          verified: false,
+          should_continue: true,
+          attempts: 3,
+          max_attempts: 12
+        }
+      end
+
+      before do
+        allow(monitoring_service).to receive(:perform_check!).and_return(check_result)
+        allow(business).to receive(:cname_due_for_check?).and_return(true)
+        allow(Business).to receive(:find).with(business.id).and_return(business)
+      end
+
+      it 'performs monitoring check' do
+        expect(monitoring_service).to receive(:perform_check!)
+
+        described_class.perform_now(business.id)
+      end
+
+      it 'schedules next check when monitoring should continue' do
+        expect(described_class).to receive_message_chain(:set, :perform_later).with(wait: 5.minutes).with(business.id)
+
+        described_class.perform_now(business.id)
+      end
+
+      context 'when verification is complete' do
+        let(:check_result) do
+          {
+            success: true,
+            verified: true,
+            should_continue: false,
+            attempts: 5,
+            max_attempts: 12
+          }
+        end
+
+        it 'does not schedule next check' do
+          allow(Business).to receive(:find).with(business.id).and_return(business)
+          expect(described_class).not_to receive(:set)
+
+          described_class.perform_now(business.id)
+        end
+      end
+
+      context 'when monitoring times out' do
+        let(:check_result) do
+          {
+            success: true,
+            verified: false,
+            should_continue: false,
+            attempts: 12,
+            max_attempts: 12
+          }
+        end
+
+        it 'does not schedule next check' do
+          allow(Business).to receive(:find).with(business.id).and_return(business)
+          expect(described_class).not_to receive(:set)
+
+          described_class.perform_now(business.id)
+        end
+      end
+    end
+
+    context 'with non-existent business' do
+      it 'handles gracefully without error' do
+        expect { described_class.perform_now(999999) }.not_to raise_error
+      end
+
+      it 'logs error message' do
+        expect(Rails.logger).to receive(:error).with(/Business 999999 not found/)
+
+        described_class.perform_now(999999)
+      end
+    end
+
+    context 'when business is not due for check' do
+      before do
+        business.update!(updated_at: 2.minutes.ago)
+        allow(business).to receive(:cname_due_for_check?).and_return(false)
+        allow(Business).to receive(:find).with(business.id).and_return(business)
+      end
+
+      it 'schedules next check without performing monitoring' do
+        expect(monitoring_service).not_to receive(:perform_check!)
+        expect(described_class).to receive_message_chain(:set, :perform_later).with(wait: 5.minutes).with(business.id)
+
+        described_class.perform_now(business.id)
+      end
+    end
+
+    context 'when monitoring is no longer needed' do
+      before do
+        business.update!(status: 'cname_active', cname_monitoring_active: false)
+      end
+
+      it 'skips monitoring without scheduling next check' do
+        expect(monitoring_service).not_to receive(:perform_check!)
+        expect(described_class).not_to receive(:set)
+
+        described_class.perform_now(business.id)
+      end
+    end
+
+    context 'when monitoring service raises error' do
+      before do
+        allow(monitoring_service).to receive(:perform_check!).and_raise(StandardError.new('Monitoring failed'))
+        allow(business).to receive(:cname_due_for_check?).and_return(true)
+        allow(Business).to receive(:find).with(business.id).and_return(business)
+        business.update!(
+          status: 'cname_monitoring',
+          cname_monitoring_active: true,
+          tier: 'premium',
+          host_type: 'custom_domain',
+          hostname: 'example.com',
+          cname_check_attempts: 1
+        )
+      end
+
+      it 'does not schedule next check and swallows error due to retry_on' do
+        expect(DomainMonitoringJob).not_to receive(:set)
+        expect { described_class.perform_now(business.id) }.not_to raise_error
+      end
+
+      it 'does not raise error after retries are handled' do
+        expect { described_class.perform_now(business.id) }.not_to raise_error
+      end
+    end
+  end
+
+  describe '.start_monitoring' do
+    it 'queues monitoring job for business' do
+      expect { described_class.start_monitoring(business.id) }.to have_enqueued_job(described_class).with(business.id)
+    end
+  end
+
+  describe '.stop_monitoring' do
+    it 'stops monitoring for business' do
+      described_class.stop_monitoring(business.id)
+
+      business.reload
+      expect(business.cname_monitoring_active).to be false
+    end
+
+    it 'handles non-existent business gracefully' do
+      expect { described_class.stop_monitoring(999999) }.not_to raise_error
+    end
+  end
+
+  describe '.monitor_all_pending' do
+    let!(:monitoring_business1) do
+      create(:business,
+        tier: 'premium',
+        host_type: 'custom_domain',
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 5,
+        updated_at: 10.minutes.ago
+      )
+    end
+
+    let!(:monitoring_business2) do
+      create(:business,
+        tier: 'premium',
+        host_type: 'custom_domain',
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 8,
+        updated_at: 7.minutes.ago
+      )
+    end
+
+    let!(:recent_business) do
+      create(:business,
+        tier: 'premium',
+        host_type: 'custom_domain',
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 2,
+        updated_at: 2.minutes.ago
+      )
+    end
+
+    let!(:inactive_business) do
+      create(:business,
+        tier: 'premium',
+        host_type: 'custom_domain',
+        status: 'cname_monitoring',
+        cname_monitoring_active: false,
+        updated_at: 10.minutes.ago
+      )
+    end
+
+    let!(:completed_business) do
+      create(:business,
+        tier: 'premium',
+        host_type: 'custom_domain',
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 12,
+        updated_at: 10.minutes.ago
+      )
+    end
+
+    it 'queues jobs for businesses needing monitoring' do
+      expect { described_class.monitor_all_pending }.to have_enqueued_job(described_class)
+        .with(monitoring_business1.id)
+        .and have_enqueued_job(described_class)
+        .with(monitoring_business2.id)
+    end
+
+    it 'does not queue jobs for recent updates' do
+      expect { described_class.monitor_all_pending }.not_to have_enqueued_job(described_class)
+        .with(recent_business.id)
+    end
+
+    it 'does not queue jobs for inactive monitoring' do
+      expect { described_class.monitor_all_pending }.not_to have_enqueued_job(described_class)
+        .with(inactive_business.id)
+    end
+
+    it 'does not queue jobs for completed monitoring' do
+      expect { described_class.monitor_all_pending }.not_to have_enqueued_job(described_class)
+        .with(completed_business.id)
+    end
+  end
+
+  describe 'private methods' do
+    describe '#should_continue_monitoring?' do
+      let(:job) { described_class.new }
+
+      it 'returns true for valid monitoring business' do
+        expect(job.send(:should_continue_monitoring?, business)).to be true
+      end
+
+      it 'returns false for non-monitoring status' do
+        business.update!(status: 'active')
+        expect(job.send(:should_continue_monitoring?, business)).to be false
+      end
+
+      it 'returns false for inactive monitoring' do
+        business.update!(cname_monitoring_active: false)
+        expect(job.send(:should_continue_monitoring?, business)).to be false
+      end
+
+      it 'returns false for exceeded attempts' do
+        business.update!(cname_check_attempts: 12)
+        expect(job.send(:should_continue_monitoring?, business)).to be false
+      end
+
+      it 'returns false for non-premium tier' do
+        business.update!(tier: 'free', host_type: 'subdomain', hostname: 'example')
+        expect(job.send(:should_continue_monitoring?, business)).to be false
+      end
+
+      it 'returns false for non-custom domain' do
+        business.update!(host_type: 'subdomain', hostname: 'example')
+        expect(job.send(:should_continue_monitoring?, business)).to be false
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/lib/tasks/tenant_routes_validation_spec.rb b/spec/lib/tasks/tenant_routes_validation_spec.rb
new file mode 100644
index 0000000..7c28e64
--- /dev/null
+++ b/spec/lib/tasks/tenant_routes_validation_spec.rb
@@ -0,0 +1,204 @@
+require 'rails_helper'
+require 'rake'
+
+RSpec.describe 'tenant:validate_routes', type: :task do
+  before(:all) do
+    Rake.application.rake_require 'tasks/tenant_routes_validation'
+    Rake::Task.define_task(:environment)
+  end
+
+  let(:task) { Rake::Task['tenant:validate_routes'] }
+  let!(:subdomain_business) do
+    create(:business, 
+           name: 'Route Test Subdomain Business',
+           subdomain: 'routetest',
+           host_type: 'subdomain',
+           status: 'active')
+  end
+  
+  let!(:custom_domain_business) do
+    create(:business,
+           name: 'Route Test Custom Domain Business', 
+           subdomain: 'customtest',
+           hostname: 'routetest.example.com',
+           host_type: 'custom_domain',
+           status: 'cname_active')
+  end
+
+  before do
+    task.reenable
+  end
+
+  describe 'route validation' do
+    it 'validates routes for both subdomain and custom domain businesses' do
+      # Capture the output
+      output = capture_stdout { task.invoke }
+      
+      # Should test both domain types
+      expect(output).to include('Testing subdomain host: routetest.bizblasts.com')
+      expect(output).to include('Testing custom_domain host: routetest.example.com')
+      
+      # Should test core routes
+      expect(output).to include('Homepage → public/pages#show')
+      expect(output).to include('Services page → public/pages#show')
+      expect(output).to include('Cart → public/carts#show')
+      expect(output).to include('Orders index → public/orders#index')
+      expect(output).to include('New payment → public/payments#new')
+      
+      # Should show success for both domain types
+      expect(output).to include('✅')
+      expect(output).to include('public/')
+    end
+
+    it 'tests constraint logic for different host types' do
+      output = capture_stdout { task.invoke }
+      
+      # Should test constraint matching
+      expect(output).to include('Testing Constraint Logic')
+      expect(output).to include('routetest.bizblasts.com (subdomain) → MATCH')
+      expect(output).to include('routetest.example.com (custom_domain) → MATCH')
+      expect(output).to include('bizblasts.com (platform) → NO MATCH')
+      expect(output).to include('www.bizblasts.com (platform) → NO MATCH')
+      expect(output).to include('nonexistent.com (unknown) → NO MATCH')
+    end
+
+    it 'reports validation success when all routes work' do
+      output = capture_stdout { task.invoke }
+      
+      expect(output).to include('VALIDATION PASSED - All tenant routes work correctly!')
+    end
+  end
+
+  describe 'route structure display' do
+    let(:show_task) { Rake::Task['tenant:show_routes'] }
+    
+    before do
+      show_task.reenable
+    end
+
+    it 'displays current tenant route structure' do
+      output = capture_stdout { show_task.invoke }
+      
+      expect(output).to include('Current Tenant Route Structure')
+      expect(output).to include('TenantPublicConstraint Routes:')
+      expect(output).to include('Platform Routes:')
+      expect(output).to include('Constraint Files:')
+      expect(output).to include('Documentation:')
+      expect(output).to include('docs/TENANT_ROUTING_GUIDE.md')
+    end
+  end
+
+  private
+
+  def capture_stdout
+    original_stdout = $stdout
+    $stdout = StringIO.new
+    begin
+      yield
+      $stdout.string
+    ensure
+      $stdout = original_stdout
+    end
+  end
+end
+
+RSpec.describe 'Tenant Route Integration', type: :routing do
+  let!(:subdomain_business) do
+    create(:business, 
+           subdomain: 'integrationtest',
+           host_type: 'subdomain',
+           status: 'active')
+  end
+  
+  let!(:custom_domain_business) do
+    create(:business,
+           subdomain: 'customintegration',
+           hostname: 'integration.example.com',
+           host_type: 'custom_domain',
+           status: 'cname_active')
+  end
+
+  describe 'constraint validation' do
+    def create_mock_request(host)
+      Class.new do
+        attr_reader :host
+        
+        def initialize(host)
+          @host = host
+        end
+        
+        def subdomain
+          parts = @host.split('.')
+          return '' if parts.length <= 2
+          return '' if parts.first == 'www'
+          parts.first
+        end
+      end.new(host)
+    end
+
+    it 'TenantPublicConstraint matches subdomain requests' do
+      request = create_mock_request('integrationtest.bizblasts.com')
+      expect(TenantPublicConstraint.matches?(request)).to be true
+    end
+
+    it 'TenantPublicConstraint matches custom domain requests' do
+      request = create_mock_request('integration.example.com')
+      expect(TenantPublicConstraint.matches?(request)).to be true
+    end
+
+    it 'TenantPublicConstraint rejects platform requests' do
+      platform_hosts = ['bizblasts.com', 'www.bizblasts.com', 'bizblasts.onrender.com']
+      
+      platform_hosts.each do |host|
+        request = create_mock_request(host)
+        expect(TenantPublicConstraint.matches?(request)).to be false,
+          "Expected TenantPublicConstraint to reject #{host}"
+      end
+    end
+  end
+
+  describe 'route existence validation' do
+    it 'verifies all expected tenant routes exist' do
+      expected_routes = [
+        { name: 'tenant_root', controller: 'public/pages' },
+        { name: 'tenant_services_page', controller: 'public/pages' },
+        { name: 'tenant_about_page', controller: 'public/pages' },
+        { name: 'new_tenant_booking', controller: 'public/booking' },
+        { name: 'cart', controller: 'public/carts' },
+        { name: 'payments', controller: 'public/payments' },
+        { name: 'new_payment', controller: 'public/payments' },
+        { name: 'tenant_calendar', controller: 'public/tenant_calendar' },
+        { name: 'products', controller: 'public/products' }
+      ]
+      
+      all_routes = Rails.application.routes.routes.map do |route|
+        {
+          name: route.name,
+          controller: route.defaults[:controller],
+          action: route.defaults[:action]
+        }
+      end
+      
+      expected_routes.each do |expected_route|
+        found_route = all_routes.find { |r| r[:name] == expected_route[:name] }
+        
+        expect(found_route).to be_present, 
+          "Route #{expected_route[:name]} not found"
+        expect(found_route[:controller]).to eq(expected_route[:controller]),
+          "Route #{expected_route[:name]} points to #{found_route[:controller]} instead of #{expected_route[:controller]}"
+      end
+    end
+  end
+
+  describe 'platform domain exclusion' do
+    it 'platform domains route to home controller' do
+      platform_hosts = ['bizblasts.com', 'www.bizblasts.com']
+      
+      platform_hosts.each do |host|
+        recognized = Rails.application.routes.recognize_path('/', method: :get, host: host)
+        expect(recognized[:controller]).to eq('home'), 
+          "Expected #{host} to route to home controller, got #{recognized[:controller]}"
+      end
+    end
+  end
+end
diff --git a/spec/mailers/business_mailer_spec.rb b/spec/mailers/business_mailer_spec.rb
index bb210d8..ca5f81c 100644
--- a/spec/mailers/business_mailer_spec.rb
+++ b/spec/mailers/business_mailer_spec.rb
@@ -39,8 +39,8 @@ RSpec.describe BusinessMailer, type: :mailer do
     it 'includes domain coverage information in the email' do
       mail = BusinessMailer.domain_request_notification(premium_user)
       
-      # Check for domain coverage content in HTML version
-      expect(mail.body.encoded).to include('Domain Cost Coverage')
+      # Check for domain coverage content in both HTML and text versions
+      expect(mail.body.encoded).to include('DOMAIN COST COVERAGE')
       expect(mail.body.encoded).to include('$20 per year')
       expect(mail.body.encoded).to include('BizBlasts covers domain registration costs')
       expect(mail.body.encoded).to include('If under $20/year: We handle registration at no cost')
diff --git a/spec/mailers/domain_mailer_spec.rb b/spec/mailers/domain_mailer_spec.rb
new file mode 100644
index 0000000..497d73e
--- /dev/null
+++ b/spec/mailers/domain_mailer_spec.rb
@@ -0,0 +1,255 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+require 'nokogiri'
+
+RSpec.describe DomainMailer, type: :mailer do
+  # Helper to extract plain-text from HTML body across all examples
+  def body_text(mail)
+    Nokogiri::HTML(mail.body.decoded).text.squeeze(" \n")
+  end
+
+  let(:business) { create(:business, name: 'Test Business', hostname: 'example.com') }
+  let(:user) { create(:user, email: 'owner@example.com', first_name: 'John', business: business) }
+
+  before do
+    ENV['SUPPORT_EMAIL'] = 'bizblaststeam@gmail.com'
+  end
+
+  after do
+    ENV.delete('SUPPORT_EMAIL')
+  end
+
+  describe '#setup_instructions' do
+    let(:mail) { described_class.setup_instructions(business, user) }
+
+    it 'renders the headers' do
+      expect(mail.subject).to eq('Custom Domain Setup Instructions for Test Business')
+      expect(mail.to).to eq(['owner@example.com'])
+      expect(mail.from).to eq([ENV['MAILER_EMAIL']])
+    end
+
+    it 'assigns instance variables' do
+      expect(body_text(mail)).to include(business.hostname)
+      expect(body_text(mail)).to include(user.first_name)
+    end
+
+    it 'includes DNS setup instructions for both A and CNAME records' do
+      t = body_text(mail)
+      expect(t).to include('A record')
+      expect(t).to include('CNAME record')
+      expect(t).to include('Type: A')
+      expect(t).to include('Type: CNAME')
+      expect(t).to include('216.24.57.1')
+      expect(t).to match(/localhost|[a-z0-9\-]+\.bizblasts\.com/)
+    end
+
+    it 'includes registrar-specific instructions' do
+      text = body_text(mail)
+      %w[GoDaddy Namecheap Cloudflare].each { |provider| expect(text).to include(provider) }
+    end
+
+    it 'includes monitoring information' do
+      text = body_text(mail)
+      %w[monitor minutes hour].each { |word| expect(text).to include(word) }
+    end
+
+    it 'includes support contact information' do
+      expect(body_text(mail)).to include('bizblaststeam@gmail.com')
+    end
+
+    context 'with www subdomain' do
+      before { business.update!(tier: :premium, host_type: :custom_domain, hostname: 'www.example.com') }
+
+      it 'includes both @ and www in DNS instructions' do
+        text = body_text(mail)
+        expect(text).to include('Name/Host: @')
+        expect(text).to include('Name/Host: www')
+      end
+    end
+
+    context 'with root domain' do
+      it 'includes both @ and www in DNS instructions' do
+        text = body_text(mail)
+        expect(text).to include('Name/Host: @')
+        expect(text).to include('Name/Host: www')
+      end
+    end
+
+    context 'in development environment' do
+      before do
+        allow(Rails.env).to receive(:production?).and_return(false)
+      end
+
+      it 'uses localhost as target' do
+        expect(body_text(mail)).to include('localhost')
+      end
+    end
+  end
+
+  describe '#activation_success' do
+    let(:mail) { described_class.activation_success(business, user) }
+
+    it 'renders the headers' do
+      expect(mail.subject).to eq('🎉 Your custom domain example.com is now active!')
+      expect(mail.to).to eq(['owner@example.com'])
+    end
+
+    it 'includes congratulations message' do
+      expect(body_text(mail)).to include('Congratulations')
+      expect(body_text(mail)).to include('successfully activated')
+    end
+
+    it 'includes domain URL' do
+      t = body_text(mail)
+      expect(t).to include('example.com')
+      expect(t).to include('Visit Your Site')
+    end
+
+    it 'includes feature benefits' do
+      text = body_text(mail)
+      %w[SSL Automatic SEO].each { |word| expect(text).to include(word) }
+    end
+
+    it 'includes update instructions' do
+      text = body_text(mail)
+      %w[Google Social Business].each { |word| expect(text).to include(word) }
+    end
+
+    it 'mentions automatic redirects' do
+      expect(body_text(mail)).to include('redirect')
+    end
+  end
+
+  describe '#timeout_help' do
+    let(:mail) { described_class.timeout_help(business, user) }
+
+    it 'renders the headers' do
+      expect(mail.subject).to eq('Help needed: Custom domain setup for example.com')
+      expect(mail.to).to eq(['owner@example.com'])
+    end
+
+    it 'explains timeout situation' do
+      expect(body_text(mail)).to include('past hour')
+      expect(body_text(mail)).to include("haven't detected")
+      expect(body_text(mail)).to include('DNS records')
+    end
+
+    it 'includes troubleshooting steps' do
+      expect(body_text(mail)).to include('Double-check')
+      expect(body_text(mail)).to include('Common issues')
+      expect(body_text(mail)).to include('DNS propagation')
+    end
+
+    it 'provides DNS configuration details' do
+      text = body_text(mail)
+      expect(text).to match(/localhost|[a-z0-9\-]+\.bizblasts\.com/)
+    end
+
+    it 'includes registrar-specific guides' do
+      expect(body_text(mail)).to include('GoDaddy')
+      expect(body_text(mail)).to include('Namecheap')
+      expect(body_text(mail)).to include('Google Domains')
+    end
+
+    it 'provides support contact' do
+      expect(body_text(mail)).to include('Get Help Now')
+      expect(body_text(mail)).to include('bizblaststeam@gmail.com')
+      expect(body_text(mail)).to include('Need immediate assistance')
+    end
+
+    it 'explains next steps' do
+      expect(body_text(mail)).to include('Contact support')
+      expect(body_text(mail)).to include('Fix the CNAME')
+      expect(body_text(mail)).to include('Try later')
+    end
+  end
+
+  describe '#monitoring_restarted' do
+    let(:mail) { described_class.monitoring_restarted(business, user) }
+
+    it 'renders the headers' do
+      expect(mail.subject).to eq('Domain monitoring restarted for example.com')
+      expect(mail.to).to eq(['owner@example.com'])
+    end
+
+    it 'explains monitoring restart' do
+      expect(mail.body.encoded).to include('restarted monitoring')
+      expect(mail.body.encoded).to include('check every 5 minutes')
+      expect(mail.body.encoded).to include('next hour')
+    end
+
+    it 'includes current status information' do
+      expect(body_text(mail)).to include('example.com')
+      expect(body_text(mail)).to include('Business: Test Business')
+      expect(body_text(mail)).to include('Status: Monitoring Active')
+      expect(body_text(mail)).to include('Duration: Up to 1 hour')
+    end
+
+    it 'explains what happens next' do
+      expect(mail.body.encoded).to include("don't need to do anything")
+      expect(mail.body.encoded).to include('confirmation email')
+      expect(mail.body.encoded).to include('troubleshooting help')
+    end
+
+    it 'includes DNS record reminders' do
+      text = body_text(mail)
+      expect(text).to include('DNS records')
+      expect(text).to include('A Record')
+      expect(text).to include('Name:')
+      expect(text).to include('Type: CNAME')
+      expect(text).to include('Type: A')
+      expect(text).to include('216.24.57.1')
+      expect(text).to match(/localhost|[a-z0-9\-]+\.bizblasts\.com/)
+    end
+  end
+
+  describe 'default configuration' do
+    it 'uses correct default from address' do
+      mail = described_class.setup_instructions(business, user)
+      expect(mail.from).to eq([ENV['MAILER_EMAIL']])
+    end
+
+    it 'falls back to default support email when ENV not set' do
+      ENV.delete('SUPPORT_EMAIL')
+      mail = described_class.setup_instructions(business, user)
+      expect(mail.from).to eq([ENV['MAILER_EMAIL']])
+    end
+
+    it 'uses custom support email from ENV' do
+      ENV['SUPPORT_EMAIL'] = 'custom@example.com'
+      mail = described_class.setup_instructions(business, user)
+      expect(mail.from).to eq([ENV['MAILER_EMAIL']])
+      ENV.delete('SUPPORT_EMAIL')
+    end
+  end
+
+  describe 'template rendering' do
+    it 'renders HTML templates without errors' do
+      %w[setup_instructions activation_success timeout_help monitoring_restarted].each do |template|
+        mail = described_class.send(template, business, user)
+        
+        expect { mail.body.encoded }.not_to raise_error
+        expect(mail.body.encoded).to be_present
+        expect(mail.body.encoded.length).to be > 100  # Ensure substantial content
+      end
+    end
+
+    it 'includes proper HTML structure' do
+      mail = described_class.setup_instructions(business, user)
+      
+      expect(mail.body.encoded).to include('<!DOCTYPE html>')
+      expect(mail.body.encoded).to include('<html>')
+      expect(mail.body.encoded).to include('<head>')
+      expect(mail.body.encoded).to include('<body>')
+    end
+
+    it 'includes responsive styling' do
+      mail = described_class.setup_instructions(business, user)
+      
+      expect(mail.body.encoded).to include('viewport')
+      expect(mail.body.encoded).to include('max-width')
+      expect(mail.body.encoded).to include('font-family')
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/models/business_cname_spec.rb b/spec/models/business_cname_spec.rb
new file mode 100644
index 0000000..240710e
--- /dev/null
+++ b/spec/models/business_cname_spec.rb
@@ -0,0 +1,334 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe Business, type: :model do
+  describe 'CNAME domain functionality' do
+    let(:business) { create(:business, tier: 'premium', host_type: 'custom_domain', hostname: 'example.com') }
+
+    describe 'status enum' do
+      it 'includes CNAME statuses' do
+        expect(Business.statuses.keys).to include(
+          'active', 'inactive', 'suspended',
+          'cname_pending', 'cname_monitoring', 'cname_active', 'cname_timeout'
+        )
+      end
+
+      it 'defaults to active status' do
+        new_business = Business.new
+        expect(new_business.status).to eq('active')
+      end
+
+      it 'supports CNAME status transitions' do
+        business.update!(status: 'cname_pending')
+        expect(business.cname_pending?).to be true
+
+        business.update!(status: 'cname_monitoring')
+        expect(business.cname_monitoring?).to be true
+
+        business.update!(status: 'cname_active')
+        expect(business.cname_active?).to be true
+      end
+    end
+
+    describe 'scopes' do
+      let!(:pending_business) { create(:business, status: 'cname_pending') }
+      let!(:monitoring_business) { create(:business, status: 'cname_monitoring', cname_monitoring_active: true) }
+      let!(:active_business) { create(:business, status: 'cname_active') }
+      let!(:inactive_business) { create(:business, status: 'active') }
+
+      describe '.cname_pending' do
+        it 'returns businesses with pending status' do
+          expect(Business.cname_pending).to contain_exactly(pending_business)
+        end
+      end
+
+      describe '.cname_monitoring' do
+        it 'returns businesses with monitoring status' do
+          expect(Business.cname_monitoring).to contain_exactly(monitoring_business)
+        end
+      end
+
+      describe '.monitoring_needed' do
+        it 'returns businesses that need active monitoring' do
+          expect(Business.monitoring_needed).to contain_exactly(monitoring_business)
+        end
+
+        it 'excludes businesses with inactive monitoring' do
+          monitoring_business.update!(cname_monitoring_active: false)
+          expect(Business.monitoring_needed).to be_empty
+        end
+      end
+    end
+
+    describe '#start_cname_monitoring!' do
+      it 'starts monitoring for eligible business' do
+        business.start_cname_monitoring!
+
+        expect(business.status).to eq('cname_monitoring')
+        expect(business.cname_monitoring_active).to be true
+        expect(business.cname_check_attempts).to eq(0)
+      end
+
+      it 'fails for non-premium business' do
+        business.update!(tier: 'free')
+
+        result = business.start_cname_monitoring!
+
+        expect(result).to be false
+        expect(business.status).not_to eq('cname_monitoring')
+      end
+
+      it 'fails for subdomain business' do
+        business.update!(host_type: 'subdomain')
+
+        result = business.start_cname_monitoring!
+
+        expect(result).to be false
+        expect(business.status).not_to eq('cname_monitoring')
+      end
+    end
+
+    describe '#stop_cname_monitoring!' do
+      before do
+        business.update!(
+          status: 'cname_monitoring',
+          cname_monitoring_active: true
+        )
+      end
+
+      it 'stops monitoring and updates status' do
+        business.stop_cname_monitoring!
+
+        expect(business.cname_monitoring_active).to be false
+        expect(business.status).to eq('active')
+      end
+
+      context 'when business has cname_active status' do
+        before do
+          business.update!(status: 'cname_active')
+        end
+
+        it 'maintains cname_active status' do
+          business.stop_cname_monitoring!
+
+          expect(business.status).to eq('cname_active')
+          expect(business.cname_monitoring_active).to be false
+        end
+      end
+    end
+
+    describe '#cname_due_for_check?' do
+      context 'with no previous attempts' do
+        before do
+          business.update!(cname_monitoring_active: true, cname_check_attempts: 0)
+        end
+
+        it 'returns true for first check' do
+          expect(business.cname_due_for_check?).to be true
+        end
+      end
+
+      context 'with previous attempts' do
+        before do
+          business.update!(
+            cname_monitoring_active: true,
+            cname_check_attempts: 3,
+            updated_at: 6.minutes.ago
+          )
+        end
+
+        it 'returns true after 5 minutes' do
+          expect(business.cname_due_for_check?).to be true
+        end
+
+        it 'returns false before 5 minutes' do
+          business.update!(updated_at: 3.minutes.ago)
+          expect(business.cname_due_for_check?).to be false
+        end
+      end
+
+      context 'with maximum attempts reached' do
+        before do
+          business.update!(cname_monitoring_active: true, cname_check_attempts: 12)
+        end
+
+        it 'returns false' do
+          expect(business.cname_due_for_check?).to be false
+        end
+      end
+
+      context 'with inactive monitoring' do
+        before do
+          business.update!(cname_monitoring_active: false)
+        end
+
+        it 'returns false' do
+          expect(business.cname_due_for_check?).to be false
+        end
+      end
+    end
+
+    describe '#increment_cname_check!' do
+      before do
+        business.update!(cname_check_attempts: 5)
+      end
+
+      it 'increments check attempts counter' do
+        business.increment_cname_check!
+
+        business.reload
+        expect(business.cname_check_attempts).to eq(6)
+      end
+    end
+
+    describe '#cname_timeout!' do
+      before do
+        business.update!(status: 'cname_monitoring', cname_monitoring_active: true)
+      end
+
+      it 'sets timeout status and stops monitoring' do
+        business.cname_timeout!
+
+        expect(business.status).to eq('cname_timeout')
+        expect(business.cname_monitoring_active).to be false
+      end
+    end
+
+    describe '#cname_success!' do
+      before do
+        business.update!(status: 'cname_monitoring', cname_monitoring_active: true)
+      end
+
+      it 'sets active status and stops monitoring' do
+        business.cname_success!
+
+        expect(business.status).to eq('cname_active')
+        expect(business.cname_monitoring_active).to be false
+      end
+    end
+
+    describe '#can_setup_custom_domain?' do
+      context 'with eligible business' do
+        it 'returns true' do
+          expect(business.can_setup_custom_domain?).to be true
+        end
+      end
+
+      context 'with non-premium business' do
+        before { business.update!(tier: 'free') }
+
+        it 'returns false' do
+          expect(business.can_setup_custom_domain?).to be false
+        end
+      end
+
+      context 'with subdomain business' do
+        before { business.update!(host_type: 'subdomain') }
+
+        it 'returns false' do
+          expect(business.can_setup_custom_domain?).to be false
+        end
+      end
+
+      context 'with already active domain' do
+        before { business.update!(status: 'cname_active') }
+
+        it 'returns false' do
+          expect(business.can_setup_custom_domain?).to be false
+        end
+      end
+    end
+
+    describe '#handle_tier_downgrade callback' do
+      let(:removal_service) { instance_double(DomainRemovalService) }
+
+      before do
+        allow(DomainRemovalService).to receive(:new).with(business).and_return(removal_service)
+        allow(removal_service).to receive(:handle_tier_downgrade!).and_return(success: true)
+      end
+
+      context 'when downgrading from premium to free' do
+        before do
+          business.update!(tier: 'premium')
+        end
+
+        it 'triggers domain removal' do
+          expect(removal_service).to receive(:handle_tier_downgrade!).with('free')
+
+          business.update!(tier: 'free')
+        end
+      end
+
+      context 'when staying on premium tier' do
+        before do
+          business.update!(tier: 'premium')
+        end
+
+        it 'does not trigger domain removal' do
+          expect(DomainRemovalService).not_to receive(:new)
+
+          business.update!(tier: 'premium', name: 'Updated Name')
+        end
+      end
+
+      context 'when business has subdomain hosting' do
+        before do
+          business.update!(tier: 'premium', host_type: 'subdomain')
+        end
+
+        it 'does not trigger domain removal' do
+          expect(DomainRemovalService).not_to receive(:new)
+
+          business.update!(tier: 'free')
+        end
+      end
+
+      context 'when tier is not changing' do
+        it 'does not trigger domain removal' do
+          expect(DomainRemovalService).not_to receive(:new)
+
+          business.update!(name: 'Updated Name')
+        end
+      end
+    end
+
+    describe 'database columns' do
+      it 'has CNAME monitoring fields' do
+        expect(business).to respond_to(:cname_setup_email_sent_at)
+        expect(business).to respond_to(:cname_monitoring_active)
+        expect(business).to respond_to(:cname_check_attempts)
+        expect(business).to respond_to(:render_domain_added)
+      end
+
+      it 'has correct default values' do
+        new_business = Business.new
+        expect(new_business.cname_monitoring_active).to be false
+        expect(new_business.cname_check_attempts).to eq(0)
+        expect(new_business.render_domain_added).to be false
+      end
+    end
+
+    describe 'validations with CNAME fields' do
+      it 'validates custom domain format for custom_domain host_type' do
+        business.hostname = 'invalid-domain'
+
+        expect(business).not_to be_valid
+        expect(business.errors[:hostname]).to include('is not a valid domain name')
+      end
+
+      it 'allows valid custom domain format' do
+        business.update!(hostname: 'example.com')
+
+        expect(business).to be_valid
+      end
+
+      it 'prevents free tier from using custom domains' do
+        free_business = build(:business, tier: 'free', host_type: 'custom_domain')
+
+        expect(free_business).not_to be_valid
+        expect(free_business.errors[:host_type]).to include("must be 'subdomain' for Free and Standard tiers")
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/models/business_spec.rb b/spec/models/business_spec.rb
index 5bf8823..aa918d7 100644
--- a/spec/models/business_spec.rb
+++ b/spec/models/business_spec.rb
@@ -3,7 +3,22 @@
 require 'rails_helper'
 
 RSpec.describe Business, type: :model do
-  subject { build(:business) } # Use subject for concise tests
+  subject { 
+    Business.new(
+      hostname: 'test-business',
+      host_type: 'subdomain',
+      name: 'Test Business',
+      industry: 'other',
+      phone: '555-555-5555',
+      email: 'test@example.com',
+      address: '123 Test St',
+      city: 'Test',
+      state: 'CA',
+      zip: '90210',
+      description: 'A test business',
+      tier: 'free'
+    )
+  }
 
   describe 'associations' do
     it { is_expected.to belong_to(:service_template).optional }
@@ -63,7 +78,21 @@ RSpec.describe Business, type: :model do
 
     # Hostname Format
     context 'when host type is subdomain' do
-      subject { build(:business, host_type: :subdomain) }
+      subject { 
+        Business.new(
+          host_type: :subdomain,
+          name: 'Test Business',
+          industry: 'other',
+          phone: '555-555-5555',
+          email: 'test@example.com',
+          address: '123 Test St',
+          city: 'Test',
+          state: 'CA',
+          zip: '90210',
+          description: 'A test business',
+          tier: 'free'
+        )
+      }
       
       it { is_expected.to allow_value('valid-subdomain123').for(:hostname) }
       it { is_expected.to allow_value('test').for(:hostname) }
@@ -74,7 +103,21 @@ RSpec.describe Business, type: :model do
     end
     
     context 'when host type is custom domain' do
-      subject { build(:business, host_type: :custom_domain) }
+      subject { 
+        Business.new(
+          host_type: :custom_domain,
+          name: 'Test Business',
+          industry: 'other',
+          phone: '555-555-5555',
+          email: 'test@example.com',
+          address: '123 Test St',
+          city: 'Test',
+          state: 'CA',
+          zip: '90210',
+          description: 'A test business',
+          tier: 'premium'
+        )
+      }
       
       it { is_expected.to allow_value('example.com').for(:hostname) }
       it { is_expected.to allow_value('sub.example-test.co.uk').for(:hostname) }  
@@ -106,7 +149,7 @@ RSpec.describe Business, type: :model do
       
       it 'validates that host type must be subdomain' do
         expect(subject).not_to be_valid
-        expect(subject.errors[:host_type]).to include("must be 'subdomain' for the Free tier")
+        expect(subject.errors[:host_type]).to include("must be 'subdomain' for Free and Standard tiers")
       end
     end
   end
@@ -114,19 +157,58 @@ RSpec.describe Business, type: :model do
   describe 'callbacks' do
     describe '#normalize_hostname' do
       it 'downcases and normalizes hostname for subdomains' do
-        business = build(:business, hostname: '  My-Test--Subdomain123!  ', host_type: 'subdomain')
+        business = Business.new(
+          hostname: '  My-Test--Subdomain123!  ', 
+          host_type: 'subdomain',
+          name: 'Test Business',
+          industry: 'other',
+          phone: '555-555-5555',
+          email: 'test@example.com',
+          address: '123 Test St',
+          city: 'Test',
+          state: 'CA',
+          zip: '90210',
+          description: 'A test business',
+          tier: 'free'
+        )
         business.valid? # Trigger callback
         expect(business.hostname).to eq('my-test--subdomain123!')
       end
       
       it 'downcases and strips hostname for custom domains' do
-        business = build(:business, hostname: '  EXAMPLE.COM  ', host_type: 'custom_domain')  
+        business = Business.new(
+          hostname: '  EXAMPLE.COM  ',
+          host_type: 'custom_domain',
+          name: 'Test Business',
+          industry: 'other',
+          phone: '555-555-5555',
+          email: 'test@example.com',
+          address: '123 Test St',
+          city: 'Test',
+          state: 'CA',
+          zip: '90210',
+          description: 'A test business',
+          tier: 'premium'
+        )
         business.valid?
         expect(business.hostname).to eq('example.com')
       end
 
       it 'handles blank hostname' do
-        business = build(:business, hostname: nil)
+        business = Business.new(
+          hostname: nil,
+          host_type: 'subdomain',
+          name: 'Test Business',
+          industry: 'other',
+          phone: '555-555-5555',
+          email: 'test@example.com',
+          address: '123 Test St',
+          city: 'Test',
+          state: 'CA',
+          zip: '90210',
+          description: 'A test business',
+          tier: 'free'
+        )
         expect(business).not_to be_valid
         expect(business.errors[:hostname]).to include("can't be blank")
       end
@@ -625,4 +707,139 @@ RSpec.describe Business, type: :model do
       end
     end
   end
+
+  describe 'domain health verification' do
+    let(:business) { create(:business, tier: 'premium', host_type: 'custom_domain', hostname: 'example.com') }
+    
+    describe '#mark_domain_health_status!' do
+      it 'sets domain health as verified with timestamp' do
+        freeze_time do
+          business.mark_domain_health_status!(true)
+          
+          business.reload
+          expect(business.domain_health_verified).to be true
+          expect(business.domain_health_checked_at).to eq(Time.current)
+        end
+      end
+
+      it 'sets domain health as unverified with timestamp' do
+        freeze_time do
+          business.update!(domain_health_verified: true)
+          
+          business.mark_domain_health_status!(false)
+          
+          business.reload
+          expect(business.domain_health_verified).to be false
+          expect(business.domain_health_checked_at).to eq(Time.current)
+        end
+      end
+
+      it 'handles optimistic locking conflicts gracefully' do
+        # Simulate a stale object error that persists
+        allow(business).to receive(:update!).and_raise(ActiveRecord::StaleObjectError.new(business, 'update'))
+        allow(business).to receive(:reload).and_return(business)
+        allow(business).to receive(:with_lock).and_yield
+        
+        # Should retry once: first call fails, reload, second call fails and raises
+        expect(business).to receive(:update!).twice
+        expect(business).to receive(:reload).once
+        
+        expect { business.mark_domain_health_status!(true) }.to raise_error(ActiveRecord::StaleObjectError)
+      end
+
+      it 'succeeds on retry after stale object error' do
+        # Simulate stale object error on first attempt, success on second
+        call_count = 0
+        allow(business).to receive(:update!) do
+          call_count += 1
+          if call_count == 1
+            raise ActiveRecord::StaleObjectError.new(business, 'update')
+          else
+            # Success on second attempt
+            true
+          end
+        end
+        allow(business).to receive(:reload).and_return(business)
+        allow(business).to receive(:with_lock).and_yield
+
+        freeze_time do
+          expect { business.mark_domain_health_status!(true) }.not_to raise_error
+          
+          # Should have been called twice (first failure, then success)
+          expect(call_count).to eq(2)
+        end
+      end
+    end
+
+    describe '#domain_health_stale?' do
+      it 'returns true when never checked' do
+        business.update!(domain_health_checked_at: nil)
+        expect(business.domain_health_stale?).to be true
+      end
+
+      it 'returns true when checked more than threshold ago' do
+        business.update!(domain_health_checked_at: 2.hours.ago)
+        expect(business.domain_health_stale?(1.hour)).to be true
+      end
+
+      it 'returns false when checked within threshold' do
+        business.update!(domain_health_checked_at: 30.minutes.ago)
+        expect(business.domain_health_stale?(1.hour)).to be false
+      end
+
+      it 'uses 1 hour as default threshold' do
+        business.update!(domain_health_checked_at: 2.hours.ago)
+        expect(business.domain_health_stale?).to be true
+        
+        business.update!(domain_health_checked_at: 30.minutes.ago)
+        expect(business.domain_health_stale?).to be false
+      end
+    end
+
+    describe '#custom_domain_allow?' do
+      let(:business) { create(:business, tier: 'premium', host_type: 'custom_domain', hostname: 'example.com', status: 'cname_active', render_domain_added: true) }
+      
+      context 'when all conditions are met' do
+        it 'returns true' do
+          business.update!(domain_health_verified: true)
+          expect(business.custom_domain_allow?).to be true
+        end
+      end
+
+      context 'when domain health is not verified' do
+        it 'returns false' do
+          business.update!(domain_health_verified: false)
+          expect(business.custom_domain_allow?).to be false
+        end
+      end
+
+      context 'when not premium tier' do
+        it 'returns false' do
+          business.update!(tier: 'free', domain_health_verified: true)
+          expect(business.custom_domain_allow?).to be false
+        end
+      end
+
+      context 'when not custom domain type' do
+        it 'returns false' do
+          business.update!(host_type: 'subdomain', domain_health_verified: true)
+          expect(business.custom_domain_allow?).to be false
+        end
+      end
+
+      context 'when CNAME not active' do
+        it 'returns false' do
+          business.update!(status: 'cname_pending', domain_health_verified: true)
+          expect(business.custom_domain_allow?).to be false
+        end
+      end
+
+      context 'when render domain not added' do
+        it 'returns false' do
+          business.update!(render_domain_added: false, domain_health_verified: true)
+          expect(business.custom_domain_allow?).to be false
+        end
+      end
+    end
+  end
 end 
\ No newline at end of file
diff --git a/spec/requests/admin/businesses_spec.rb b/spec/requests/admin/businesses_spec.rb
index 2f11d4c..671c726 100644
--- a/spec/requests/admin/businesses_spec.rb
+++ b/spec/requests/admin/businesses_spec.rb
@@ -88,7 +88,7 @@ RSpec.describe "Admin Businesses", type: :request, admin: true do # Renamed desc
       expect {
         post admin_businesses_path, params: valid_attributes
       }.to change(Business, :count).by(1)
-      expect(response).to redirect_to(admin_business_path(Business.last.hostname))
+      expect(response).to redirect_to(admin_business_path(Business.last.id))
       follow_redirect!
     end
   end
diff --git a/spec/requests/admin/custom_domain_member_actions_spec.rb b/spec/requests/admin/custom_domain_member_actions_spec.rb
new file mode 100644
index 0000000..0d97fe6
--- /dev/null
+++ b/spec/requests/admin/custom_domain_member_actions_spec.rb
@@ -0,0 +1,77 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe 'Admin Custom Domain Member Actions', type: :request do
+  let!(:admin_user) { create(:admin_user) }
+  let!(:business) do
+    create(
+      :business,
+      tier: 'premium',
+      host_type: 'custom_domain',
+      hostname: 'example.com'
+    )
+  end
+
+  before do
+    sign_in admin_user, scope: :admin_user
+  end
+
+  describe 'HTTP method restrictions' do
+    it 'disallows GET for start_domain_setup' do
+      get start_domain_setup_admin_business_path(business.id)
+      expect(response).to have_http_status(:not_found)
+    end
+
+    it 'disallows GET for restart_domain_monitoring' do
+      get restart_domain_monitoring_admin_business_path(business.id)
+      expect(response).to have_http_status(:not_found)
+    end
+
+    it 'disallows GET for force_activate_domain' do
+      get force_activate_domain_admin_business_path(business.id)
+      expect(response).to have_http_status(:not_found)
+    end
+
+    it 'disallows GET for disable_custom_domain' do
+      get disable_custom_domain_admin_business_path(business.id)
+      expect(response).to have_http_status(:not_found)
+    end
+  end
+
+  describe 'POST actions redirect to numeric-ID show path' do
+    it 'POST start_domain_setup redirects to /admin/businesses/:id' do
+      service = instance_double(CnameSetupService, start_setup!: { success: true, message: 'ok' })
+      allow(CnameSetupService).to receive(:new).and_return(service)
+
+      post start_domain_setup_admin_business_path(business.id)
+      expect(response).to redirect_to(admin_business_path(business.id))
+    end
+
+    it 'POST restart_domain_monitoring redirects to /admin/businesses/:id' do
+      service = instance_double(CnameSetupService, restart_monitoring!: { success: true, message: 'ok' })
+      allow(CnameSetupService).to receive(:new).and_return(service)
+
+      post restart_domain_monitoring_admin_business_path(business.id)
+      expect(response).to redirect_to(admin_business_path(business.id))
+    end
+
+    it 'POST force_activate_domain redirects to /admin/businesses/:id' do
+      service = instance_double(CnameSetupService, force_activate!: { success: true, message: 'ok' })
+      allow(CnameSetupService).to receive(:new).and_return(service)
+
+      post force_activate_domain_admin_business_path(business.id)
+      expect(response).to redirect_to(admin_business_path(business.id))
+    end
+
+    it 'POST disable_custom_domain redirects to /admin/businesses/:id' do
+      removal_service = instance_double(DomainRemovalService, remove_domain!: { success: true, message: 'removed' })
+      allow(DomainRemovalService).to receive(:new).and_return(removal_service)
+
+      post disable_custom_domain_admin_business_path(business.id)
+      expect(response).to redirect_to(admin_business_path(business.id))
+    end
+  end
+end
+
+
diff --git a/spec/requests/admin/domain_coverage_management_spec.rb b/spec/requests/admin/domain_coverage_management_spec.rb
index 8f930dd..e7bd430 100644
--- a/spec/requests/admin/domain_coverage_management_spec.rb
+++ b/spec/requests/admin/domain_coverage_management_spec.rb
@@ -127,7 +127,7 @@ RSpec.describe "Admin Domain Coverage Management", type: :request, admin: true d
         
         # Check redirect success instead of follow_redirect! to avoid issues
         expect(response).to have_http_status(:redirect)
-        expect(response).to redirect_to(admin_business_path(new_business))
+        expect(response).to redirect_to(admin_business_path(new_business.id))
       end
     end
 
@@ -152,7 +152,7 @@ RSpec.describe "Admin Domain Coverage Management", type: :request, admin: true d
         expect(premium_business.domain_coverage_notes).to eq('Updated coverage information')
         
         # Check redirect success instead of follow_redirect! to avoid issues
-        expect(response).to redirect_to(admin_business_path(premium_business))
+        expect(response).to redirect_to(admin_business_path(premium_business.id))
       end
     end
   end
diff --git a/spec/requests/admin/products_controller_spec.rb b/spec/requests/admin/products_controller_spec.rb
index 2d224ec..2e88977 100644
--- a/spec/requests/admin/products_controller_spec.rb
+++ b/spec/requests/admin/products_controller_spec.rb
@@ -60,7 +60,7 @@ RSpec.describe Admin::ProductsController, type: :request do
       it "returns an error when setting a non-existent image as primary" do
         put admin_product_path(product), params: { product: { images_attributes: [{ id: 999, primary: true }] } }
         
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to include("Image must exist")
       end
     end
@@ -70,7 +70,7 @@ RSpec.describe Admin::ProductsController, type: :request do
         image_ids = [image1.id, image2.id]
         put admin_product_path(product), params: { product: { images_attributes: image_ids.map.with_index { |id, index| { id: id, position: index } } } }
         
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to include("Image IDs are incomplete")
       end
 
@@ -84,7 +84,7 @@ RSpec.describe Admin::ProductsController, type: :request do
         image_ids = [image1.id, other_attachment.id, image2.id]
         put admin_product_path(product), params: { product: { images_attributes: image_ids.map.with_index { |id, index| { id: id, position: index } } } }
         
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to include("Image must belong to the product")
       end
 
@@ -92,7 +92,7 @@ RSpec.describe Admin::ProductsController, type: :request do
         image_ids = [image1.id, image2.id, image2.id]
         put admin_product_path(product), params: { product: { images_attributes: image_ids.map.with_index { |id, index| { id: id, position: index } } } }
         
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to include("Image IDs must be unique")
       end
     end
@@ -101,7 +101,7 @@ RSpec.describe Admin::ProductsController, type: :request do
       it "returns an error response" do
         put admin_product_path(product), params: { product: { name: '' } }
         
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to include("Name can't be blank")
       end
     end
diff --git a/spec/requests/admin/services_spec.rb b/spec/requests/admin/services_spec.rb
index fb28918..7265367 100644
--- a/spec/requests/admin/services_spec.rb
+++ b/spec/requests/admin/services_spec.rb
@@ -18,7 +18,7 @@ RSpec.describe "Admin::Services", type: :request do
 
       # Check for service with business and price
       expect(response.body).to include(service_with_business_and_price.name)
-      expect(response.body).to include(admin_business_path(business.hostname)) # Check link to business using hostname
+      expect(response.body).to include(admin_business_path(business.id)) # Check link to business using ID
       expect(response.body).to include("$100.00") # Check formatted price
     end
 
diff --git a/spec/requests/admin/staff_members_spec.rb b/spec/requests/admin/staff_members_spec.rb
index 69db326..32342be 100644
--- a/spec/requests/admin/staff_members_spec.rb
+++ b/spec/requests/admin/staff_members_spec.rb
@@ -46,7 +46,7 @@ RSpec.describe "Admin StaffMembers", type: :request, admin: true do
 
       # Check regular staff 
       expect(body).to include(staff_member.name)
-      expect(body).to match(/<a[^>]*href="\/admin\/businesses\/#{Regexp.escape(business.hostname)}"[^>]*>#{Regexp.escape(business.name)}<\/a>/)
+      expect(body).to match(/<a[^>]*href="\/admin\/businesses\/#{business.id}"[^>]*>#{Regexp.escape(business.name)}<\/a>/)
       expect(body).to include("5 days, 0 exceptions") # Default factory has Mon-Fri (5 days)
       
       # Check staff with empty availability
diff --git a/spec/requests/admin_domain_status_spec.rb b/spec/requests/admin_domain_status_spec.rb
new file mode 100644
index 0000000..b99caad
--- /dev/null
+++ b/spec/requests/admin_domain_status_spec.rb
@@ -0,0 +1,104 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe 'Admin Domain Status API', type: :request do
+  let!(:admin_user) { create(:admin_user) }
+  let!(:business) do
+    create(:business,
+      tier: 'premium',
+      host_type: 'custom_domain',
+      hostname: 'example.com',
+      status: 'cname_monitoring',
+      cname_monitoring_active: true,
+      cname_check_attempts: 3
+    )
+  end
+
+  before do
+    sign_in admin_user, scope: :admin_user
+  end
+
+  describe 'GET /admin/businesses/:id/domain_status' do
+    context 'with monitoring active business' do
+      let(:dns_result) do
+        {
+          verified: true,
+          target: 'bizblasts.onrender.com',
+          checked_at: Time.current,
+          error: nil
+        }
+      end
+
+      before do
+        allow(CnameDnsChecker).to receive(:new).and_return(
+          instance_double(CnameDnsChecker, verify_cname: dns_result)
+        )
+      end
+
+      it 'returns business status with live DNS check' do
+        get "/admin/businesses/#{business.id}/domain_status"
+
+        expect(response).to have_http_status(:ok)
+        
+        json_response = JSON.parse(response.body)
+        
+        expect(json_response['business_id']).to eq(business.id)
+        expect(json_response['domain']).to eq('example.com')
+        expect(json_response['status']).to eq('cname_monitoring')
+        expect(json_response['monitoring_active']).to be true
+        expect(json_response['check_attempts']).to eq(3)
+        
+        expect(json_response['dns_check']).to be_present
+        expect(json_response['dns_check']['verified']).to be true
+        expect(json_response['dns_check']['target']).to eq('bizblasts.onrender.com')
+      end
+    end
+
+    context 'with inactive monitoring business' do
+      before do
+        business.update!(cname_monitoring_active: false, status: 'cname_active')
+      end
+
+      it 'returns business status without DNS check' do
+        get "/admin/businesses/#{business.id}/domain_status"
+
+        expect(response).to have_http_status(:ok)
+        
+        json_response = JSON.parse(response.body)
+        
+        expect(json_response['business_id']).to eq(business.id)
+        expect(json_response['status']).to eq('cname_active')
+        expect(json_response['monitoring_active']).to be false
+        expect(json_response['dns_check']).to be_nil
+      end
+    end
+
+    context 'with DNS check error' do
+      before do
+        allow(CnameDnsChecker).to receive(:new).and_raise(StandardError.new('DNS resolution failed'))
+      end
+
+      it 'returns error response' do
+        get "/admin/businesses/#{business.id}/domain_status"
+
+        expect(response).to have_http_status(:internal_server_error)
+        
+        json_response = JSON.parse(response.body)
+        expect(json_response['error']).to eq('DNS resolution failed')
+      end
+    end
+
+    context 'without admin authentication' do
+      before do
+        sign_out admin_user
+      end
+
+      it 'redirects to login' do
+        get "/admin/businesses/#{business.id}/domain_status"
+
+        expect(response).to have_http_status(:redirect)
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/requests/api/v1/businesses_spec.rb b/spec/requests/api/v1/businesses_spec.rb
index 4de16c9..eb6a7b1 100644
--- a/spec/requests/api/v1/businesses_spec.rb
+++ b/spec/requests/api/v1/businesses_spec.rb
@@ -507,7 +507,11 @@ RSpec.describe Api::V1::BusinessesController, type: :request do
              hostname: 'customdomain.com',
              host_type: 'custom_domain',
              industry: 'landscaping',
-             active: true)
+             active: true,
+             tier: 'premium',
+             status: 'cname_active',
+             render_domain_added: true,
+             domain_health_verified: true)
     end
 
     let!(:subdomain_business) do
diff --git a/spec/requests/business/registrations_spec.rb b/spec/requests/business/registrations_spec.rb
index a1a5fdb..500a638 100644
--- a/spec/requests/business/registrations_spec.rb
+++ b/spec/requests/business/registrations_spec.rb
@@ -47,8 +47,8 @@ RSpec.describe "Business::Registrations", type: :request do
       }
     end
 
-    let(:free_tier_attrs) { { tier: 'free', hostname: 'test-biz' } }
-    let(:standard_tier_subdomain_attrs) { { tier: 'standard', hostname: 'std-biz' } }
+    let(:free_tier_attrs) { { tier: 'free', subdomain: 'test-biz' } }
+    let(:standard_tier_subdomain_attrs) { { tier: 'standard', subdomain: 'std-biz' } }
     let(:standard_tier_domain_attrs) { { tier: 'standard', hostname: 'std-biz.com' } }
     let(:premium_tier_domain_attrs) { { tier: 'premium', hostname: 'premium-biz.com' } }
     let(:premium_tier_both_attrs) { { tier: 'premium', hostname: 'premium-biz.com' } }
@@ -192,10 +192,6 @@ RSpec.describe "Business::Registrations", type: :request do
       include_examples "successful business sign-up with Stripe integration", :standard_tier_subdomain_attrs, 'standard', 'std-biz', 'subdomain'
     end
 
-    context "with valid parameters (Standard Tier - Domain)" do
-      include_examples "successful business sign-up with Stripe integration", :standard_tier_domain_attrs, 'standard', 'std-biz.com', 'custom_domain'
-    end
-
     context "with valid parameters (Premium Tier - Domain)" do
       include_examples "successful business sign-up with Stripe integration", :premium_tier_domain_attrs, 'premium', 'premium-biz.com', 'custom_domain'
     end
@@ -225,7 +221,7 @@ RSpec.describe "Business::Registrations", type: :request do
         params = build_params(free_tier_attrs)
         params[:user][:business_attributes][:name] = '' # Invalid business name
         post business_registration_path, params: params
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to match(/id="error_explanation".*Name can&#39;t be blank/m)
       end
 
@@ -241,35 +237,39 @@ RSpec.describe "Business::Registrations", type: :request do
     end
 
     context "when tier requires subdomain host_type (Free)" do
-      it "fails if hostname is missing in params" do
+      it "fails if subdomain is missing in params" do
         params = build_params(free_tier_attrs)
-        params[:user][:business_attributes][:hostname] = ''
+        params[:user][:business_attributes].delete(:subdomain)
         expect {
           post business_registration_path, params: params
         }.not_to change { [User.count, Business.count] }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to match(/id="error_explanation".*Hostname can&#39;t be blank/m)
       end
       
-      it "fails if a custom domain hostname is provided" do
+      it "ignores custom domain hostname for free tier and creates with subdomain" do
         params = build_params(free_tier_attrs)
         params[:user][:business_attributes][:hostname] = 'my-domain.com'
         expect {
           post business_registration_path, params: params
-        }.not_to change { [User.count, Business.count] }
-        expect(response).to have_http_status(:unprocessable_entity)
-        expect(response.body).to match(/id="error_explanation".*Host type must be &#39;subdomain&#39; for the Free tier/m)
+        }.to change { [User.count, Business.count] }.by([1, 1])
+        expect(response).to have_http_status(:see_other)
+        
+        # Should ignore the hostname and create with subdomain host_type
+        business = Business.last
+        expect(business.host_type).to eq('subdomain')
+        expect(business.hostname).to eq('test-biz') # From free_tier_attrs[:subdomain]
       end
     end
 
     context "when tier allows either host_type (Standard/Premium)" do
-      it "fails if hostname is missing in params" do
+      it "fails if subdomain is missing in params" do
         params = build_params(standard_tier_subdomain_attrs)
-        params[:user][:business_attributes].delete(:hostname)
+        params[:user][:business_attributes].delete(:subdomain)
         expect {
           post business_registration_path, params: params
         }.not_to change { [User.count, Business.count] }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to match(/id="error_explanation".*Hostname can&#39;t be blank/m)
       end
     end
@@ -287,7 +287,7 @@ RSpec.describe "Business::Registrations", type: :request do
         expect {
           post business_registration_path, params: params
         }.not_to change { [User.count, Business.count] }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to match(/id="error_explanation".*Email has already been taken/m)
         expect(response.body).not_to match(/Email has already been taken by another business owner or staff member/m)
       end
@@ -308,27 +308,28 @@ RSpec.describe "Business::Registrations", type: :request do
           post business_registration_path, params: params
         }.to_not change(Business, :count)
 
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to include("Email has already been taken")
       end
 
       it "fails if hostname (subdomain type) is taken" do
         params = build_params(standard_tier_subdomain_attrs)
-        params[:user][:business_attributes][:hostname] = 'taken-sub'
+        params[:user][:business_attributes][:subdomain] = 'taken-sub'
         expect {
           post business_registration_path, params: params
         }.not_to change { [User.count, Business.count] }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to match(/id="error_explanation".*Hostname has already been taken/m)
       end
 
       it "fails if hostname (custom domain type) is taken" do
-        params = build_params(standard_tier_domain_attrs)
+        # Use premium tier attributes because custom domains are only allowed on premium tier
+        params = build_params(premium_tier_domain_attrs)
         params[:user][:business_attributes][:hostname] = 'taken.com'
         expect {
           post business_registration_path, params: params
         }.not_to change { [User.count, Business.count] }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to match(/id="error_explanation".*Hostname has already been taken/m)
       end
     end
diff --git a/spec/requests/business_manager/promotions_spec.rb b/spec/requests/business_manager/promotions_spec.rb
index 350055d..4f14f8d 100644
--- a/spec/requests/business_manager/promotions_spec.rb
+++ b/spec/requests/business_manager/promotions_spec.rb
@@ -165,7 +165,7 @@ RSpec.describe 'BusinessManager::Promotions', type: :request do
           post '/manage/promotions', params: invalid_params, headers: {}, env: { 'HTTP_HOST' => host_params[:host] }
         }.not_to change(Promotion, :count)
         
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
 
       it 'displays validation errors' do
@@ -293,7 +293,7 @@ RSpec.describe 'BusinessManager::Promotions', type: :request do
       it 'does not update with invalid data' do
         patch "/manage/promotions/#{promotion.id}", params: invalid_update_params, headers: {}, env: { 'HTTP_HOST' => host_params[:host] }
         
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         promotion.reload
         expect(promotion.name).to eq('Old Name')
       end
diff --git a/spec/requests/business_manager/services_spec.rb b/spec/requests/business_manager/services_spec.rb
index 2a4d131..6e6dc5d 100644
--- a/spec/requests/business_manager/services_spec.rb
+++ b/spec/requests/business_manager/services_spec.rb
@@ -88,7 +88,7 @@ RSpec.describe "/manage/services", type: :request do
       it "renders a response with 422 status (i.e. to display the 'new' template)" do
         # post url_for([:business_manager, :services]), params: { service: invalid_attributes }, headers: {}, env: { 'HTTP_HOST' => host_params[:host] } # Reverted
         post "/manage/services", params: { service: invalid_attributes }, headers: {}, env: { 'HTTP_HOST' => host_params[:host] }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
     end
   end
@@ -120,7 +120,7 @@ RSpec.describe "/manage/services", type: :request do
       it "renders a response with 422 status (i.e. to display the 'edit' template)" do
         # patch url_for([:business_manager, service]), params: { service: invalid_attributes }, headers: {}, env: { 'HTTP_HOST' => host_params[:host] } # Reverted
         patch "/manage/services/#{service.id}", params: { service: invalid_attributes }, headers: {}, env: { 'HTTP_HOST' => host_params[:host] }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
     end
   end
diff --git a/spec/requests/business_manager/settings/account_deletion_spec.rb b/spec/requests/business_manager/settings/account_deletion_spec.rb
index f483f66..1596153 100644
--- a/spec/requests/business_manager/settings/account_deletion_spec.rb
+++ b/spec/requests/business_manager/settings/account_deletion_spec.rb
@@ -106,7 +106,7 @@ RSpec.describe "BusinessManager::Settings Account Deletion", type: :request do
           }
         }.not_to change(User, :count)
 
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(flash[:alert]).to include('sole manager')
       end
     end
@@ -128,7 +128,7 @@ RSpec.describe "BusinessManager::Settings Account Deletion", type: :request do
           }
         }.not_to change(User, :count)
 
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(flash[:alert]).to include('sole user')
       end
 
@@ -166,7 +166,7 @@ RSpec.describe "BusinessManager::Settings Account Deletion", type: :request do
           }
         }.not_to change(User, :count)
 
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(flash[:alert]).to include('Current password is incorrect')
       end
     end
diff --git a/spec/requests/business_manager/settings/booking_policies_spec.rb b/spec/requests/business_manager/settings/booking_policies_spec.rb
index c50f987..90b5463 100644
--- a/spec/requests/business_manager/settings/booking_policies_spec.rb
+++ b/spec/requests/business_manager/settings/booking_policies_spec.rb
@@ -111,7 +111,7 @@ RSpec.describe "BusinessManager::Settings::BookingPolicies", type: :request do
           patch business_manager_settings_booking_policy_path, params: { booking_policy: invalid_attributes }
           @booking_policy.reload
           expect(@booking_policy.cancellation_window_mins).to eq(original_cancellation_window)
-          expect(response).to have_http_status(:unprocessable_entity)
+          expect(response).to have_http_status(:unprocessable_content)
           expect(response).to render_template(:edit)
         end
       end
@@ -134,7 +134,7 @@ RSpec.describe "BusinessManager::Settings::BookingPolicies", type: :request do
           patch business_manager_settings_booking_policy_path, params: { 
             booking_policy: duration_attributes.merge(min_duration_mins: 120, max_duration_mins: 60) 
           }
-          expect(response).to have_http_status(:found).or have_http_status(:unprocessable_entity)
+          expect(response).to have_http_status(:found).or have_http_status(:unprocessable_content)
         end
       end
     end
diff --git a/spec/requests/business_manager/settings/business_spec.rb b/spec/requests/business_manager/settings/business_spec.rb
index 4ab78ab..949bb63 100644
--- a/spec/requests/business_manager/settings/business_spec.rb
+++ b/spec/requests/business_manager/settings/business_spec.rb
@@ -123,7 +123,7 @@ RSpec.describe "Settings::BusinessController", type: :request do
       it "renders the edit template with unprocessable_entity status and errors" do
         patch business_manager_settings_business_path, params: { business: invalid_attributes }
         expect(response).to render_template(:edit)
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to include("Name can&#39;t be blank") # From the custom error display format (HTML encoded)
       end
     end
diff --git a/spec/requests/business_manager/settings/locations_request_spec.rb b/spec/requests/business_manager/settings/locations_request_spec.rb
index fde326d..d6efbe9 100644
--- a/spec/requests/business_manager/settings/locations_request_spec.rb
+++ b/spec/requests/business_manager/settings/locations_request_spec.rb
@@ -73,7 +73,7 @@ RSpec.describe "BusinessManager::Settings::Locations", type: :request do
 
       it "renders a unprocessable_entity response" do
         post business_manager_settings_locations_path, params: { location: invalid_attributes }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
     end
   end
@@ -112,7 +112,7 @@ RSpec.describe "BusinessManager::Settings::Locations", type: :request do
 
       it "renders a unprocessable_entity response" do
         patch business_manager_settings_location_path(location), params: { location: invalid_attributes }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
     end
 
@@ -128,23 +128,23 @@ RSpec.describe "BusinessManager::Settings::Locations", type: :request do
     context "with missing required fields" do
       it "does not update location if address is blank" do
         patch business_manager_settings_location_path(location), params: { location: { address: "" } }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
       it "does not update location if city is blank" do
         patch business_manager_settings_location_path(location), params: { location: { city: "" } }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
       it "does not update location if state is blank" do
         patch business_manager_settings_location_path(location), params: { location: { state: "" } }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
       it "does not update location if zip is blank" do
         patch business_manager_settings_location_path(location), params: { location: { zip: "" } }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
       it "does not update location if hours is blank" do
         patch business_manager_settings_location_path(location), params: { location: { hours: "" } }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
     end
   end
diff --git a/spec/requests/business_manager/settings/notifications_request_spec.rb b/spec/requests/business_manager/settings/notifications_request_spec.rb
index 1d33d5a..d8f4500 100644
--- a/spec/requests/business_manager/settings/notifications_request_spec.rb
+++ b/spec/requests/business_manager/settings/notifications_request_spec.rb
@@ -70,7 +70,7 @@ RSpec.describe "BusinessManager::Settings::Notifications", type: :request do
 
       it "renders a unprocessable_entity response" do
         post business_manager_settings_notifications_path, params: { notification_template: invalid_attributes }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
     end
   end
@@ -103,7 +103,7 @@ RSpec.describe "BusinessManager::Settings::Notifications", type: :request do
 
       it "renders a unprocessable_entity response" do
         patch business_manager_settings_notification_path(notification_template), params: { notification_template: invalid_attributes }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
     end
   end
@@ -170,13 +170,13 @@ RSpec.describe "BusinessManager::Settings::Notifications", type: :request do
       expect {
         post business_manager_settings_notifications_path, params: { notification_template: attributes_for(:notification_template, subject: '', business_id: business.id) }
       }.to change(NotificationTemplate, :count).by(0)
-      expect(response).to have_http_status(:unprocessable_entity)
+      expect(response).to have_http_status(:unprocessable_content)
     end
     it "does not create notification_template if body is blank" do
       expect {
         post business_manager_settings_notifications_path, params: { notification_template: attributes_for(:notification_template, body: '', business_id: business.id) }
       }.to change(NotificationTemplate, :count).by(0)
-      expect(response).to have_http_status(:unprocessable_entity)
+      expect(response).to have_http_status(:unprocessable_content)
     end
   end
 end 
\ No newline at end of file
diff --git a/spec/requests/business_manager/settings/subscriptions_request_spec.rb b/spec/requests/business_manager/settings/subscriptions_request_spec.rb
index d48cc92..f4d3cd0 100644
--- a/spec/requests/business_manager/settings/subscriptions_request_spec.rb
+++ b/spec/requests/business_manager/settings/subscriptions_request_spec.rb
@@ -273,7 +273,7 @@ RSpec.describe "BusinessManager::Settings::Subscriptions", type: :request do
       let(:stripe_sub_object) do # Mocked Stripe::Subscription object
         Stripe::Subscription.construct_from({
           id: stripe_subscription_id,
-          items: { data: [{ price: { lookup_key: 'basic_plan', product: 'prod_basic' } }] },
+          items: { data: [{ price: { id: 'price_basic_plan', lookup_key: 'basic_plan', product: 'prod_basic' } }] },
           status: 'active',
           current_period_end: Time.now.to_i + (30 * 24 * 60 * 60),
           customer: business.stripe_customer_id
diff --git a/spec/requests/business_manager/settings/subscriptions_spec.rb b/spec/requests/business_manager/settings/subscriptions_spec.rb
index 9ba66a6..78fe4d6 100644
--- a/spec/requests/business_manager/settings/subscriptions_spec.rb
+++ b/spec/requests/business_manager/settings/subscriptions_spec.rb
@@ -98,6 +98,7 @@ RSpec.describe "BusinessManager::Settings::Subscriptions", type: :request do
         )
       end
       let!(:premium_manager_with_coverage) { create(:user, :manager, business: premium_business_with_coverage) }
+      let!(:coverage_subscription) { create(:subscription, business: premium_business_with_coverage, plan_name: 'premium', status: 'active') }
       let(:coverage_host_params) { { host: "#{premium_business_with_coverage.hostname}.lvh.me" } }
 
       before do
diff --git a/spec/requests/business_manager/staff_members_spec.rb b/spec/requests/business_manager/staff_members_spec.rb
index d6aeb12..a487842 100644
--- a/spec/requests/business_manager/staff_members_spec.rb
+++ b/spec/requests/business_manager/staff_members_spec.rb
@@ -105,7 +105,7 @@ RSpec.describe "Business Manager StaffMembers", type: :request do
 
       it "renders a response with 422 status" do
         post business_manager_staff_members_path, params: { staff_member: invalid_attributes }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
     end
   end
@@ -137,7 +137,7 @@ RSpec.describe "Business Manager StaffMembers", type: :request do
 
       it "renders a response with 422 status" do
         patch business_manager_staff_member_path(staff_member), params: { staff_member: invalid_attributes }
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
       end
     end
   end
@@ -189,7 +189,7 @@ RSpec.describe "Business Manager StaffMembers", type: :request do
     it "renders a response with 422 status if invalid" do
       allow_any_instance_of(StaffMember).to receive(:update).and_return(false)
       patch manage_availability_business_manager_staff_member_path(staff_member), params: { staff_member: { availability: availability_params } }
-      expect(response).to have_http_status(:unprocessable_entity).or have_http_status(:ok)
+      expect(response).to have_http_status(:unprocessable_content).or have_http_status(:ok)
     end
   end
 end 
\ No newline at end of file
diff --git a/spec/requests/client/registrations_spec.rb b/spec/requests/client/registrations_spec.rb
index 540f31a..331e654 100644
--- a/spec/requests/client/registrations_spec.rb
+++ b/spec/requests/client/registrations_spec.rb
@@ -63,7 +63,7 @@ RSpec.describe "Client::Registrations", type: :request do
 
       it "re-renders the 'new' template with errors" do
         post client_registration_path, params: invalid_attributes
-        expect(response).to have_http_status(:unprocessable_entity) 
+        expect(response).to have_http_status(:unprocessable_content) 
         expect(response.body).to include("Email is invalid") # Check for specific error message
       end
     end
@@ -95,7 +95,7 @@ RSpec.describe "Client::Registrations", type: :request do
 
       it "re-renders the new template with the email taken error" do
         post client_registration_path, params: valid_attributes
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(response.body).to include("Email has already been taken")
       end
     end
diff --git a/spec/requests/client/settings_deletion_spec.rb b/spec/requests/client/settings_deletion_spec.rb
index 27f55f6..ae3394e 100644
--- a/spec/requests/client/settings_deletion_spec.rb
+++ b/spec/requests/client/settings_deletion_spec.rb
@@ -54,7 +54,7 @@ RSpec.describe "Client::Settings Account Deletion", type: :request do
           }
         }.not_to change(User, :count)
 
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(flash[:alert]).to include('Current password is incorrect')
       end
     end
@@ -69,7 +69,7 @@ RSpec.describe "Client::Settings Account Deletion", type: :request do
           }
         }.not_to change(User, :count)
 
-        expect(response).to have_http_status(:unprocessable_entity)
+        expect(response).to have_http_status(:unprocessable_content)
         expect(flash[:alert]).to include('must type DELETE')
       end
     end
diff --git a/spec/requests/public_payments_spec.rb b/spec/requests/public_payments_spec.rb
index 18fd456..002c8c0 100644
--- a/spec/requests/public_payments_spec.rb
+++ b/spec/requests/public_payments_spec.rb
@@ -23,12 +23,12 @@ RSpec.describe 'Public Payments', type: :request do
       end
 
       it 'redirects to Stripe Checkout for invoice payments' do
-        get new_tenant_payment_path, params: { invoice_id: invoice.id }
+        get new_payment_path, params: { invoice_id: invoice.id }
         expect(response).to redirect_to('https://checkout.stripe.com/pay/cs_test_123')
         expect(StripeService).to have_received(:create_payment_checkout_session).with(
           invoice: invoice,
-          success_url: tenant_transaction_url(invoice, type: 'invoice', payment_success: true, host: host_for(business)),
-          cancel_url: tenant_transaction_url(invoice, type: 'invoice', payment_cancelled: true, host: host_for(business))
+          success_url: transaction_url(invoice, type: 'invoice', payment_success: true, host: host_for(business)),
+          cancel_url: transaction_url(invoice, type: 'invoice', payment_cancelled: true, host: host_for(business))
         )
       end
 
@@ -39,8 +39,8 @@ RSpec.describe 'Public Payments', type: :request do
         end
 
         it 'redirects to invoice with error message' do
-          get new_tenant_payment_path, params: { invoice_id: invoice.id }
-          expect(response).to redirect_to(tenant_transaction_path(invoice, type: 'invoice'))
+          get new_payment_path, params: { invoice_id: invoice.id }
+          expect(response).to redirect_to(transaction_path(invoice, type: 'invoice'))
           follow_redirect!
           expect(response).to have_http_status(:ok)
           expect(response.body).to include('This invoice amount is too small for online payment')
@@ -54,8 +54,8 @@ RSpec.describe 'Public Payments', type: :request do
         end
 
         it 'redirects to invoice with error message' do
-          get new_tenant_payment_path, params: { invoice_id: invoice.id }
-          expect(response).to redirect_to(tenant_transaction_path(invoice, type: 'invoice'))
+          get new_payment_path, params: { invoice_id: invoice.id }
+          expect(response).to redirect_to(transaction_path(invoice, type: 'invoice'))
           follow_redirect!
           expect(response).to have_http_status(:ok)
           expect(response.body).to include('Could not connect to Stripe')
@@ -65,8 +65,8 @@ RSpec.describe 'Public Payments', type: :request do
 
     describe 'POST /payments' do
       it 'redirects to the transaction with message about using payment link' do
-        post tenant_payments_path, params: { invoice_id: invoice.id }
-        expect(response).to redirect_to(tenant_transaction_path(invoice, type: 'invoice'))
+        post payments_path, params: { invoice_id: invoice.id }
+        expect(response).to redirect_to(transaction_path(invoice, type: 'invoice'))
         follow_redirect!
         expect(response).to have_http_status(:ok)
         expect(response.body).to include('Please use the payment link to complete your payment')
@@ -84,7 +84,7 @@ RSpec.describe 'Public Payments', type: :request do
       end
 
       it 'redirects to Stripe Checkout for guest invoice payments' do
-        get new_tenant_payment_path, params: { invoice_id: invoice.id }
+        get new_payment_path, params: { invoice_id: invoice.id }
         expect(response).to redirect_to('https://checkout.stripe.com/pay/cs_guest_456')
         expect(StripeService).to have_received(:create_payment_checkout_session).with(
           invoice: invoice,
@@ -100,7 +100,7 @@ RSpec.describe 'Public Payments', type: :request do
         end
 
         it 'redirects to invoice with error message' do
-          get new_tenant_payment_path, params: { invoice_id: invoice.id }
+          get new_payment_path, params: { invoice_id: invoice.id }
           expect(response).to redirect_to(tenant_invoice_path(invoice, token: invoice.guest_access_token))
           follow_redirect!
           expect(response).to have_http_status(:ok)
@@ -115,7 +115,7 @@ RSpec.describe 'Public Payments', type: :request do
         end
 
         it 'redirects to invoice with error message' do
-          get new_tenant_payment_path, params: { invoice_id: invoice.id }
+          get new_payment_path, params: { invoice_id: invoice.id }
           expect(response).to redirect_to(tenant_invoice_path(invoice, token: invoice.guest_access_token))
           follow_redirect!
           expect(response).to have_http_status(:ok)
@@ -126,7 +126,7 @@ RSpec.describe 'Public Payments', type: :request do
 
     describe 'POST /payments' do
       it 'redirects to the invoice with message about using payment link' do
-        post tenant_payments_path, params: { invoice_id: invoice.id }
+        post payments_path, params: { invoice_id: invoice.id }
         expect(response).to redirect_to(tenant_invoice_path(invoice, token: invoice.guest_access_token))
         follow_redirect!
         expect(response).to have_http_status(:ok)
diff --git a/spec/requests/transactions_spec.rb b/spec/requests/transactions_spec.rb
index b9fbf26..5256869 100644
--- a/spec/requests/transactions_spec.rb
+++ b/spec/requests/transactions_spec.rb
@@ -18,7 +18,7 @@ RSpec.describe 'Transactions', type: :request do
     before { sign_in user }
 
     it 'displays invoice details with payment button for unpaid invoices' do
-      get tenant_transaction_path(invoice, type: 'invoice')
+      get transaction_path(invoice, type: 'invoice')
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include(invoice.invoice_number)
@@ -30,7 +30,7 @@ RSpec.describe 'Transactions', type: :request do
     it 'displays paid status for paid invoices' do
       invoice.update!(status: :paid)
       
-      get tenant_transaction_path(invoice, type: 'invoice')
+      get transaction_path(invoice, type: 'invoice')
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include('This invoice has been paid in full')
@@ -38,7 +38,7 @@ RSpec.describe 'Transactions', type: :request do
     end
 
     it 'displays payment success message when redirected from successful payment' do
-      get tenant_transaction_path(invoice, type: 'invoice', payment_success: true)
+      get transaction_path(invoice, type: 'invoice', payment_success: true)
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include('Payment Successful!')
@@ -46,7 +46,7 @@ RSpec.describe 'Transactions', type: :request do
     end
 
     it 'displays payment cancelled message when redirected from cancelled payment' do
-      get tenant_transaction_path(invoice, type: 'invoice', payment_cancelled: true)
+      get transaction_path(invoice, type: 'invoice', payment_cancelled: true)
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include('Payment Cancelled')
@@ -63,7 +63,7 @@ RSpec.describe 'Transactions', type: :request do
         paid_at: 1.day.ago
       )
       
-      get tenant_transaction_path(invoice, type: 'invoice')
+      get transaction_path(invoice, type: 'invoice')
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include('Payment History')
@@ -74,7 +74,7 @@ RSpec.describe 'Transactions', type: :request do
 
   describe 'GET /transactions/:id (invoice) - Guest Users' do
     it 'displays invoice details with payment button when valid token provided' do
-      get tenant_transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token)
+      get transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token)
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include(invoice.invoice_number)
@@ -86,7 +86,7 @@ RSpec.describe 'Transactions', type: :request do
     it 'displays paid status for paid invoices with valid token' do
       invoice.update!(status: :paid)
       
-      get tenant_transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token)
+      get transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token)
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include('This invoice has been paid in full')
@@ -94,7 +94,7 @@ RSpec.describe 'Transactions', type: :request do
     end
 
     it 'displays payment success message for guest users' do
-      get tenant_transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token, payment_success: true)
+      get transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token, payment_success: true)
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include('Payment Successful!')
@@ -102,7 +102,7 @@ RSpec.describe 'Transactions', type: :request do
     end
 
     it 'displays payment cancelled message for guest users' do
-      get tenant_transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token, payment_cancelled: true)
+      get transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token, payment_cancelled: true)
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include('Payment Cancelled')
@@ -110,15 +110,21 @@ RSpec.describe 'Transactions', type: :request do
     end
 
     it 'redirects to login when no token provided' do
-      get tenant_transaction_path(invoice, type: 'invoice')
-      
-      expect(response).to redirect_to(new_user_session_path)
-      follow_redirect!
+      get transaction_path(invoice, type: 'invoice')
+
+      # The first response should be a redirect (302/303) – eventually we land
+      # on the login page that lives on the main domain after the cross-domain
+      # auth redirect. Follow redirects until we reach a non-redirect response.
+      while response.redirect?
+        follow_redirect!
+      end
+
+      expect(response).to have_http_status(:ok)
       expect(response.body).to include('Please log in to view this transaction')
     end
 
     it 'returns 404 when invalid token provided' do
-      get tenant_transaction_path(invoice, type: 'invoice', token: 'invalid_token')
+      get transaction_path(invoice, type: 'invoice', token: 'invalid_token')
       expect(response).to have_http_status(:not_found)
     end
 
@@ -132,7 +138,7 @@ RSpec.describe 'Transactions', type: :request do
         paid_at: 1.day.ago
       )
       
-      get tenant_transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token)
+      get transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token)
       
       expect(response).to have_http_status(:ok)
       expect(response.body).to include('Payment History')
@@ -148,7 +154,7 @@ RSpec.describe 'Transactions', type: :request do
     let!(:order_invoice) { create(:invoice, business: business, tenant_customer: tenant_customer, order: order) }
 
     it 'displays invoices in the transactions list' do
-      get tenant_transactions_path(filter: 'invoices')
+      get transactions_path(filter: 'invoices')
       
       expect(response).to have_http_status(:ok)
       # Check for any invoice number pattern instead of specific numbers
@@ -157,7 +163,7 @@ RSpec.describe 'Transactions', type: :request do
     end
 
     it 'displays both orders and invoices when filter is both' do
-      get tenant_transactions_path(filter: 'both')
+      get transactions_path(filter: 'both')
       
       expect(response).to have_http_status(:ok)
       # Check for invoice and order patterns
@@ -177,17 +183,17 @@ RSpec.describe 'Transactions', type: :request do
 
       it 'redirects to Stripe checkout when payment button is clicked' do
         # First view the invoice in transactions
-        get tenant_transaction_path(invoice, type: 'invoice')
+        get transaction_path(invoice, type: 'invoice')
         expect(response.body).to include("Pay #{ActionController::Base.helpers.number_to_currency(invoice.balance_due)}")
         
         # Then click the payment link (simulate by making the payment request)
-        get new_tenant_payment_path(invoice_id: invoice.id)
+        get new_payment_path(invoice_id: invoice.id)
         
         expect(response).to redirect_to('https://checkout.stripe.com/pay/cs_test_123')
         expect(StripeService).to have_received(:create_payment_checkout_session).with(
           invoice: invoice,
-          success_url: tenant_transaction_url(invoice, type: 'invoice', payment_success: true, host: host_for(business)),
-          cancel_url: tenant_transaction_url(invoice, type: 'invoice', payment_cancelled: true, host: host_for(business))
+          success_url: transaction_url(invoice, type: 'invoice', payment_success: true, host: host_for(business)),
+          cancel_url: transaction_url(invoice, type: 'invoice', payment_cancelled: true, host: host_for(business))
         )
       end
 
@@ -195,9 +201,9 @@ RSpec.describe 'Transactions', type: :request do
         allow(StripeService).to receive(:create_payment_checkout_session)
           .and_raise(ArgumentError, "Payment amount must be at least $0.50 USD")
 
-        get new_tenant_payment_path(invoice_id: invoice.id)
+        get new_payment_path(invoice_id: invoice.id)
         
-        expect(response).to redirect_to(tenant_transaction_path(invoice, type: 'invoice'))
+        expect(response).to redirect_to(transaction_path(invoice, type: 'invoice'))
         follow_redirect!
         expect(response.body).to include('This invoice amount is too small for online payment')
       end
@@ -206,9 +212,9 @@ RSpec.describe 'Transactions', type: :request do
         allow(StripeService).to receive(:create_payment_checkout_session)
           .and_raise(Stripe::StripeError.new('Stripe connection error'))
 
-        get new_tenant_payment_path(invoice_id: invoice.id)
+        get new_payment_path(invoice_id: invoice.id)
         
-        expect(response).to redirect_to(tenant_transaction_path(invoice, type: 'invoice'))
+        expect(response).to redirect_to(transaction_path(invoice, type: 'invoice'))
         follow_redirect!
         expect(response.body).to include('Could not connect to Stripe')
       end
@@ -223,11 +229,11 @@ RSpec.describe 'Transactions', type: :request do
 
       it 'redirects to Stripe checkout for guest users with valid token' do
         # First view the invoice in transactions as guest
-        get tenant_transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token)
+        get transaction_path(invoice, type: 'invoice', token: invoice.guest_access_token)
         expect(response.body).to include("Pay #{ActionController::Base.helpers.number_to_currency(invoice.balance_due)}")
         
         # Then click the payment link (simulate by making the payment request)
-        get new_tenant_payment_path(invoice_id: invoice.id)
+        get new_payment_path(invoice_id: invoice.id)
         
         expect(response).to redirect_to('https://checkout.stripe.com/pay/cs_guest_123')
         expect(StripeService).to have_received(:create_payment_checkout_session).with(
diff --git a/spec/services/cname_dns_checker_spec.rb b/spec/services/cname_dns_checker_spec.rb
new file mode 100644
index 0000000..cc3f17d
--- /dev/null
+++ b/spec/services/cname_dns_checker_spec.rb
@@ -0,0 +1,276 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe CnameDnsChecker, type: :service do
+  let(:domain_name) { 'example.com' }
+  let(:checker) { described_class.new(domain_name) }
+  let(:expected_target) { 'localhost' }
+
+  before do
+    allow(Rails.env).to receive(:production?).and_return(false)
+  end
+
+  describe '#initialize' do
+    it 'initializes with domain name' do
+      expect(checker.instance_variable_get(:@domain_name)).to eq(domain_name)
+    end
+
+    it 'normalizes domain name' do
+      checker = described_class.new('  EXAMPLE.COM  ')
+      expect(checker.instance_variable_get(:@domain_name)).to eq('example.com')
+    end
+
+    it 'creates DNS resolver' do
+      expect(checker.instance_variable_get(:@resolver)).to be_a(Resolv::DNS)
+    end
+  end
+
+  describe '#verify_cname' do
+    let(:resolver) { instance_double(Resolv::DNS) }
+    let(:cname_record) { instance_double(Resolv::DNS::Resource::IN::CNAME, name: Resolv::DNS::Name.create("#{expected_target}.")) }
+
+    before do
+      checker.instance_variable_set(:@resolver, resolver)
+      allow(resolver).to receive(:close)
+    end
+
+    context 'when CNAME is correctly configured' do
+      before do
+        allow(resolver).to receive(:getresources)
+          .with(domain_name, Resolv::DNS::Resource::IN::CNAME)
+          .and_return([cname_record])
+      end
+
+      it 'returns verified true' do
+        result = checker.verify_cname
+
+        expect(result[:verified]).to be true
+        expect(result[:target]).to eq(expected_target)
+        expect(result[:expected_target]).to eq(expected_target)
+        expect(result[:domain]).to eq(domain_name)
+      end
+    end
+
+    context 'when CNAME points to wrong target' do
+      let(:wrong_cname) { instance_double(Resolv::DNS::Resource::IN::CNAME, name: Resolv::DNS::Name.create('wrong-target.com.')) }
+
+      before do
+        allow(resolver).to receive(:getresources)
+          .with(domain_name, Resolv::DNS::Resource::IN::CNAME)
+          .and_return([wrong_cname])
+      end
+
+      it 'returns verified false' do
+        result = checker.verify_cname
+
+        expect(result[:verified]).to be false
+        expect(result[:target]).to eq('wrong-target.com')
+        expect(result[:expected_target]).to eq(expected_target)
+      end
+    end
+
+    context 'when no CNAME record exists' do
+      before do
+        allow(resolver).to receive(:getresources)
+          .with(domain_name, Resolv::DNS::Resource::IN::CNAME)
+          .and_return([])
+        # Also stub A-record lookup invoked by apex check
+        allow(resolver).to receive(:getresources)
+          .with(domain_name, Resolv::DNS::Resource::IN::A)
+          .and_return([])
+      end
+
+      it 'returns verified false with error' do
+        result = checker.verify_cname
+
+        expect(result[:verified]).to be false
+        expect(result[:target]).to be_nil
+        expect(result[:error]).to eq('No CNAME record found')
+      end
+    end
+
+    context 'when no CNAME but apex A record matches Render' do
+      before do
+        allow(resolver).to receive(:getresources)
+          .with(domain_name, Resolv::DNS::Resource::IN::CNAME)
+          .and_return([])
+        a_record = instance_double(Resolv::DNS::Resource::IN::A, address: IPAddr.new('216.24.57.1'))
+        allow(resolver).to receive(:getresources)
+          .with(domain_name, Resolv::DNS::Resource::IN::A)
+          .and_return([a_record])
+      end
+
+      it 'returns verified true using apex A record' do
+        result = checker.verify_cname
+
+        expect(result[:verified]).to be true
+        expect(result[:target]).to eq('216.24.57.1')
+        expect(result[:error]).to be_nil
+      end
+    end
+
+    context 'when DNS resolution fails' do
+      before do
+        allow(resolver).to receive(:getresources).with(domain_name, Resolv::DNS::Resource::IN::CNAME)
+          .and_raise(Resolv::ResolvError.new('DNS resolution failed'))
+      end
+
+      it 'returns verified false with error' do
+        result = checker.verify_cname
+
+        expect(result[:verified]).to be false
+        expect(result[:error]).to include('DNS resolution failed')
+      end
+    end
+
+    context 'in development environment' do
+      before do
+        allow(Rails.env).to receive(:production?).and_return(false)
+        allow(resolver).to receive(:getresources)
+          .with(domain_name, Resolv::DNS::Resource::IN::CNAME)
+          .and_return([instance_double(Resolv::DNS::Resource::IN::CNAME, name: Resolv::DNS::Name.create('localhost.'))])
+        # Prevent unexpected A-record lookup stubs in this branch
+        allow(resolver).to receive(:getresources)
+          .with(domain_name, Resolv::DNS::Resource::IN::A)
+          .and_return([])
+      end
+
+      it 'accepts localhost as valid target' do
+        result = checker.verify_cname
+
+        expect(result[:verified]).to be true
+        expect(result[:target]).to eq('localhost')
+      end
+    end
+  end
+
+  describe '#verify_cname_multiple_dns' do
+    let(:resolver1) { instance_double(Resolv::DNS) }
+    let(:resolver2) { instance_double(Resolv::DNS) }
+    let(:resolver3) { instance_double(Resolv::DNS) }
+
+    before do
+      allow(Resolv::DNS).to receive(:new).and_call_original
+      allow(Resolv::DNS).to receive(:new).with(nameserver: ['8.8.8.8']).and_return(resolver1)
+      allow(Resolv::DNS).to receive(:new).with(nameserver: ['1.1.1.1']).and_return(resolver2)
+      allow(Resolv::DNS).to receive(:new).with(nameserver: ['208.67.222.222']).and_return(resolver3)
+
+      [resolver1, resolver2, resolver3].each { |r| allow(r).to receive(:close) }
+    end
+
+    context 'when all DNS servers return positive results' do
+      let(:cname_record) { instance_double(Resolv::DNS::Resource::IN::CNAME, name: Resolv::DNS::Name.create("#{expected_target}.")) }
+
+      before do
+        [resolver1, resolver2, resolver3].each do |resolver|
+          allow(resolver).to receive(:getresources)
+            .with(domain_name, Resolv::DNS::Resource::IN::CNAME)
+            .and_return([cname_record])
+        end
+      end
+
+      it 'returns aggregated positive results' do
+        result = checker.verify_cname_multiple_dns
+
+        expect(result[:verified]).to be true
+        expect(result[:all_verified]).to be true
+        expect(result[:verification_ratio]).to eq('3/3')
+        expect(result[:results]).to have_attributes(size: 3)
+      end
+    end
+
+    context 'when some DNS servers fail' do
+      let(:cname_record) { instance_double(Resolv::DNS::Resource::IN::CNAME, name: Resolv::DNS::Name.create("#{expected_target}.")) }
+
+      before do
+        allow(resolver1).to receive(:getresources).and_return([cname_record])
+        allow(resolver2).to receive(:getresources).and_raise(StandardError.new('DNS timeout'))
+        allow(resolver3).to receive(:getresources).and_return([])
+      end
+
+      it 'returns mixed results' do
+        result = checker.verify_cname_multiple_dns
+
+        expect(result[:verified]).to be true  # At least one verified
+        expect(result[:all_verified]).to be false  # Not all verified
+        expect(result[:verification_ratio]).to eq('1/3')
+      end
+    end
+  end
+
+  describe '#dns_debug_info' do
+    let(:resolver) { instance_double(Resolv::DNS) }
+
+    before do
+      checker.instance_variable_set(:@resolver, resolver)
+      allow(resolver).to receive(:close)
+    end
+
+    it 'returns comprehensive DNS information' do
+      # Mock different record types
+      allow(resolver).to receive(:getresources).with(domain_name, Resolv::DNS::Resource::IN::A).and_return([])
+      allow(resolver).to receive(:getresources).with(domain_name, Resolv::DNS::Resource::IN::CNAME).and_return([])
+      allow(resolver).to receive(:getresources).with(domain_name, Resolv::DNS::Resource::IN::AAAA).and_return([])
+      allow(resolver).to receive(:getresources).with(domain_name, Resolv::DNS::Resource::IN::MX).and_return([])
+
+      result = checker.dns_debug_info
+
+      expect(result[:domain]).to eq(domain_name)
+      expect(result[:records]).to have_key('A')
+      expect(result[:records]).to have_key('CNAME')
+      expect(result[:records]).to have_key('AAAA')
+      expect(result[:records]).to have_key('MX')
+    end
+
+    context 'with www subdomain' do
+      let(:domain_name) { 'www.example.com' }
+
+      it 'includes root domain check' do
+        allow(resolver).to receive(:getresources).and_return([])
+
+        result = checker.dns_debug_info
+
+        expect(result[:root_domain_check]).to be_present
+      end
+    end
+  end
+
+  describe '#domain_resolves?' do
+    let(:resolver) { instance_double(Resolv::DNS) }
+
+    before do
+      checker.instance_variable_set(:@resolver, resolver)
+    end
+
+    context 'when domain resolves to IP addresses' do
+      before do
+        allow(resolver).to receive(:getaddresses).with(domain_name).and_return(['192.168.1.1', '10.0.0.1'])
+      end
+
+      it 'returns true' do
+        expect(checker.domain_resolves?).to be true
+      end
+    end
+
+    context 'when domain does not resolve' do
+      before do
+        allow(resolver).to receive(:getaddresses).with(domain_name).and_return([])
+      end
+
+      it 'returns false' do
+        expect(checker.domain_resolves?).to be false
+      end
+    end
+
+    context 'when DNS lookup fails' do
+      before do
+        allow(resolver).to receive(:getaddresses).and_raise(StandardError.new('DNS error'))
+      end
+
+      it 'returns false' do
+        expect(checker.domain_resolves?).to be false
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/services/cname_setup_service_spec.rb b/spec/services/cname_setup_service_spec.rb
new file mode 100644
index 0000000..e248a31
--- /dev/null
+++ b/spec/services/cname_setup_service_spec.rb
@@ -0,0 +1,340 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe CnameSetupService, type: :service do
+  let!(:business) { create(:business, tier: 'premium', host_type: 'custom_domain', hostname: 'example.com', canonical_preference: 'apex') }
+  let!(:owner) { create(:user, business: business, role: 'manager', email: 'owner@example.com') }
+  let(:service) { described_class.new(business) }
+  let(:render_service) { instance_double(RenderDomainService) }
+
+  before do
+    allow(RenderDomainService).to receive(:new).and_return(render_service)
+    allow(DomainMailer).to receive_message_chain(:setup_instructions, :deliver_now)
+    allow(DomainMonitoringJob).to receive_message_chain(:set, :perform_later)
+    allow_any_instance_of(CnameSetupService).to receive(:sleep)
+  end
+
+  describe '#start_setup!' do
+    context 'with eligible business' do
+      let(:domain_data) { { 'id' => 'dom_123', 'name' => 'example.com' } }
+
+      before do
+        allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return(nil)
+        allow(render_service).to receive(:add_domain).with('example.com').and_return(domain_data)
+        
+        # Mock verification calls for both apex and www domains
+        allow(render_service).to receive(:find_domain_by_name).with('www.example.com').and_return(nil)
+      end
+
+      it 'completes setup successfully' do
+        result = service.start_setup!
+
+        expect(result[:success]).to be true
+        expect(result[:message]).to eq('Custom domain setup initiated successfully')
+        expect(result[:domain]).to eq('example.com')
+        expect(result[:business_id]).to eq(business.id)
+      end
+
+      it 'adds domain to Render' do
+        expect(render_service).to receive(:add_domain).with('example.com')
+
+        service.start_setup!
+      end
+
+      it 'updates business status' do
+        service.start_setup!
+
+        business.reload
+        expect(business.status).to eq('cname_monitoring')
+        expect(business.render_domain_added).to be true
+      end
+
+      it 'sends setup instructions email' do
+        expect(DomainMailer).to receive(:setup_instructions).with(business, owner)
+        
+        service.start_setup!
+        
+        business.reload
+        expect(business.cname_setup_email_sent_at).to be_present
+      end
+
+      it 'starts DNS monitoring' do
+        expect(DomainMonitoringJob).to receive_message_chain(:set, :perform_later).with(wait: 1.minute).with(business.id)
+
+        service.start_setup!
+
+        business.reload
+        expect(business.status).to eq('cname_monitoring')
+        expect(business.cname_monitoring_active).to be true
+      end
+
+      context 'when domain already exists in Render' do
+        before do
+          allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return(domain_data)
+          # Mock verification calls
+          allow(render_service).to receive(:find_domain_by_name).with('www.example.com').and_return(nil)
+          allow(render_service).to receive(:verify_domain).with('dom_123').and_return({ 'verified' => true })
+        end
+
+        it 'skips domain addition' do
+          expect(render_service).not_to receive(:add_domain)
+
+          service.start_setup!
+        end
+
+        it 'marks domain as added' do
+          service.start_setup!
+
+          business.reload
+          expect(business.render_domain_added).to be true
+        end
+      end
+    end
+
+    context 'with ineligible business' do
+      let(:free_business) { create(:business, tier: 'free', host_type: 'subdomain') }
+      let(:free_service) { described_class.new(free_business) }
+
+      it 'fails validation for free tier' do
+        result = free_service.start_setup!
+
+        expect(result[:success]).to be false
+        expect(result[:error]).to include('Premium tier')
+      end
+    end
+
+    context 'with non-custom domain business' do
+      let(:subdomain_business) { create(:business, tier: 'premium', host_type: 'subdomain') }
+      let(:subdomain_service) { described_class.new(subdomain_business) }
+
+      it 'fails validation for subdomain hosting' do
+        result = subdomain_service.start_setup!
+
+        expect(result[:success]).to be false
+        expect(result[:error]).to include('custom domain hosting')
+      end
+    end
+
+    context 'with active CNAME business' do
+      before do
+        business.update!(status: 'cname_active')
+      end
+
+      it 'fails validation for already active domain' do
+        result = service.start_setup!
+
+        expect(result[:success]).to be false
+        expect(result[:error]).to include('already active')
+      end
+    end
+
+    context 'when Render API fails' do
+      before do
+        allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return(nil)
+        allow(render_service).to receive(:find_domain_by_name).with('www.example.com').and_return(nil)
+        allow(render_service).to receive(:add_domain).and_raise(RenderDomainService::RenderApiError.new('API Error'))
+      end
+
+      it 'handles failure and rolls back' do
+        result = service.start_setup!
+
+        expect(result[:success]).to be false
+        expect(result[:error]).to include('API Error')
+
+        business.reload
+        expect(business.status).to eq('active')
+        expect(business.render_domain_added).to be false
+      end
+
+      it 'attempts to remove domain during rollback' do
+        allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return({ 'id' => 'dom_123' })
+        allow(render_service).to receive(:find_domain_by_name).with('www.example.com').and_return(nil)
+        allow(render_service).to receive(:verify_domain).with('dom_123').and_return({ 'verified' => true })
+        allow(render_service).to receive(:remove_domain).with('dom_123')
+
+        service.start_setup!
+
+        # Assert service handled failure gracefully (no exception raised)
+        expect(business.reload).to be_present
+      end
+    end
+
+    context 'with canonical preference' do
+      context 'when preference is www' do
+        let!(:www_business) { create(:business, tier: 'premium', host_type: 'custom_domain', hostname: 'example-www.com', canonical_preference: 'www') }
+        let!(:www_owner) { create(:user, business: www_business, role: 'manager', email: 'owner@example-www.com') }
+        let(:www_service) { described_class.new(www_business) }
+        
+        before do
+          allow(render_service).to receive(:find_domain_by_name).with('www.example-www.com').and_return(nil)
+          allow(render_service).to receive(:add_domain).with('www.example-www.com').and_return({ 'id' => 'dom_456', 'name' => 'www.example-www.com' })
+          allow(render_service).to receive(:find_domain_by_name).with('example-www.com').and_return(nil)
+          allow(render_service).to receive(:verify_domain)
+        end
+
+        it 'adds www domain to Render' do
+          expect(render_service).to receive(:add_domain).with('www.example-www.com')
+          
+          www_service.start_setup!
+        end
+
+        it 'logs www canonical preference' do
+          # Simply verify the service completes successfully with www preference
+          result = www_service.start_setup!
+          expect(result[:success]).to be true
+        end
+      end
+
+      context 'when preference is apex' do
+        before do
+          # The main business already has apex preference, just need to add missing mocks
+          allow(render_service).to receive(:verify_domain)
+        end
+
+        it 'adds apex domain to Render' do
+          # Need to ensure the correct mocks are set up for this specific test
+          allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return(nil)
+          allow(render_service).to receive(:find_domain_by_name).with('www.example.com').and_return(nil)
+          expect(render_service).to receive(:add_domain).with('example.com')
+          
+          service.start_setup!
+        end
+
+        it 'completes setup successfully with apex preference' do
+          # Need to ensure the correct mocks are set up for this specific test
+          allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return(nil)
+          allow(render_service).to receive(:find_domain_by_name).with('www.example.com').and_return(nil)
+          allow(render_service).to receive(:add_domain).with('example.com').and_return({ 'id' => 'dom_123', 'name' => 'example.com' })
+          
+          result = service.start_setup!
+          expect(result[:success]).to be true
+        end
+      end
+    end
+  end
+
+  describe '#restart_monitoring!' do
+    before do
+      business.update!(status: 'cname_timeout')
+      allow(DomainMailer).to receive_message_chain(:monitoring_restarted, :deliver_now)
+    end
+
+    it 'restarts monitoring successfully' do
+      result = service.restart_monitoring!
+
+      expect(result[:success]).to be true
+      expect(result[:message]).to include('restarted successfully')
+
+      business.reload
+      expect(business.status).to eq('cname_monitoring')
+      expect(business.cname_monitoring_active).to be true
+      expect(business.cname_check_attempts).to eq(0)
+    end
+
+    it 'sends restart notification email' do
+      expect(DomainMailer).to receive(:monitoring_restarted).with(business, owner)
+
+      service.restart_monitoring!
+    end
+
+    it 'queues monitoring job' do
+      expect(DomainMonitoringJob).to receive(:perform_later).with(business.id)
+
+      service.restart_monitoring!
+    end
+
+    context 'with invalid status' do
+      before do
+        business.update!(status: 'active')
+      end
+
+      it 'fails validation' do
+        result = service.restart_monitoring!
+
+        expect(result[:success]).to be false
+        expect(result[:error]).to include('pending, monitoring, or timeout status')
+      end
+    end
+  end
+
+  describe '#force_activate!' do
+    before do
+      allow(DomainMailer).to receive_message_chain(:activation_success, :deliver_now)
+    end
+
+    it 'force activates domain successfully' do
+      result = service.force_activate!
+
+      expect(result[:success]).to be true
+      expect(result[:message]).to include('activated successfully')
+
+      business.reload
+      expect(business.status).to eq('cname_active')
+      expect(business.cname_monitoring_active).to be false
+    end
+
+    it 'sends activation success email' do
+      expect(DomainMailer).to receive(:activation_success).with(business, owner)
+
+      service.force_activate!
+    end
+  end
+
+  describe '#status' do
+    it 'returns comprehensive status information' do
+      business.update!(
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 5,
+        cname_setup_email_sent_at: 1.hour.ago,
+        render_domain_added: true
+      )
+
+      status = service.status
+
+      expect(status[:business_id]).to eq(business.id)
+      expect(status[:domain]).to eq('example.com')
+      expect(status[:status]).to eq('cname_monitoring')
+      expect(status[:monitoring_active]).to be true
+      expect(status[:check_attempts]).to eq(5)
+      expect(status[:setup_email_sent]).to be true
+      expect(status[:render_domain_added]).to be true
+      expect(status[:can_setup]).to be true
+    end
+  end
+
+  describe 'private methods' do
+    describe '#validate_business_eligibility!' do
+      it 'raises error for nil business' do
+        nil_service = described_class.new(nil)
+
+        expect { nil_service.send(:validate_business_eligibility!) }.to raise_error(CnameSetupService::InvalidBusinessError, /not found/)
+      end
+
+      it 'raises error for free tier' do
+        business.update!(tier: 'free', host_type: 'subdomain', hostname: 'example')
+
+        expect { service.send(:validate_business_eligibility!) }.to raise_error(CnameSetupService::InvalidBusinessError, /Premium tier/)
+      end
+
+      it 'raises error for subdomain hosting' do
+        business.update!(host_type: 'subdomain', hostname: 'example')
+
+        expect { service.send(:validate_business_eligibility!) }.to raise_error(CnameSetupService::InvalidBusinessError, /custom domain/)
+      end
+
+      it 'raises error for already active domain' do
+        business.update!(status: 'cname_active')
+
+        expect { service.send(:validate_business_eligibility!) }.to raise_error(CnameSetupService::DomainAlreadyExistsError, /already active/)
+      end
+
+      it 'raises error for blank hostname' do
+        business.update_columns(hostname: '')
+
+        expect { service.send(:validate_business_eligibility!) }.to raise_error(CnameSetupService::InvalidBusinessError, /not configured/)
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/services/domain_health_checker_spec.rb b/spec/services/domain_health_checker_spec.rb
new file mode 100644
index 0000000..7edf5a1
--- /dev/null
+++ b/spec/services/domain_health_checker_spec.rb
@@ -0,0 +1,198 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+require 'net/http'
+
+RSpec.describe DomainHealthChecker, type: :service do
+  let(:domain) { 'example.com' }
+  let(:checker) { described_class.new(domain) }
+
+  describe '#initialize' do
+    it 'normalizes domain name' do
+      checker = described_class.new('  EXAMPLE.COM  ')
+      expect(checker.instance_variable_get(:@domain_name)).to eq('example.com')
+    end
+
+    it 'initializes memoization cache' do
+      expect(checker.instance_variable_get(:@memoized_results)).to eq({})
+    end
+  end
+
+  describe '#check_health' do
+    let(:mock_http) { instance_double(Net::HTTP) }
+    let(:mock_response) { instance_double(Net::HTTPSuccess, code: '200', to_hash: {}) }
+
+    before do
+      allow(Net::HTTP).to receive(:new).and_return(mock_http)
+      allow(mock_http).to receive(:use_ssl=)
+      allow(mock_http).to receive(:open_timeout=)
+      allow(mock_http).to receive(:read_timeout=)
+      allow(mock_http).to receive(:verify_mode=)
+      allow(mock_http).to receive(:request).and_return(mock_response)
+    end
+
+    context 'when domain returns HTTP 200' do
+      it 'returns healthy status' do
+        result = checker.check_health
+
+        expect(result[:healthy]).to be true
+        expect(result[:status_code]).to eq(200)
+        expect(result[:domain]).to eq('example.com')
+        expect(result[:response_time]).to be_a(Float)
+        expect(result[:checked_at]).to be_within(1.second).of(Time.current)
+      end
+
+      it 'memoizes the result' do
+        # First call
+        result1 = checker.check_health
+        
+        # Second call should return memoized result without making HTTP request
+        expect(Net::HTTP).not_to receive(:new)
+        result2 = checker.check_health
+        
+        expect(result1).to eq(result2)
+      end
+    end
+
+    context 'when domain returns non-200 status' do
+      let(:mock_response) { instance_double(Net::HTTPNotFound, code: '404', to_hash: {}) }
+
+      it 'returns unhealthy status' do
+        result = checker.check_health
+
+        expect(result[:healthy]).to be false
+        expect(result[:status_code]).to eq(404)
+        expect(result[:error]).to be_nil
+      end
+    end
+
+    context 'when domain has redirects' do
+      let(:mock_redirect_response) { instance_double(Net::HTTPMovedPermanently, code: '301', to_hash: {}) }
+      let(:mock_final_response) { instance_double(Net::HTTPSuccess, code: '200', to_hash: {}) }
+
+      before do
+        allow(mock_redirect_response).to receive(:is_a?).with(Net::HTTPRedirection).and_return(true)
+        allow(mock_redirect_response).to receive(:[]).with('Location').and_return('https://example.com/new-path')
+        allow(mock_final_response).to receive(:is_a?).with(Net::HTTPRedirection).and_return(false)
+        
+        # First call returns redirect, second call returns success
+        allow(mock_http).to receive(:request).and_return(mock_redirect_response, mock_final_response)
+      end
+
+      it 'follows redirects and returns final status' do
+        result = checker.check_health
+
+        expect(result[:healthy]).to be true
+        expect(result[:status_code]).to eq(200)
+        expect(result[:redirect_count]).to eq(1)
+      end
+    end
+
+    context 'when request times out' do
+      before do
+        allow(mock_http).to receive(:request).and_raise(Net::ReadTimeout.new('timeout'))
+      end
+
+      it 'returns error result' do
+        result = checker.check_health
+
+        expect(result[:healthy]).to be false
+        expect(result[:status_code]).to be_nil
+        expect(result[:error]).to include('Request timeout')
+      end
+
+      it 'memoizes error results' do
+        # First call
+        result1 = checker.check_health
+        
+        # Second call should return memoized error
+        expect(mock_http).not_to receive(:request)
+        result2 = checker.check_health
+        
+        expect(result1).to eq(result2)
+      end
+    end
+
+    context 'when DNS resolution fails' do
+      before do
+        allow(mock_http).to receive(:request).and_raise(SocketError.new('getaddrinfo failed'))
+      end
+
+      it 'returns DNS error result' do
+        result = checker.check_health
+
+        expect(result[:healthy]).to be false
+        expect(result[:error]).to include('DNS/Socket error')
+      end
+    end
+
+    context 'when SSL error occurs' do
+      before do
+        allow(mock_http).to receive(:request).and_raise(OpenSSL::SSL::SSLError.new('certificate verify failed'))
+      end
+
+      it 'returns SSL error result' do
+        result = checker.check_health
+
+        expect(result[:healthy]).to be false
+        expect(result[:error]).to include('SSL error')
+      end
+    end
+
+    context 'when too many redirects occur' do
+      let(:mock_redirect_response) { instance_double(Net::HTTPMovedPermanently, code: '301', to_hash: {}) }
+
+      before do
+        allow(mock_redirect_response).to receive(:is_a?).with(Net::HTTPRedirection).and_return(true)
+        allow(mock_redirect_response).to receive(:[]).with('Location').and_return('https://example.com/redirect')
+        allow(mock_http).to receive(:request).and_return(mock_redirect_response)
+      end
+
+      it 'returns too many redirects error' do
+        result = checker.check_health
+
+        expect(result[:healthy]).to be false
+        expect(result[:error]).to include('Too many redirects')
+      end
+    end
+  end
+
+  describe '#check_health_both_protocols' do
+    it 'checks both HTTP and HTTPS' do
+      allow(checker).to receive(:check_health_for_protocol).with('https').and_return({
+        healthy: true, status_code: 200, protocol: 'https'
+      })
+      allow(checker).to receive(:check_health_for_protocol).with('http').and_return({
+        healthy: false, status_code: 404, protocol: 'http'
+      })
+
+      result = checker.check_health_both_protocols
+
+      expect(result[:healthy]).to be true
+      expect(result[:primary_protocol]).to eq('https')
+      expect(result[:https_result][:healthy]).to be true
+      expect(result[:http_result][:healthy]).to be false
+    end
+
+    it 'prefers HTTPS but accepts HTTP if HTTPS fails' do
+      allow(checker).to receive(:check_health_for_protocol).with('https').and_return({
+        healthy: false, status_code: 404, protocol: 'https'
+      })
+      allow(checker).to receive(:check_health_for_protocol).with('http').and_return({
+        healthy: true, status_code: 200, protocol: 'http'
+      })
+
+      result = checker.check_health_both_protocols
+
+      expect(result[:healthy]).to be true
+      expect(result[:primary_protocol]).to eq('http')
+    end
+  end
+
+  describe 'constants' do
+    it 'has appropriate timeout settings' do
+      expect(described_class::REQUEST_TIMEOUT).to eq(3)
+      expect(described_class::MAX_REDIRECTS).to eq(3)
+    end
+  end
+end
diff --git a/spec/services/domain_monitoring_service_spec.rb b/spec/services/domain_monitoring_service_spec.rb
new file mode 100644
index 0000000..f1776a3
--- /dev/null
+++ b/spec/services/domain_monitoring_service_spec.rb
@@ -0,0 +1,374 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe DomainMonitoringService, type: :service do
+  let!(:business) do
+    create(:business,
+      tier: 'premium',
+      host_type: 'custom_domain',
+      hostname: 'example.com',
+      status: 'cname_monitoring',
+      cname_monitoring_active: true,
+      cname_check_attempts: 2
+    )
+  end
+
+  let(:service) { described_class.new(business) }
+  let(:dns_checker) { instance_double(CnameDnsChecker) }
+  let(:render_service) { instance_double(RenderDomainService) }
+  let(:health_checker) { instance_double(DomainHealthChecker) }
+  let(:verification_strategy) { instance_double(DomainVerificationStrategy) }
+
+  before do
+    allow(CnameDnsChecker).to receive(:new).and_return(dns_checker)
+    allow(RenderDomainService).to receive(:new).and_return(render_service)
+    allow(DomainHealthChecker).to receive(:new).and_return(health_checker)
+    allow(DomainVerificationStrategy).to receive(:new).and_return(verification_strategy)
+  end
+
+  describe '#perform_check!' do
+    let(:dns_result) { { verified: true, target: 'bizblasts.onrender.com' } }
+    let(:render_result) { { found: true, verified: true, domain_id: 'dom_123', verification_data: { 'verified' => true } } }
+    let(:health_result) { { healthy: true, status_code: 200 } }
+    let(:verification_result) do
+      {
+        verified: true,
+        should_continue: false,
+        dns_verified: true,
+        render_verified: true,
+        health_verified: true,
+        status_reason: 'Domain fully verified and responding with HTTP 200'
+      }
+    end
+
+    before do
+      allow(dns_checker).to receive(:verify_cname).and_return(dns_result)
+      allow(render_service).to receive(:find_domain_by_name).and_return({ 'id' => 'dom_123' })
+      allow(render_service).to receive(:verify_domain).and_return({ 'verified' => true })
+      allow(health_checker).to receive(:check_health).and_return(health_result)
+      allow(verification_strategy).to receive(:determine_status).and_return(verification_result)
+      
+      # Mock business state updates
+      allow(business).to receive(:increment_cname_check!)
+      allow(business).to receive(:mark_domain_health_status!)
+      allow(business).to receive(:cname_success!)
+      allow(business).to receive(:cname_timeout!)
+    end
+
+    context 'when all checks pass (happy path)' do
+      it 'returns success result with verification details' do
+        allow(DomainMailer).to receive_message_chain(:activation_success, :deliver_now)
+        allow(business.users).to receive_message_chain(:where, :first).and_return(create(:user))
+
+        result = service.perform_check!
+
+        expect(result[:success]).to be true
+        expect(result[:verified]).to be true
+        expect(result[:should_continue]).to be false
+        expect(result[:dns_result]).to eq(dns_result)
+        expect(result[:render_result]).to eq(render_result)
+        expect(result[:health_result]).to eq(health_result)
+      end
+
+      it 'updates business state correctly' do
+        allow(DomainMailer).to receive_message_chain(:activation_success, :deliver_now)
+        allow(business.users).to receive_message_chain(:where, :first).and_return(create(:user))
+
+        service.perform_check!
+
+        expect(business).to have_received(:increment_cname_check!)
+        expect(business).to have_received(:mark_domain_health_status!).with(true)
+        expect(business).to have_received(:cname_success!)
+      end
+
+      it 'sends activation success email' do
+        owner = create(:user, business: business, role: 'manager')
+        allow(business.users).to receive_message_chain(:where, :first).and_return(owner)
+        
+        mailer = instance_double(ActionMailer::MessageDelivery)
+        expect(DomainMailer).to receive(:activation_success).with(business, owner).and_return(mailer)
+        expect(mailer).to receive(:deliver_now)
+
+        service.perform_check!
+      end
+    end
+
+    context 'when verification fails but should continue' do
+      let(:verification_result) do
+        {
+          verified: false,
+          should_continue: true,
+          dns_verified: true,
+          render_verified: false,
+          health_verified: false,
+          status_reason: 'DNS configured, waiting for Render verification and health check'
+        }
+      end
+
+      it 'returns continue result' do
+        result = service.perform_check!
+
+        expect(result[:success]).to be true
+        expect(result[:verified]).to be false
+        expect(result[:should_continue]).to be true
+        expect(result[:next_check_in]).to eq('5 minutes')
+      end
+
+      it 'updates health status appropriately' do
+        service.perform_check!
+
+        expect(business).to have_received(:increment_cname_check!)
+        expect(business).to have_received(:mark_domain_health_status!).with(false)
+        expect(business).not_to have_received(:cname_success!)
+      end
+    end
+
+    context 'when maximum attempts reached (timeout)' do
+      let(:verification_result) do
+        {
+          verified: false,
+          should_continue: false,
+          dns_verified: false,
+          render_verified: false,
+          health_verified: false,
+          status_reason: 'Maximum verification attempts reached'
+        }
+      end
+
+      it 'returns timeout result' do
+        allow(DomainMailer).to receive_message_chain(:timeout_help, :deliver_now)
+        allow(business.users).to receive_message_chain(:where, :first).and_return(create(:user))
+
+        result = service.perform_check!
+
+        expect(result[:success]).to be true
+        expect(result[:verified]).to be false
+        expect(result[:should_continue]).to be false
+        expect(result[:next_check_in]).to eq('stopped')
+      end
+
+      it 'updates business to timeout state' do
+        allow(DomainMailer).to receive_message_chain(:timeout_help, :deliver_now)
+        allow(business.users).to receive_message_chain(:where, :first).and_return(create(:user))
+
+        service.perform_check!
+
+        expect(business).to have_received(:cname_timeout!)
+      end
+
+      it 'sends timeout help email' do
+        owner = create(:user, business: business, role: 'manager')
+        allow(business.users).to receive_message_chain(:where, :first).and_return(owner)
+        
+        mailer = instance_double(ActionMailer::MessageDelivery)
+        expect(DomainMailer).to receive(:timeout_help).with(business, owner).and_return(mailer)
+        expect(mailer).to receive(:deliver_now)
+
+        service.perform_check!
+      end
+    end
+
+    context 'when health check passes but DNS/Render fail' do
+      let(:verification_result) do
+        {
+          verified: false,
+          should_continue: true,
+          dns_verified: false,
+          render_verified: false,
+          health_verified: true,
+          status_reason: 'Health verified, waiting for DNS and Render verification'
+        }
+      end
+
+      it 'still marks health as verified' do
+        service.perform_check!
+
+        expect(business).to have_received(:mark_domain_health_status!).with(true)
+        expect(business).not_to have_received(:cname_success!)
+      end
+    end
+
+    context 'when business is not eligible for monitoring' do
+      before do
+        allow(service).to receive(:validate_monitoring_state!).and_raise(described_class::MonitoringError.new('Not eligible'))
+      end
+
+      it 'returns error result' do
+        result = service.perform_check!
+        
+        expect(result[:success]).to be false
+        expect(result[:error]).to eq('Not eligible')
+        expect(result[:should_continue]).to be false
+      end
+    end
+
+    context 'when DNS check fails' do
+      before do
+        allow(dns_checker).to receive(:verify_cname).and_raise(StandardError.new('DNS lookup failed'))
+      end
+
+      it 'returns error result' do
+        result = service.perform_check!
+        
+        expect(result[:success]).to be false
+        expect(result[:error]).to eq('DNS lookup failed')
+        expect(result[:should_continue]).to be false
+      end
+    end
+
+    context 'when render check fails' do
+      let(:verification_result) do
+        {
+          verified: false,
+          should_continue: true,
+          dns_verified: true,
+          render_verified: false,
+          health_verified: true,
+          status_reason: 'DNS and health verified, waiting for Render verification'
+        }
+      end
+
+      before do
+        allow(render_service).to receive(:find_domain_by_name).and_raise(StandardError.new('Render API error'))
+      end
+
+      it 'continues processing with render check failure' do
+        result = service.perform_check!
+        
+        expect(result[:success]).to be true
+        expect(result[:verified]).to be false
+        expect(result[:should_continue]).to be true
+        expect(result[:render_result][:error]).to eq('Render API error')
+        expect(result[:render_result][:verified]).to be false
+      end
+    end
+
+    context 'when health check fails' do
+      let(:verification_result) do
+        {
+          verified: false,
+          should_continue: true,
+          dns_verified: true,
+          render_verified: true,
+          health_verified: false,
+          status_reason: 'DNS and Render verified, waiting for domain to return HTTP 200'
+        }
+      end
+
+      before do
+        allow(health_checker).to receive(:check_health).and_raise(StandardError.new('Health check failed'))
+      end
+
+      it 'continues processing with health check failure' do
+        result = service.perform_check!
+        
+        expect(result[:success]).to be true
+        expect(result[:verified]).to be false
+        expect(result[:should_continue]).to be true
+        expect(result[:health_result][:error]).to eq('Health check failed')
+        expect(result[:health_result][:healthy]).to be false
+      end
+    end
+  end
+
+  describe '#validate_monitoring_state!' do
+    context 'with valid business state' do
+      it 'does not raise error' do
+        expect { service.send(:validate_monitoring_state!) }.not_to raise_error
+      end
+    end
+
+    context 'when monitoring is not active' do
+      before { business.update!(cname_monitoring_active: false) }
+
+      it 'raises monitoring error' do
+        expect { service.send(:validate_monitoring_state!) }.to raise_error(described_class::MonitoringError, 'Business monitoring is not active')
+      end
+    end
+
+    context 'when business is not in monitoring status' do
+      before { business.update!(status: 'active') }
+
+      it 'raises monitoring error' do
+        expect { service.send(:validate_monitoring_state!) }.to raise_error(described_class::MonitoringError, 'Business is not in monitoring status')
+      end
+    end
+
+    context 'when maximum attempts exceeded' do
+      before { business.update!(cname_check_attempts: 12) }
+
+      it 'raises monitoring error' do
+        expect { service.send(:validate_monitoring_state!) }.to raise_error(described_class::MonitoringError, 'Maximum monitoring attempts exceeded')
+      end
+    end
+  end
+
+  describe '#check_render_verification' do
+    context 'when domain exists and is verified' do
+      before do
+        # Business has default canonical_preference of 'www', so example.com becomes www.example.com
+        allow(render_service).to receive(:find_domain_by_name).with('www.example.com').and_return({ 'id' => 'dom_123' })
+        allow(render_service).to receive(:verify_domain).with('dom_123').and_return({ 'verified' => true })
+      end
+
+      it 'returns verified result' do
+        result = service.send(:check_render_verification)
+        expect(result[:verified]).to be true
+      end
+    end
+
+    context 'when domain does not exist in Render' do
+      before do
+        # Business has default canonical_preference of 'www', so example.com becomes www.example.com
+        allow(render_service).to receive(:find_domain_by_name).with('www.example.com').and_return(nil)
+      end
+
+      it 'returns unverified result' do
+        result = service.send(:check_render_verification)
+        expect(result[:verified]).to be false
+        expect(result[:error]).to include('not found')
+      end
+    end
+
+    context 'when Render API fails' do
+      before do
+        allow(render_service).to receive(:find_domain_by_name).and_raise(StandardError.new('API error'))
+      end
+
+      it 'returns error result' do
+        result = service.send(:check_render_verification)
+        expect(result[:verified]).to be false
+        expect(result[:error]).to include('API error')
+      end
+    end
+  end
+
+  describe '#check_domain_health' do
+    let(:health_result) { { healthy: true, status_code: 200 } }
+
+    before do
+      allow(health_checker).to receive(:check_health).and_return(health_result)
+    end
+
+    it 'delegates to health checker' do
+      result = service.send(:check_domain_health)
+      expect(result).to eq(health_result)
+      expect(health_checker).to have_received(:check_health)
+    end
+
+    context 'when health checker raises exception' do
+      before do
+        allow(health_checker).to receive(:check_health).and_raise(StandardError.new('Connection failed'))
+      end
+
+      it 'returns unhealthy result with error' do
+        result = service.send(:check_domain_health)
+        
+        expect(result[:healthy]).to be false
+        expect(result[:error]).to include('Connection failed')
+        expect(result[:checked_at]).to be_within(1.second).of(Time.current)
+      end
+    end
+  end
+end
diff --git a/spec/services/domain_removal_service_spec.rb b/spec/services/domain_removal_service_spec.rb
new file mode 100644
index 0000000..3ac5a1d
--- /dev/null
+++ b/spec/services/domain_removal_service_spec.rb
@@ -0,0 +1,373 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe DomainRemovalService, type: :service do
+  let!(:business) do
+    create(:business,
+      tier: 'premium',
+      host_type: 'custom_domain',
+      hostname: 'example.com',
+      subdomain: 'example',
+      status: 'cname_active',
+      render_domain_added: true,
+      cname_monitoring_active: false
+    )
+  end
+
+  let!(:owner) { create(:user, business: business, role: 'manager', email: 'owner@example.com') }
+  let(:service) { described_class.new(business) }
+  let(:render_service) { instance_double(RenderDomainService) }
+
+  before do
+    allow(RenderDomainService).to receive(:new).and_return(render_service)
+  end
+
+  describe '#remove_domain!' do
+    let(:domain_data) { { 'id' => 'dom_123', 'name' => 'example.com' } }
+
+    before do
+      # Default to nil for any domain lookup, then override apex as needed
+      allow(render_service).to receive(:find_domain_by_name).and_return(nil)
+
+      allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return(domain_data)
+      # www.example.com will fall back to nil which is acceptable for the service logic
+
+      allow(render_service).to receive(:remove_domain).with('dom_123').and_return(true)
+    end
+
+    it 'completes domain removal successfully' do
+      result = service.remove_domain!
+
+      expect(result[:success]).to be true
+      expect(result[:message]).to eq('Custom domain removed successfully')
+      expect(result[:business_id]).to eq(business.id)
+    end
+
+    it 'stops active monitoring' do
+      business.update!(cname_monitoring_active: true, status: 'cname_monitoring')
+
+      service.remove_domain!
+
+      business.reload
+      expect(business.cname_monitoring_active).to be false
+    end
+
+    it 'removes domain from Render' do
+      expect(render_service).to receive(:find_domain_by_name).with('example.com')
+      expect(render_service).to receive(:find_domain_by_name).with('www.example.com')
+      expect(render_service).to receive(:remove_domain).with('dom_123')
+
+      service.remove_domain!
+    end
+
+    it 'reverts business to subdomain hosting' do
+      service.remove_domain!
+
+      business.reload
+      expect(business.host_type).to eq('subdomain')
+      expect(business.status).to eq('active')
+      expect(business.hostname).to eq('example')  # Should use subdomain value
+      expect(business.render_domain_added).to be false
+      expect(business.cname_setup_email_sent_at).to be_nil
+      expect(business.cname_check_attempts).to eq(0)
+    end
+
+    it 'includes expected actions in result' do
+      result = service.remove_domain!
+
+      expect(result[:actions_taken]).to include(
+        'Stopped DNS monitoring',
+        'Removed domain from Render service',
+        'Reverted to subdomain hosting',
+        'Sent confirmation email'
+      )
+    end
+
+    it 'returns correct reverted URL' do
+      result = service.remove_domain!
+
+      if Rails.env.production?
+        expect(result[:reverted_to]).to eq('https://example.bizblasts.com')
+      else
+        expect(result[:reverted_to]).to eq('http://example.lvh.me:3000')
+      end
+    end
+
+    context 'when domain not found in Render' do
+      before do
+        allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return(nil)
+      end
+
+      it 'continues with removal process' do
+        expect(render_service).not_to receive(:remove_domain)
+
+        result = service.remove_domain!
+
+        expect(result[:success]).to be true
+      end
+    end
+
+    context 'when Render removal fails' do
+      before do
+        allow(render_service).to receive(:remove_domain).and_raise(StandardError.new('Render API error'))
+      end
+
+      it 'continues with business reversion' do
+        result = service.remove_domain!
+
+        expect(result[:success]).to be true
+        business.reload
+        expect(business.host_type).to eq('subdomain')
+      end
+    end
+
+    context 'when business has no subdomain' do
+      before do
+        business.update!(subdomain: nil)
+      end
+
+      it 'uses hostname as fallback' do
+        service.remove_domain!
+
+        business.reload
+        expect(business.hostname).to eq('example.com')
+      end
+    end
+
+    context 'when business has no subdomain or hostname' do
+      before do
+        business.update_columns(subdomain: nil, hostname: nil)
+        # Stub both domain lookups that production code performs when hostname is nil
+        allow(render_service).to receive(:find_domain_by_name).with(nil).and_return(nil)
+        allow(render_service).to receive(:find_domain_by_name).with('www.').and_return(nil)
+      end
+
+      it 'generates fallback hostname' do
+        service.remove_domain!
+
+        business.reload
+        expect(business.hostname).to eq("business-#{business.id}")
+      end
+    end
+
+    context 'when business update fails' do
+      before do
+        allow(business).to receive(:update!).and_raise(ActiveRecord::RecordInvalid.new(business))
+      end
+
+      it 'returns error result' do
+        result = service.remove_domain!
+
+        expect(result[:success]).to be false
+        expect(result[:error]).to be_present
+        expect(result[:business_id]).to eq(business.id)
+      end
+    end
+  end
+
+  describe '#handle_tier_downgrade!' do
+    context 'when downgrading from premium to free' do
+      it 'removes domain' do
+        # Stub both apex and www domain lookups (production code checks both)
+        allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return({ 'id' => 'dom_123' })
+        allow(render_service).to receive(:find_domain_by_name).with('www.example.com').and_return(nil)
+        allow(render_service).to receive(:remove_domain).with('dom_123').and_return(true)
+        result = service.handle_tier_downgrade!('free')
+
+        expect(result[:success]).to be true
+      end
+    end
+
+    context 'when staying on premium tier' do
+      it 'does not remove domain' do
+        expect(service).not_to receive(:remove_domain!)
+
+        result = service.handle_tier_downgrade!('premium')
+
+        expect(result[:success]).to be true
+        expect(result[:message]).to include('No domain changes needed')
+      end
+    end
+
+    context 'when business is not premium' do
+      before do
+        business.update!(tier: 'free', host_type: 'subdomain', hostname: 'example')
+      end
+
+      it 'does not remove domain' do
+        expect(service).not_to receive(:remove_domain!)
+
+        result = service.handle_tier_downgrade!('free')
+
+        expect(result[:message]).to include('No domain changes needed')
+      end
+    end
+
+    context 'when business does not have custom domain' do
+      before do
+        business.update!(host_type: 'subdomain', hostname: 'example')
+      end
+
+      it 'does not remove domain' do
+        expect(service).not_to receive(:remove_domain!)
+
+        result = service.handle_tier_downgrade!('free')
+
+        expect(result[:message]).to include('No domain changes needed')
+      end
+    end
+  end
+
+  describe '#disable_domain!' do
+    it 'disables domain without removing configuration' do
+      result = service.disable_domain!
+
+      expect(result[:success]).to be true
+      expect(result[:message]).to include('disabled successfully')
+      expect(result[:note]).to include('configuration preserved')
+
+      business.reload
+      expect(business.status).to eq('inactive')
+      expect(business.cname_monitoring_active).to be false
+      expect(business.hostname).to eq('example.com')  # Hostname preserved
+    end
+
+    context 'with active monitoring' do
+      before do
+        business.update!(cname_monitoring_active: true, status: 'cname_monitoring')
+      end
+
+      it 'stops monitoring' do
+        service.disable_domain!
+
+        business.reload
+        expect(business.cname_monitoring_active).to be false
+      end
+    end
+  end
+
+  describe '#removal_preview' do
+    it 'returns comprehensive preview information' do
+      allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return({ 'id' => 'dom_123', 'verified' => true })
+      preview = service.removal_preview
+
+      expect(preview[:business_id]).to eq(business.id)
+      expect(preview[:current_domain]).to eq('example.com')
+      expect(preview[:current_status]).to eq('cname_active')
+      expect(preview[:monitoring_active]).to be false
+      expect(preview[:impact]).to be_a(Hash)
+      expect(preview[:impact][:domain_access]).to include('example.com will no longer work')
+    end
+
+    it 'checks if Render domain exists' do
+      expect(render_service).to receive(:find_domain_by_name).with('example.com')
+
+      service.removal_preview
+    end
+  end
+
+  describe 'private methods' do
+    describe '#stop_monitoring_if_active' do
+      context 'with active monitoring' do
+        before do
+          business.update!(cname_monitoring_active: true)
+        end
+
+        it 'stops monitoring' do
+          service.send(:stop_monitoring_if_active)
+
+          business.reload
+          expect(business.cname_monitoring_active).to be false
+        end
+      end
+
+      context 'without active monitoring' do
+        it 'does nothing' do
+          expect(business).not_to receive(:stop_cname_monitoring!)
+
+          service.send(:stop_monitoring_if_active)
+        end
+      end
+    end
+
+    describe '#subdomain_url' do
+      context 'with subdomain present' do
+        it 'uses subdomain for URL' do
+          url = service.send(:subdomain_url)
+
+          if Rails.env.production?
+            expect(url).to eq('https://example.bizblasts.com')
+          else
+            expect(url).to eq('http://example.lvh.me:3000')
+          end
+        end
+      end
+
+      context 'without subdomain but with hostname' do
+        before do
+          business.update!(subdomain: nil)
+        end
+
+        it 'uses hostname for URL' do
+          url = service.send(:subdomain_url)
+
+          if Rails.env.production?
+            expect(url).to eq('https://example.com.bizblasts.com')
+          else
+            expect(url).to eq('http://example.com.lvh.me:3000')
+          end
+        end
+      end
+
+      context 'without subdomain or hostname' do
+        before do
+          business.update_columns(subdomain: nil, hostname: nil)
+        end
+
+        it 'generates fallback URL' do
+          url = service.send(:subdomain_url)
+
+          expected_subdomain = "business-#{business.id}"
+          if Rails.env.production?
+            expect(url).to eq("https://#{expected_subdomain}.bizblasts.com")
+          else
+            expect(url).to eq("http://#{expected_subdomain}.lvh.me:3000")
+          end
+        end
+      end
+    end
+
+    describe '#check_render_domain_exists' do
+      context 'when domain exists in Render' do
+        before do
+          allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return({ 'id' => 'dom_123' })
+        end
+
+        it 'returns true' do
+          expect(service.send(:check_render_domain_exists)).to be true
+        end
+      end
+
+      context 'when domain does not exist in Render' do
+        before do
+          allow(render_service).to receive(:find_domain_by_name).with('example.com').and_return(nil)
+        end
+
+        it 'returns false' do
+          expect(service.send(:check_render_domain_exists)).to be false
+        end
+      end
+
+      context 'when Render API fails' do
+        before do
+          allow(render_service).to receive(:find_domain_by_name).and_raise(StandardError.new('API error'))
+        end
+
+        it 'returns false' do
+          expect(service.send(:check_render_domain_exists)).to be false
+        end
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/services/domain_verification_strategy_spec.rb b/spec/services/domain_verification_strategy_spec.rb
new file mode 100644
index 0000000..5a6c6e7
--- /dev/null
+++ b/spec/services/domain_verification_strategy_spec.rb
@@ -0,0 +1,236 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe DomainVerificationStrategy, type: :service do
+  let(:business) { create(:business, cname_check_attempts: 5) }
+  let(:strategy) { described_class.new(business) }
+
+  let(:dns_result) { { verified: false } }
+  let(:render_result) { { verified: false } }
+  let(:health_result) { { healthy: false } }
+
+  describe '#determine_status' do
+    context 'when all checks pass (success case)' do
+      let(:dns_result) { { verified: true } }
+      let(:render_result) { { verified: true } }
+      let(:health_result) { { healthy: true, ssl_ready: true } }
+
+      it 'returns success status' do
+        result = strategy.determine_status(dns_result, render_result, health_result)
+
+        expect(result[:verified]).to be true
+        expect(result[:should_continue]).to be false
+        expect(result[:dns_verified]).to be true
+        expect(result[:render_verified]).to be true
+        expect(result[:health_verified]).to be true
+        expect(result[:status_reason]).to eq('Domain fully verified and responding with HTTPS (SSL ready)')
+      end
+    end
+
+    context 'when maximum attempts reached (timeout case)' do
+      let(:business) { create(:business, cname_check_attempts: 11) } # Next increment will be 12
+
+      it 'returns timeout status regardless of check results' do
+        result = strategy.determine_status(dns_result, render_result, health_result)
+
+        expect(result[:verified]).to be false
+        expect(result[:should_continue]).to be false
+        expect(result[:status_reason]).to eq('Maximum verification attempts reached')
+      end
+    end
+
+    context 'when in progress (various combinations)' do
+      context 'with no checks passed' do
+        it 'returns appropriate in-progress status' do
+          result = strategy.determine_status(dns_result, render_result, health_result)
+
+          expect(result[:verified]).to be false
+          expect(result[:should_continue]).to be true
+          expect(result[:status_reason]).to eq('Waiting for CNAME record, Render verification, and health check')
+        end
+      end
+
+      context 'with only DNS passed' do
+        let(:dns_result) { { verified: true } }
+
+        it 'returns DNS-only status' do
+          result = strategy.determine_status(dns_result, render_result, health_result)
+
+          expect(result[:verified]).to be false
+          expect(result[:should_continue]).to be true
+          expect(result[:status_reason]).to eq('DNS configured, waiting for Render verification and health check')
+        end
+      end
+
+      context 'with only Render passed' do
+        let(:render_result) { { verified: true } }
+
+        it 'returns Render-only status' do
+          result = strategy.determine_status(dns_result, render_result, health_result)
+
+          expect(result[:verified]).to be false
+          expect(result[:should_continue]).to be true
+          expect(result[:status_reason]).to eq('Render verified, waiting for DNS and health check')
+        end
+      end
+
+      context 'with only health check passed' do
+        let(:health_result) { { healthy: true } }
+
+        it 'returns health-only status' do
+          result = strategy.determine_status(dns_result, render_result, health_result)
+
+          expect(result[:verified]).to be false
+          expect(result[:should_continue]).to be true
+          expect(result[:status_reason]).to eq('Health verified, waiting for DNS and Render verification')
+        end
+      end
+
+      context 'with DNS and Render passed' do
+        let(:dns_result) { { verified: true } }
+        let(:render_result) { { verified: true } }
+
+        it 'returns DNS+Render status' do
+          result = strategy.determine_status(dns_result, render_result, health_result)
+
+          expect(result[:verified]).to be false
+          expect(result[:should_continue]).to be true
+          expect(result[:status_reason]).to eq('DNS and Render verified, waiting for domain to return HTTP 200')
+        end
+      end
+
+      context 'with DNS and health passed' do
+        let(:dns_result) { { verified: true } }
+        let(:health_result) { { healthy: true } }
+
+        it 'returns DNS+health status' do
+          result = strategy.determine_status(dns_result, render_result, health_result)
+
+          expect(result[:verified]).to be false
+          expect(result[:should_continue]).to be true
+          expect(result[:status_reason]).to eq('DNS and health verified, waiting for Render verification')
+        end
+      end
+
+      context 'with Render and health passed' do
+        let(:render_result) { { verified: true } }
+        let(:health_result) { { healthy: true } }
+
+        it 'returns Render+health status' do
+          result = strategy.determine_status(dns_result, render_result, health_result)
+
+          expect(result[:verified]).to be false
+          expect(result[:should_continue]).to be true
+          expect(result[:status_reason]).to eq('Render and health verified, waiting for DNS propagation')
+        end
+      end
+    end
+  end
+end
+
+RSpec.describe SuccessVerificationPolicy, type: :service do
+  let(:policy) { described_class.new }
+
+  describe '#verified?' do
+    it 'returns true' do
+      expect(policy.verified?).to be true
+    end
+  end
+
+  describe '#should_continue?' do
+    it 'returns false' do
+      expect(policy.should_continue?).to be false
+    end
+  end
+
+  describe '#status_reason' do
+    it 'returns success message' do
+      expect(policy.status_reason).to eq('Domain fully verified and responding with HTTPS (SSL ready)')
+    end
+  end
+end
+
+RSpec.describe TimeoutVerificationPolicy, type: :service do
+  let(:policy) { described_class.new }
+
+  describe '#verified?' do
+    it 'returns false' do
+      expect(policy.verified?).to be false
+    end
+  end
+
+  describe '#should_continue?' do
+    it 'returns false' do
+      expect(policy.should_continue?).to be false
+    end
+  end
+
+  describe '#status_reason' do
+    it 'returns timeout message' do
+      expect(policy.status_reason).to eq('Maximum verification attempts reached')
+    end
+  end
+end
+
+RSpec.describe InProgressVerificationPolicy, type: :service do
+  describe '#verified?' do
+    it 'always returns false' do
+      policy = described_class.new(true, true, false)
+      expect(policy.verified?).to be false
+    end
+  end
+
+  describe '#should_continue?' do
+    it 'always returns true' do
+      policy = described_class.new(false, false, false)
+      expect(policy.should_continue?).to be true
+    end
+  end
+
+  describe '#status_reason' do
+    context 'with different verification states' do
+      it 'returns appropriate message for all pending' do
+        policy = described_class.new(false, false, false)
+        expect(policy.status_reason).to eq('Waiting for CNAME record, Render verification, and health check')
+      end
+
+      it 'returns appropriate message for DNS only' do
+        policy = described_class.new(true, false, false)
+        expect(policy.status_reason).to eq('DNS configured, waiting for Render verification and health check')
+      end
+
+      it 'returns appropriate message for Render only' do
+        policy = described_class.new(false, true, false)
+        expect(policy.status_reason).to eq('Render verified, waiting for DNS and health check')
+      end
+
+      it 'returns appropriate message for health only' do
+        policy = described_class.new(false, false, true)
+        expect(policy.status_reason).to eq('Health verified, waiting for DNS and Render verification')
+      end
+
+      it 'returns appropriate message for DNS and Render' do
+        policy = described_class.new(true, true, false)
+        expect(policy.status_reason).to eq('DNS and Render verified, waiting for domain to return HTTP 200')
+      end
+
+      it 'returns appropriate message for DNS and health' do
+        policy = described_class.new(true, false, true)
+        expect(policy.status_reason).to eq('DNS and health verified, waiting for Render verification')
+      end
+
+      it 'returns appropriate message for Render and health' do
+        policy = described_class.new(false, true, true)
+        expect(policy.status_reason).to eq('Render and health verified, waiting for DNS propagation')
+      end
+
+      it 'returns generic message for unknown state' do
+        # This shouldn't happen in practice, but test the fallback
+        policy = described_class.new(true, true, true) # This would be success, not in-progress
+        allow(policy).to receive(:verification_state).and_return(:unknown)
+        expect(policy.status_reason).to eq('Domain configuration is in progress')
+      end
+    end
+  end
+end
diff --git a/spec/services/render_domain_service_spec.rb b/spec/services/render_domain_service_spec.rb
new file mode 100644
index 0000000..6027172
--- /dev/null
+++ b/spec/services/render_domain_service_spec.rb
@@ -0,0 +1,322 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe RenderDomainService, type: :service do
+  let(:service) { described_class.new }
+  let(:domain_name) { 'example.com' }
+  let(:domain_id) { 'dom_123456' }
+
+  before do
+    ENV['RENDER_API_KEY'] = 'test_api_key'
+    ENV['RENDER_SERVICE_ID'] = 'srv_123456'
+  end
+
+  after do
+    ENV.delete('RENDER_API_KEY')
+    ENV.delete('RENDER_SERVICE_ID')
+  end
+
+  describe '#initialize' do
+    context 'with valid credentials' do
+      it 'initializes successfully' do
+        expect { service }.not_to raise_error
+      end
+    end
+
+    context 'without API key' do
+      before { ENV.delete('RENDER_API_KEY') }
+
+      it 'raises InvalidCredentialsError' do
+        expect { service }.to raise_error(RenderDomainService::InvalidCredentialsError, /RENDER_API_KEY/)
+      end
+    end
+
+    context 'without service ID' do
+      before { ENV.delete('RENDER_SERVICE_ID') }
+
+      it 'raises InvalidCredentialsError' do
+        expect { service }.to raise_error(RenderDomainService::InvalidCredentialsError, /RENDER_SERVICE_ID/)
+      end
+    end
+  end
+
+  describe '#add_domain' do
+    let(:response_body) { { id: domain_id, name: domain_name, verified: false }.to_json }
+    let(:successful_response) { instance_double(Net::HTTPResponse, code: '200', body: response_body) }
+
+    before do
+      allow(service).to receive(:make_request).and_return(successful_response)
+    end
+
+    it 'adds domain successfully' do
+      result = service.add_domain(domain_name)
+
+      expect(result['id']).to eq(domain_id)
+      expect(result['name']).to eq(domain_name)
+    end
+
+    it 'calls the correct API endpoint' do
+      expect(service).to receive(:make_request).with(
+        URI('https://api.render.com/v1/services/srv_123456/custom-domains'),
+        :post,
+        { name: domain_name }
+      )
+
+      service.add_domain(domain_name)
+    end
+
+    context 'when API returns error' do
+      let(:error_response) { instance_double(Net::HTTPResponse, code: '400', body: '{"error": "Domain already exists"}') }
+
+      before do
+        allow(service).to receive(:make_request).and_return(error_response)
+      end
+
+      it 'raises RenderApiError' do
+        expect { service.add_domain(domain_name) }.to raise_error(RenderDomainService::RenderApiError, /Domain already exists/)
+      end
+    end
+  end
+
+  describe '#verify_domain' do
+    let(:response_body) { { verified: true, domain_id: domain_id }.to_json }
+    let(:successful_response) { instance_double(Net::HTTPResponse, code: '200', body: response_body) }
+
+    before do
+      allow(service).to receive(:make_request).and_return(successful_response)
+    end
+
+    it 'verifies domain successfully' do
+      result = service.verify_domain(domain_id)
+
+      expect(result['verified']).to be true
+      expect(result['domain_id']).to eq(domain_id)
+    end
+
+    it 'calls the correct API endpoint' do
+      expect(service).to receive(:make_request).with(
+        URI("https://api.render.com/v1/services/srv_123456/custom-domains/#{domain_id}/verify"),
+        :post,
+        {}
+      )
+
+      service.verify_domain(domain_id)
+    end
+  end
+
+  describe '#list_domains' do
+    let(:domains) { [{ id: domain_id, name: domain_name, verified: true }] }
+    let(:response_body) { domains.to_json }
+    let(:successful_response) { instance_double(Net::HTTPResponse, code: '200', body: response_body) }
+
+    before do
+      allow(service).to receive(:make_request).and_return(successful_response)
+    end
+
+    it 'lists domains successfully' do
+      result = service.list_domains
+      expect(result.map(&:deep_symbolize_keys)).to eq(domains)
+      expect(result.first['name']).to eq(domain_name)
+    end
+  end
+
+  describe '#remove_domain' do
+    let(:successful_response) { instance_double(Net::HTTPResponse, code: '204') }
+
+    before do
+      allow(service).to receive(:make_request).and_return(successful_response)
+    end
+
+    it 'removes domain successfully' do
+      result = service.remove_domain(domain_id)
+
+      expect(result).to be true
+    end
+
+    it 'calls the correct API endpoint' do
+      expect(service).to receive(:make_request).with(
+        URI("https://api.render.com/v1/services/srv_123456/custom-domains/#{domain_id}"),
+        :delete
+      )
+
+      service.remove_domain(domain_id)
+    end
+  end
+
+  describe '#find_domain_by_name' do
+    let(:domains) { [{ 'id' => domain_id, 'name' => domain_name, 'verified' => true }] }
+
+    before do
+      allow(service).to receive(:list_domains).and_return(domains)
+    end
+
+    it 'finds domain by name' do
+      result = service.find_domain_by_name(domain_name)
+
+      expect(result['name']).to eq(domain_name)
+      expect(result['id']).to eq(domain_id)
+    end
+
+    it 'returns nil for non-existent domain' do
+      result = service.find_domain_by_name('nonexistent.com')
+
+      expect(result).to be_nil
+    end
+  end
+
+  describe '#domain_status' do
+    context 'when domain exists and is verified' do
+      let(:domains) { [{ 'id' => domain_id, 'name' => domain_name, 'verified' => true }] }
+
+      before do
+        allow(service).to receive(:list_domains).and_return(domains)
+      end
+
+      it 'returns correct status' do
+        result = service.domain_status(domain_name)
+        expect(result[:exists]).to be true
+        expect(result[:verified]).to be true
+        expect(result[:domain_id]).to eq(domain_id)
+      end
+    end
+
+    context 'when domain does not exist' do
+      before do
+        allow(service).to receive(:list_domains).and_return([])
+      end
+
+      it 'returns correct status' do
+        result = service.domain_status(domain_name)
+
+        expect(result[:exists]).to be false
+        expect(result[:verified]).to be false
+        expect(result[:domain_id]).to be_nil
+      end
+    end
+  end
+
+  describe 'retry logic for rate limiting' do
+    let(:initial_response) { instance_double(Net::HTTPResponse, code: '429', body: '{"error":"Rate limit exceeded"}') }
+    let(:success_add_response) { instance_double(Net::HTTPResponse, code: '200', body: { id: 'dom-123', name: domain_name }.to_json) }
+    let(:success_verify_response) { instance_double(Net::HTTPResponse, code: '200', body: { verified: true, domain_id: 'dom-123' }.to_json) }
+    let(:success_list_response) { instance_double(Net::HTTPResponse, code: '200', body: [{ id: 'dom-123', name: domain_name, verified: true }].to_json) }
+
+    before do
+      # Mock the execute_request method to control responses
+      allow(service).to receive(:sleep) # Don't actually sleep in tests
+    end
+
+    describe '#add_domain with rate limiting' do
+      it 'retries on 429 and succeeds' do
+        # First call returns 429, second call succeeds
+        allow(service).to receive(:execute_request).and_return(initial_response, success_add_response)
+        allow(service).to receive(:calculate_retry_delay).and_return(0.1)
+
+        # Should not raise error and return parsed success response
+        result = service.add_domain(domain_name)
+        expect(result).to include('id' => 'dom-123', 'name' => domain_name)
+        
+        # Should have made 2 requests (initial + 1 retry)
+        expect(service).to have_received(:execute_request).twice
+      end
+
+      it 'fails after max retries' do
+        # All calls return 429
+        allow(service).to receive(:execute_request).and_return(initial_response)
+        allow(service).to receive(:calculate_retry_delay).and_return(0.1)
+
+        expect { service.add_domain(domain_name) }.to raise_error(
+          RenderDomainService::RateLimitError, 
+          /Rate limit exceeded after 3 retries/
+        )
+        
+        # Should have made 4 requests (initial + 3 retries)
+        expect(service).to have_received(:execute_request).exactly(4).times
+      end
+
+      it 'respects Retry-After header when present' do
+        response_with_retry_after = instance_double(Net::HTTPResponse, code: '429', body: '{}')
+        allow(response_with_retry_after).to receive(:[]).with('Retry-After').and_return('5')
+        allow(service).to receive(:execute_request).and_return(response_with_retry_after, success_add_response)
+
+        service.add_domain(domain_name)
+        
+        # Should have calculated delay based on Retry-After header
+        expect(service).to have_received(:sleep).with(5.0)
+      end
+    end
+
+    describe '#calculate_retry_delay' do
+      let(:response_without_retry_after) { instance_double(Net::HTTPResponse) }
+      let(:response_with_retry_after) { instance_double(Net::HTTPResponse) }
+
+      before do
+        allow(response_without_retry_after).to receive(:[]).with('Retry-After').and_return(nil)
+        allow(response_with_retry_after).to receive(:[]).with('Retry-After').and_return('10')
+      end
+
+      it 'uses Retry-After header when present' do
+        delay = service.send(:calculate_retry_delay, 0, response_with_retry_after)
+        expect(delay).to eq(10)
+      end
+
+      it 'uses exponential backoff when no Retry-After header' do
+        # Mock rand to return consistent results for testing
+        allow(service).to receive(:rand).and_return(0.5)
+        
+        # First retry: BASE_DELAY * (2^0) + jitter = 2 * 1 + (0.5 * 2 * 0.1) = 2.1
+        delay = service.send(:calculate_retry_delay, 0, response_without_retry_after)
+        expect(delay).to be_within(0.1).of(2.1)
+        
+        # Second retry: BASE_DELAY * (2^1) + jitter = 2 * 2 + (0.5 * 4 * 0.1) = 4.2
+        delay = service.send(:calculate_retry_delay, 1, response_without_retry_after)
+        expect(delay).to be_within(0.1).of(4.2)
+      end
+
+      it 'caps delay at MAX_DELAY' do
+        delay = service.send(:calculate_retry_delay, 10, response_without_retry_after)
+        expect(delay).to eq(60) # MAX_DELAY
+      end
+
+      it 'caps Retry-After header at MAX_DELAY' do
+        large_retry_after = instance_double(Net::HTTPResponse)
+        allow(large_retry_after).to receive(:[]).with('Retry-After').and_return('120')
+        
+        delay = service.send(:calculate_retry_delay, 0, large_retry_after)
+        expect(delay).to eq(60) # MAX_DELAY
+      end
+    end
+
+    describe 'integration with other methods' do
+      it 'applies retry logic to verify_domain' do
+        allow(service).to receive(:execute_request).and_return(initial_response, success_verify_response)
+        allow(service).to receive(:calculate_retry_delay).and_return(0.1)
+
+        result = service.verify_domain(domain_id)
+        expect(result).to include('verified' => true, 'domain_id' => 'dom-123')
+        expect(service).to have_received(:execute_request).twice
+      end
+
+      it 'applies retry logic to list_domains' do
+        allow(service).to receive(:execute_request).and_return(initial_response, success_list_response)
+        allow(service).to receive(:calculate_retry_delay).and_return(0.1)
+
+        result = service.list_domains
+        expect(result).to be_an(Array)
+        expect(result.first).to include('id' => 'dom-123', 'name' => domain_name)
+        expect(service).to have_received(:execute_request).twice
+      end
+
+      it 'applies retry logic to remove_domain' do
+        success_delete = instance_double(Net::HTTPResponse, code: '204')
+        allow(service).to receive(:execute_request).and_return(initial_response, success_delete)
+        allow(service).to receive(:calculate_retry_delay).and_return(0.1)
+
+        result = service.remove_domain(domain_id)
+        expect(result).to be true
+        expect(service).to have_received(:execute_request).twice
+      end
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/services/subdomain_availability_service_spec.rb b/spec/services/subdomain_availability_service_spec.rb
new file mode 100644
index 0000000..54be07f
--- /dev/null
+++ b/spec/services/subdomain_availability_service_spec.rb
@@ -0,0 +1,69 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe SubdomainAvailabilityService, type: :service do
+  let(:service) { described_class }
+
+  describe '.call' do
+    context 'when subdomain is blank' do
+      it 'returns unavailable' do
+        result = service.call('')
+        expect(result.available).to be_falsey
+        expect(result.message).to eq('Subdomain cannot be blank')
+      end
+    end
+
+    context 'when subdomain format is invalid' do
+      it 'normalizes uppercase characters and can succeed' do
+        result = service.call('BadSub')
+        expect(result.available).to be_truthy
+      end
+
+      it 'returns unavailable for special characters' do
+        result = service.call('bad_sub!')
+        expect(result.available).to be_falsey
+      end
+    end
+
+    context 'when subdomain is a reserved word' do
+      it 'returns unavailable' do
+        result = service.call('www')
+        expect(result.available).to be_falsey
+        expect(result.message).to eq('This subdomain is reserved')
+      end
+    end
+
+    context 'when subdomain is already taken' do
+      let!(:existing) { create(:business, subdomain: 'taken', hostname: 'taken') }
+
+      it 'returns unavailable' do
+        result = service.call('taken')
+        expect(result.available).to be_falsey
+        expect(result.message).to eq('This subdomain is already taken')
+      end
+
+      it 'is available when excluding the same business' do
+        result = service.call('taken', exclude_business: existing)
+        expect(result.available).to be_truthy
+      end
+    end
+
+    context 'when subdomain is already used as hostname' do
+      let!(:existing_hostname) { create(:business, hostname: 'hostonly', subdomain: 'different') }
+
+      it 'returns unavailable' do
+        result = service.call('hostonly')
+        expect(result.available).to be_falsey
+      end
+    end
+
+    context 'when subdomain is available' do
+      it 'returns available' do
+        result = service.call('newunique')
+        expect(result.available).to be_truthy
+        expect(result.message).to eq('Subdomain is available')
+      end
+    end
+  end
+end
diff --git a/spec/system/admin/domain_coverage_management_spec.rb b/spec/system/admin/domain_coverage_management_spec.rb
index 8f930dd..e7bd430 100644
--- a/spec/system/admin/domain_coverage_management_spec.rb
+++ b/spec/system/admin/domain_coverage_management_spec.rb
@@ -127,7 +127,7 @@ RSpec.describe "Admin Domain Coverage Management", type: :request, admin: true d
         
         # Check redirect success instead of follow_redirect! to avoid issues
         expect(response).to have_http_status(:redirect)
-        expect(response).to redirect_to(admin_business_path(new_business))
+        expect(response).to redirect_to(admin_business_path(new_business.id))
       end
     end
 
@@ -152,7 +152,7 @@ RSpec.describe "Admin Domain Coverage Management", type: :request, admin: true d
         expect(premium_business.domain_coverage_notes).to eq('Updated coverage information')
         
         # Check redirect success instead of follow_redirect! to avoid issues
-        expect(response).to redirect_to(admin_business_path(premium_business))
+        expect(response).to redirect_to(admin_business_path(premium_business.id))
       end
     end
   end
diff --git a/spec/system/business_manager/custom_domain_setup_spec.rb b/spec/system/business_manager/custom_domain_setup_spec.rb
new file mode 100644
index 0000000..6a6a153
--- /dev/null
+++ b/spec/system/business_manager/custom_domain_setup_spec.rb
@@ -0,0 +1,308 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe "Custom Domain Setup", type: :system do
+  let!(:premium_business) do
+    create(:business,
+      tier: 'premium',
+      host_type: 'custom_domain',
+      hostname: 'testdomain.com',
+      status: 'cname_pending',
+      cname_monitoring_active: false,
+      cname_check_attempts: 0
+    )
+  end
+  let!(:manager) { create(:user, :manager, business: premium_business) }
+
+  # Mock services to avoid real API calls
+  let(:mock_render_service) { instance_double(RenderDomainService) }
+  let(:mock_dns_checker) { instance_double(CnameDnsChecker) }
+  let(:mock_setup_service) { instance_double(CnameSetupService) }
+
+  before do
+    driven_by(:rack_test)
+    login_as(manager, scope: :user)
+    
+    # Switch to business subdomain for testing
+    switch_to_subdomain(premium_business.subdomain)
+    Rails.application.reload_routes!
+
+    # Mock all external services
+    allow(CnameSetupService).to receive(:new).and_return(mock_setup_service)
+    allow(RenderDomainService).to receive(:new).and_return(mock_render_service)
+    allow(CnameDnsChecker).to receive(:new).and_return(mock_dns_checker)
+    
+    # Mock mailer to prevent real emails
+    allow(DomainMailer).to receive(:setup_instructions).and_return(double(deliver_now: true))
+    allow(DomainMailer).to receive(:activation_success).and_return(double(deliver_now: true))
+    allow(DomainMailer).to receive(:timeout_help).and_return(double(deliver_now: true))
+  end
+
+  def switch_to_subdomain(subdomain)
+    mock_business = OpenStruct.new(
+      subdomain: subdomain,
+      hostname: subdomain,
+      host_type: 'subdomain'
+    )
+    def mock_business.host_type_subdomain?; host_type == 'subdomain'; end
+    def mock_business.host_type_custom_domain?; host_type == 'custom_domain'; end
+    
+    request = create_test_request
+    host_url = TenantHost.url_for(mock_business, request)
+    Capybara.app_host = host_url
+  end
+
+  describe "Happy Path - Successful Domain Setup" do
+    it "completes the full domain setup flow" do
+      # Mock successful setup service
+      allow(mock_setup_service).to receive(:start_setup!).and_return({
+        success: true,
+        domain: 'testdomain.com',
+        status: 'cname_monitoring'
+      })
+
+      # Mock successful DNS verification for monitoring
+      allow(mock_dns_checker).to receive(:verify_cname).and_return({
+        verified: true,
+        target: 'bizblasts.onrender.com',
+        checked_at: Time.current,
+        error: nil
+      })
+
+      # Step 1: Business starts with pending domain
+      expect(premium_business.status).to eq('cname_pending')
+      expect(premium_business.cname_monitoring_active).to be false
+
+      # Step 2: Admin initiates domain setup (simulate admin action)
+      # This would typically be triggered by an admin button click
+      result = mock_setup_service.start_setup!
+      
+      expect(result[:success]).to be true
+      expect(result[:domain]).to eq('testdomain.com')
+
+      # Update business status to simulate successful setup
+      premium_business.update!(
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 1
+      )
+
+      # Step 3: Simulate DNS check passing
+      dns_result = mock_dns_checker.verify_cname
+      expect(dns_result[:verified]).to be true
+
+      # Step 4: Simulate successful domain activation
+      premium_business.update!(
+        status: 'cname_active',
+        cname_monitoring_active: false
+      )
+
+      # Verify final state
+      premium_business.reload
+      expect(premium_business.status).to eq('cname_active')
+      expect(premium_business.cname_monitoring_active).to be false
+      expect(premium_business.hostname).to eq('testdomain.com')
+
+      # Note: We don't test mailer call here since we mocked the setup service
+      # The mailer is tested separately in the CnameSetupService specs
+    end
+  end
+
+  describe "Domain Setup via Business Registration" do
+    it "processes custom domain configuration for premium users" do
+      # This test focuses on the domain setup logic rather than full registration flow
+      # Full registration flow is tested separately to avoid cross-host redirect complexity
+      
+      # Create a premium business with custom domain
+      premium_business = create(:business,
+        tier: 'premium',
+        host_type: 'custom_domain',
+        hostname: 'mydomain.com',
+        status: 'cname_pending'
+      )
+      
+      # Mock successful setup service call
+      setup_service = CnameSetupService.new(premium_business)
+      allow(CnameSetupService).to receive(:new).and_return(setup_service)
+      allow(setup_service).to receive(:start_setup!).and_return({
+        success: true,
+        domain: 'mydomain.com',
+        status: 'cname_monitoring'
+      })
+
+      # Simulate domain setup initiation
+      result = setup_service.start_setup!
+      
+      expect(result[:success]).to be true
+      expect(result[:domain]).to eq('mydomain.com')
+      expect(result[:status]).to eq('cname_monitoring')
+    end
+  end
+
+  describe "Timeout Path - Domain Setup Fails" do
+    it "handles domain setup timeout after maximum attempts" do
+      # Set up business that has been monitoring for a while
+      premium_business.update!(
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 11 # Close to max attempts (12)
+      )
+
+      # Mock DNS check that keeps failing
+      allow(mock_dns_checker).to receive(:verify_cname).and_return({
+        verified: false,
+        target: nil,
+        checked_at: Time.current,
+        error: 'CNAME not found or pointing to wrong target'
+      })
+
+      # Mock render domain verification also failing
+      allow(mock_render_service).to receive(:verify_domain).and_return(false)
+
+      # Run the monitoring job multiple times to reach max attempts
+      DomainMonitoringJob.perform_now(premium_business.id)
+      
+      # Update to simulate reaching max attempts
+      premium_business.update!(
+        cname_check_attempts: 12,
+        status: 'cname_timeout'
+      )
+
+      premium_business.reload
+      expect(premium_business.status).to eq('cname_timeout')
+      expect(premium_business.cname_check_attempts).to eq(12)
+      
+      # Note: Mailer call testing is handled in DomainMonitoringService specs
+      # since we mock the monitoring service here
+    end
+
+    it "handles DNS configuration errors gracefully" do
+      premium_business.update!(
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 5
+      )
+
+      # Mock DNS check with configuration error
+      allow(mock_dns_checker).to receive(:verify_cname).and_return({
+        verified: false,
+        target: 'wrong-target.example.com',
+        checked_at: Time.current,
+        error: 'CNAME points to wrong target'
+      })
+
+      # Mock monitoring service to raise error
+      allow(DomainMonitoringService).to receive(:new).and_raise(
+        DomainMonitoringService::MonitoringError, 'DNS configuration error'
+      )
+
+      # Should handle the error gracefully
+      expect { DomainMonitoringJob.perform_now(premium_business.id) }.not_to raise_error
+    end
+
+    it "stops monitoring when business downgrades from premium" do
+      # Business starts in monitoring state
+      premium_business.update!(
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 5
+      )
+
+      # Simulate business downgrade
+      premium_business.update!(tier: 'standard')
+
+      # Run monitoring job
+      DomainMonitoringJob.perform_now(premium_business.id)
+
+      # Should skip processing non-premium businesses
+      premium_business.reload
+      expect(premium_business.cname_check_attempts).to eq(5) # Unchanged
+    end
+
+    it "handles render API errors during monitoring" do
+      premium_business.update!(
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 8
+      )
+
+      # Mock DNS check success but Render API failure
+      allow(mock_dns_checker).to receive(:verify_cname).and_return({
+        verified: true,
+        target: 'bizblasts.onrender.com',
+        checked_at: Time.current,
+        error: nil
+      })
+
+      # Mock render service to fail
+      allow(mock_render_service).to receive(:verify_domain).and_raise(
+        RenderDomainService::RenderApiError, 'Service temporarily unavailable'
+      )
+
+      # Should handle the error and continue monitoring
+      expect { DomainMonitoringJob.perform_now(premium_business.id) }.not_to raise_error
+      
+      premium_business.reload
+      expect(premium_business.status).to eq('cname_monitoring') # Still monitoring
+    end
+  end
+
+  describe "Domain Setup Error Scenarios" do
+    it "handles domain already exists error during setup" do
+      # Mock setup service to return domain conflict
+      allow(mock_setup_service).to receive(:start_setup!).and_raise(
+        CnameSetupService::DomainAlreadyExistsError, 'Domain already exists in Render'
+      )
+
+      expect { mock_setup_service.start_setup! }.to raise_error(
+        CnameSetupService::DomainAlreadyExistsError
+      )
+    end
+
+    it "handles invalid business configuration during setup" do
+      # Create non-premium business
+      free_business = create(:business, tier: 'free', host_type: 'subdomain')
+      
+      # Mock setup service with invalid business
+      invalid_setup_service = CnameSetupService.new(free_business)
+      
+      allow(CnameSetupService).to receive(:new).and_return(invalid_setup_service)
+      allow(invalid_setup_service).to receive(:start_setup!).and_raise(
+        CnameSetupService::InvalidBusinessError, 'Business not eligible for custom domain'
+      )
+
+      expect { invalid_setup_service.start_setup! }.to raise_error(
+        CnameSetupService::InvalidBusinessError
+      )
+    end
+  end
+
+  describe "Monitoring Job Integration" do
+    it "processes domain monitoring through the background job" do
+      # Set up business in monitoring state
+      premium_business.update!(
+        status: 'cname_monitoring',
+        cname_monitoring_active: true,
+        cname_check_attempts: 3
+      )
+
+      # Mock successful DNS verification
+      allow(mock_dns_checker).to receive(:verify_cname).and_return({
+        verified: true,
+        target: 'bizblasts.onrender.com',
+        checked_at: Time.current,
+        error: nil
+      })
+
+      # Mock successful render domain verification
+      allow(mock_render_service).to receive(:verify_domain).and_return(true)
+
+      # Run the monitoring job
+      DomainMonitoringJob.perform_now(premium_business.id)
+
+      # Check that business was processed (in real scenario, status would be updated)
+      expect(premium_business.cname_due_for_check?).to be false # recently checked
+    end
+  end
+end
\ No newline at end of file
diff --git a/spec/system/business_registration_spec.rb b/spec/system/business_registration_spec.rb
index 8d7d294..7e7b434 100644
--- a/spec/system/business_registration_spec.rb
+++ b/spec/system/business_registration_spec.rb
@@ -79,9 +79,9 @@ RSpec.describe "Business Registration", type: :system do
       expect(page).to have_content("Free Plan")
       expect(page).to have_content("$0/month")
       expect(page).to have_content("Standard Plan")
-      expect(page).to have_content("$49/month")
+      expect(page).to have_content("$9.99/month")
       expect(page).to have_content("Premium Plan")
-      expect(page).to have_content("$99/month")
+      expect(page).to have_content("$29.99/month")
     end
 
     it "shows plan features" do
@@ -145,9 +145,12 @@ RSpec.describe "Business Registration", type: :system do
         click_button "Select Premium"
       end
       
-      # Should show domain coverage info in help text
-      expect(page).to have_content("Domain Coverage: BizBlasts covers up to $20/year for new domains")
-      expect(page).to have_content("For domains over $20/year, we'll contact you with alternatives")
+      # Should show domain coverage info in help text using new bullet format
+      expect(page).to have_content("💰 Domain Coverage Included:")
+      expect(page).to have_content("BizBlasts covers up to $20/year for new domain registration")
+      expect(page).to have_content("Auto-renewal setup: We pay domain costs every year up to $20")
+      expect(page).to have_content("If you already own your domain, you handle domain costs")
+      expect(page).to have_content("Our team manages all technical setup and verification")
     end
 
     it "has selection buttons for each plan" do
@@ -170,8 +173,8 @@ RSpec.describe "Business Registration", type: :system do
       # Wait for JavaScript to update the hidden field
       expect(page).to have_field("selected_tier", with: "standard", type: :hidden)
       
-      # Check that the hostname field becomes visible
-      expect(page).to have_field("user_business_attributes_hostname", visible: true)
+      # Check that the subdomain field is visible for Standard tier
+      expect(page).to have_field("registration_subdomain_field", visible: true)
     end
   end
 
@@ -197,12 +200,12 @@ RSpec.describe "Business Registration", type: :system do
       fill_in "Zip", with: "12345"
       fill_in "Description", with: "A test business"
       
-      # Free plan should be selected by default, which makes hostname field visible
+      # Free plan should be selected by default, which makes subdomain field visible
       expect(page).to have_field("selected_tier", with: "free", type: :hidden)
       
-      # Wait for hostname field to be visible and fill it
-      expect(page).to have_field("user_business_attributes_hostname", visible: true)
-      fill_in "user_business_attributes_hostname", with: "testbiz"
+      # For free tier, subdomain field should be visible (hostname field is not used)
+      expect(page).to have_field("registration_subdomain_field", visible: true)
+      fill_in "registration_subdomain_field", with: "testbiz"
       
       # Accept all required policies for business users
       check "policy_acceptances_terms_of_service"
@@ -210,15 +213,20 @@ RSpec.describe "Business Registration", type: :system do
       check "policy_acceptances_acceptable_use_policy"
       check "policy_acceptances_return_policy"
       
-      # In system test environment, paid tiers create immediately (not Stripe redirect)
-      expect {
-        click_button "Create Business Account"
-      }.to change(Business, :count).by(1).and change(User, :count).by(1)
+      # In system test environment, free tier creates immediately (not Stripe redirect)
+      # Add a small wait to ensure any JavaScript has processed
+      sleep 0.5
+      
+      click_button "Create Business Account"
       
-      # Should redirect to root path in test environment
+      # Wait for the redirect and database transaction to complete
       expect(page).to have_current_path(root_path)
       expect(page).to have_content("A message with a confirmation link has been sent to your email address. Please follow the link to activate your account.")
       
+      # Verify the records were created
+      expect(Business.count).to eq(1)
+      expect(User.count).to eq(1)
+      
       # Verify business was created with correct attributes
       business = Business.last
       expect(business.tier).to eq("free")
@@ -254,10 +262,10 @@ RSpec.describe "Business Registration", type: :system do
         click_button "Select Standard"
       end
       
-      # Wait for JavaScript to update and hostname field to be visible
+      # Wait for JavaScript to update and subdomain field to be visible
       expect(page).to have_field("selected_tier", with: "standard", type: :hidden)
-      expect(page).to have_field("user_business_attributes_hostname", visible: true)
-      fill_in "user_business_attributes_hostname", with: "standardbiz"
+      expect(page).to have_field("registration_subdomain_field", visible: true)
+      fill_in "registration_subdomain_field", with: "standardbiz"
       
       # Accept all required policies for business users
       check "policy_acceptances_terms_of_service"
@@ -271,7 +279,7 @@ RSpec.describe "Business Registration", type: :system do
         click_button "Create Business Account"
       }.to change(Business, :count).by(0).and change(User, :count).by(0)
       
-      # Should redirect to Stripe checkout for paid tiers
+      # Should redirect to Stripe checkout for paid tiers in system test environment
       expect(current_url).to eq("https://checkout.stripe.com/pay/cs_subscription_123")
       
       # Verify Stripe checkout session was created with registration data in metadata
@@ -325,10 +333,10 @@ RSpec.describe "Business Registration", type: :system do
         click_button "Select Premium"
       end
       
-      # Wait for JavaScript and fill hostname
+      # Wait for JavaScript and fill subdomain (Premium can use subdomain or custom domain)
       expect(page).to have_field("selected_tier", with: "premium", type: :hidden)
-      expect(page).to have_field("user_business_attributes_hostname", visible: true)
-      fill_in "user_business_attributes_hostname", with: "testbiz"
+      expect(page).to have_field("registration_subdomain_field", visible: true)
+      fill_in "registration_subdomain_field", with: "testbiz"
       
       # Accept all required policies
       check "policy_acceptances_terms_of_service"
@@ -383,10 +391,10 @@ RSpec.describe "Business Registration", type: :system do
         click_button "Select Premium"
       end
       
-      # Wait for JavaScript and fill hostname
+      # Wait for JavaScript and fill subdomain (Premium can use subdomain or custom domain)
       expect(page).to have_field("selected_tier", with: "premium", type: :hidden)
-      expect(page).to have_field("user_business_attributes_hostname", visible: true)
-      fill_in "user_business_attributes_hostname", with: "testbiz2"
+      expect(page).to have_field("registration_subdomain_field", visible: true)
+      fill_in "registration_subdomain_field", with: "testbiz2"
       
       # Accept all required policies
       check "policy_acceptances_terms_of_service"
diff --git a/spec/system/stripe_invoice_payment_system_spec.rb b/spec/system/stripe_invoice_payment_system_spec.rb
index 956442d..f85bdb3 100644
--- a/spec/system/stripe_invoice_payment_system_spec.rb
+++ b/spec/system/stripe_invoice_payment_system_spec.rb
@@ -72,7 +72,7 @@ RSpec.describe 'Invoice UI navigation after booking and Stripe payment', type: :
     expect(page).to have_content(/Status.*Pending/i)
     
     # Test direct navigation to payments URL to see what happens
-    payment_url = new_tenant_payment_path(invoice_id: invoice.id)
+    payment_url = new_payment_path(invoice_id: invoice.id)
     
     visit payment_url
     
